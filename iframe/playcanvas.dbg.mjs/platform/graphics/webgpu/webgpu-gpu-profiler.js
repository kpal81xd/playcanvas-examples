import { GpuProfiler } from '../gpu-profiler.js';
import { WebgpuQuerySet } from './webgpu-query-set.js';

class WebgpuGpuProfiler extends GpuProfiler {
  constructor(device) {
    super();
    this.device = void 0;
    /** @type {number} */
    this.frameGPUMarkerSlot = void 0;
    this.device = device;

    // gpu timing queries
    this.timestampQueriesSet = device.supportsTimestampQuery ? new WebgpuQuerySet(device, true, 512) : null;
  }
  destroy() {
    var _this$timestampQuerie;
    (_this$timestampQuerie = this.timestampQueriesSet) == null || _this$timestampQuerie.destroy();
    this.timestampQueriesSet = null;
  }
  frameStart() {
    this.processEnableRequest();
  }
  frameEnd() {
    if (this._enabled) {
      var _this$timestampQuerie2;
      // schedule command buffer where timestamps are copied to CPU
      (_this$timestampQuerie2 = this.timestampQueriesSet) == null || _this$timestampQuerie2.resolve(this.slotCount * 2);
    }
  }
  request() {
    if (this._enabled) {
      var _this$timestampQuerie3;
      // request results
      const renderVersion = this.device.renderVersion;
      (_this$timestampQuerie3 = this.timestampQueriesSet) == null || _this$timestampQuerie3.request(this.slotCount, renderVersion).then(results => {
        this.report(results.renderVersion, results.timings);
      });
      super.request(renderVersion);
    }
  }
}

export { WebgpuGpuProfiler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWdwdS1wcm9maWxlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL3dlYmdwdS93ZWJncHUtZ3B1LXByb2ZpbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdwdVByb2ZpbGVyIH0gZnJvbSBcIi4uL2dwdS1wcm9maWxlci5qc1wiO1xuaW1wb3J0IHsgV2ViZ3B1UXVlcnlTZXQgfSBmcm9tIFwiLi93ZWJncHUtcXVlcnktc2V0LmpzXCI7XG5cbmNsYXNzIFdlYmdwdUdwdVByb2ZpbGVyIGV4dGVuZHMgR3B1UHJvZmlsZXIge1xuICAgIGRldmljZTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGZyYW1lR1BVTWFya2VyU2xvdDtcblxuICAgIGNvbnN0cnVjdG9yKGRldmljZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRldmljZSA9IGRldmljZTtcblxuICAgICAgICAvLyBncHUgdGltaW5nIHF1ZXJpZXNcbiAgICAgICAgdGhpcy50aW1lc3RhbXBRdWVyaWVzU2V0ID0gZGV2aWNlLnN1cHBvcnRzVGltZXN0YW1wUXVlcnkgPyBuZXcgV2ViZ3B1UXVlcnlTZXQoZGV2aWNlLCB0cnVlLCA1MTIpIDogbnVsbDtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRpbWVzdGFtcFF1ZXJpZXNTZXQ/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBRdWVyaWVzU2V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBmcmFtZVN0YXJ0KCkge1xuICAgICAgICB0aGlzLnByb2Nlc3NFbmFibGVSZXF1ZXN0KCk7XG4gICAgfVxuXG4gICAgZnJhbWVFbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbmFibGVkKSB7XG4gICAgICAgICAgICAvLyBzY2hlZHVsZSBjb21tYW5kIGJ1ZmZlciB3aGVyZSB0aW1lc3RhbXBzIGFyZSBjb3BpZWQgdG8gQ1BVXG4gICAgICAgICAgICB0aGlzLnRpbWVzdGFtcFF1ZXJpZXNTZXQ/LnJlc29sdmUodGhpcy5zbG90Q291bnQgKiAyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVlc3QoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbmFibGVkKSB7XG4gICAgICAgICAgICAvLyByZXF1ZXN0IHJlc3VsdHNcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlclZlcnNpb24gPSB0aGlzLmRldmljZS5yZW5kZXJWZXJzaW9uO1xuICAgICAgICAgICAgdGhpcy50aW1lc3RhbXBRdWVyaWVzU2V0Py5yZXF1ZXN0KHRoaXMuc2xvdENvdW50LCByZW5kZXJWZXJzaW9uKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXBvcnQocmVzdWx0cy5yZW5kZXJWZXJzaW9uLCByZXN1bHRzLnRpbWluZ3MpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHN1cGVyLnJlcXVlc3QocmVuZGVyVmVyc2lvbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IFdlYmdwdUdwdVByb2ZpbGVyIH07XG4iXSwibmFtZXMiOlsiV2ViZ3B1R3B1UHJvZmlsZXIiLCJHcHVQcm9maWxlciIsImNvbnN0cnVjdG9yIiwiZGV2aWNlIiwiZnJhbWVHUFVNYXJrZXJTbG90IiwidGltZXN0YW1wUXVlcmllc1NldCIsInN1cHBvcnRzVGltZXN0YW1wUXVlcnkiLCJXZWJncHVRdWVyeVNldCIsImRlc3Ryb3kiLCJfdGhpcyR0aW1lc3RhbXBRdWVyaWUiLCJmcmFtZVN0YXJ0IiwicHJvY2Vzc0VuYWJsZVJlcXVlc3QiLCJmcmFtZUVuZCIsIl9lbmFibGVkIiwiX3RoaXMkdGltZXN0YW1wUXVlcmllMiIsInJlc29sdmUiLCJzbG90Q291bnQiLCJyZXF1ZXN0IiwiX3RoaXMkdGltZXN0YW1wUXVlcmllMyIsInJlbmRlclZlcnNpb24iLCJ0aGVuIiwicmVzdWx0cyIsInJlcG9ydCIsInRpbWluZ3MiXSwibWFwcGluZ3MiOiI7OztBQUdBLE1BQU1BLGlCQUFpQixTQUFTQyxXQUFXLENBQUM7RUFNeENDLFdBQVdBLENBQUNDLE1BQU0sRUFBRTtBQUNoQixJQUFBLEtBQUssRUFBRSxDQUFBO0FBQUMsSUFBQSxJQUFBLENBTlpBLE1BQU0sR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUVOO0FBQUEsSUFBQSxJQUFBLENBQ0FDLGtCQUFrQixHQUFBLEtBQUEsQ0FBQSxDQUFBO0lBSWQsSUFBSSxDQUFDRCxNQUFNLEdBQUdBLE1BQU0sQ0FBQTs7QUFFcEI7QUFDQSxJQUFBLElBQUksQ0FBQ0UsbUJBQW1CLEdBQUdGLE1BQU0sQ0FBQ0csc0JBQXNCLEdBQUcsSUFBSUMsY0FBYyxDQUFDSixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQTtBQUMzRyxHQUFBO0FBRUFLLEVBQUFBLE9BQU9BLEdBQUc7QUFBQSxJQUFBLElBQUFDLHFCQUFBLENBQUE7SUFDTixDQUFBQSxxQkFBQSxPQUFJLENBQUNKLG1CQUFtQixhQUF4QkkscUJBQUEsQ0FBMEJELE9BQU8sRUFBRSxDQUFBO0lBQ25DLElBQUksQ0FBQ0gsbUJBQW1CLEdBQUcsSUFBSSxDQUFBO0FBQ25DLEdBQUE7QUFFQUssRUFBQUEsVUFBVUEsR0FBRztJQUNULElBQUksQ0FBQ0Msb0JBQW9CLEVBQUUsQ0FBQTtBQUMvQixHQUFBO0FBRUFDLEVBQUFBLFFBQVFBLEdBQUc7SUFDUCxJQUFJLElBQUksQ0FBQ0MsUUFBUSxFQUFFO0FBQUEsTUFBQSxJQUFBQyxzQkFBQSxDQUFBO0FBQ2Y7QUFDQSxNQUFBLENBQUFBLHNCQUFBLEdBQUEsSUFBSSxDQUFDVCxtQkFBbUIsYUFBeEJTLHNCQUFBLENBQTBCQyxPQUFPLENBQUMsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDekQsS0FBQTtBQUNKLEdBQUE7QUFFQUMsRUFBQUEsT0FBT0EsR0FBRztJQUNOLElBQUksSUFBSSxDQUFDSixRQUFRLEVBQUU7QUFBQSxNQUFBLElBQUFLLHNCQUFBLENBQUE7QUFDZjtBQUNBLE1BQUEsTUFBTUMsYUFBYSxHQUFHLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ2dCLGFBQWEsQ0FBQTtBQUMvQyxNQUFBLENBQUFELHNCQUFBLEdBQUksSUFBQSxDQUFDYixtQkFBbUIsS0FBeEJhLElBQUFBLElBQUFBLHNCQUFBLENBQTBCRCxPQUFPLENBQUMsSUFBSSxDQUFDRCxTQUFTLEVBQUVHLGFBQWEsQ0FBQyxDQUFDQyxJQUFJLENBQUVDLE9BQU8sSUFBSztRQUMvRSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRixhQUFhLEVBQUVFLE9BQU8sQ0FBQ0UsT0FBTyxDQUFDLENBQUE7QUFDdkQsT0FBQyxDQUFDLENBQUE7QUFFRixNQUFBLEtBQUssQ0FBQ04sT0FBTyxDQUFDRSxhQUFhLENBQUMsQ0FBQTtBQUNoQyxLQUFBO0FBQ0osR0FBQTtBQUNKOzs7OyJ9
