import { TRACEID_RENDER_QUEUE } from '../../../core/constants.js';
import { DebugHelper, Debug } from '../../../core/debug.js';

/**
 * A WebGPU implementation of the Buffer.
 *
 * @ignore
 */
class WebgpuBuffer {
  constructor() {
    /**
     * @type {GPUBuffer}
     * @private
     */
    this.buffer = null;
  }
  destroy(device) {
    if (this.buffer) {
      this.buffer.destroy();
      this.buffer = null;
    }
  }
  get initialized() {
    return !!this.buffer;
  }
  loseContext() {}

  /**
   * @param {import('./webgpu-graphics-device.js').WebgpuGraphicsDevice} device - Graphics device.
   * @param {*} usage -
   * @param {*} target -
   * @param {*} storage -
   */
  unlock(device, usage, target, storage) {
    var _storage$byteOffset, _storage$buffer;
    const wgpu = device.wgpu;

    // offset of getMappedRange must me a multiple of 8
    // size of getMappedRange must be a multiple of 4

    if (!this.buffer) {
      // size needs to be a multiple of 4
      const size = storage.byteLength + 3 & ~3;
      this.buffer = device.wgpu.createBuffer({
        size: size,
        usage: target | GPUBufferUsage.COPY_DST
      });
      DebugHelper.setLabel(this.buffer, target & GPUBufferUsage.VERTEX ? 'VertexBuffer' : target & GPUBufferUsage.INDEX ? 'IndexBuffer' : target & GPUBufferUsage.UNIFORM ? "UniformBuffer" : '');

      // mappedAtCreation path - this could be used when the data is provided

      // this.buffer = device.wgpu.createBuffer({
      //     size: size,
      //     usage: target,
      //     mappedAtCreation: true
      // });

      // const dest = new Uint8Array(this.buffer.getMappedRange());
      // const src = new Uint8Array(storage.buffer ? storage.buffer : storage);
      // dest.set(src);
      // this.buffer.unmap();
    }

    // src size needs to be a multiple of 4 as well
    const srcOffset = (_storage$byteOffset = storage.byteOffset) != null ? _storage$byteOffset : 0;
    const srcData = new Uint8Array((_storage$buffer = storage.buffer) != null ? _storage$buffer : storage, srcOffset, storage.byteLength);
    const data = new Uint8Array(this.buffer.size);
    data.set(srcData);

    // copy data to the gpu buffer
    Debug.trace(TRACEID_RENDER_QUEUE, `writeBuffer: ${this.buffer.label}`);
    wgpu.queue.writeBuffer(this.buffer, 0, data, 0, data.length);

    // TODO: handle usage types:
    // - BUFFER_STATIC, BUFFER_DYNAMIC, BUFFER_STREAM, BUFFER_GPUDYNAMIC
  }
}

export { WebgpuBuffer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWJ1ZmZlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL3dlYmdwdS93ZWJncHUtYnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRSQUNFSURfUkVOREVSX1FVRVVFIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgRGVidWcsIERlYnVnSGVscGVyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbi8qKlxuICogQSBXZWJHUFUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEJ1ZmZlci5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFdlYmdwdUJ1ZmZlciB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0dQVUJ1ZmZlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGJ1ZmZlciA9IG51bGw7XG5cbiAgICBkZXN0cm95KGRldmljZSkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBpbml0aWFsaXplZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5idWZmZXI7XG4gICAgfVxuXG4gICAgbG9zZUNvbnRleHQoKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4vd2ViZ3B1LWdyYXBoaWNzLWRldmljZS5qcycpLldlYmdwdUdyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBHcmFwaGljcyBkZXZpY2UuXG4gICAgICogQHBhcmFtIHsqfSB1c2FnZSAtXG4gICAgICogQHBhcmFtIHsqfSB0YXJnZXQgLVxuICAgICAqIEBwYXJhbSB7Kn0gc3RvcmFnZSAtXG4gICAgICovXG4gICAgdW5sb2NrKGRldmljZSwgdXNhZ2UsIHRhcmdldCwgc3RvcmFnZSkge1xuXG4gICAgICAgIGNvbnN0IHdncHUgPSBkZXZpY2Uud2dwdTtcblxuICAgICAgICAvLyBvZmZzZXQgb2YgZ2V0TWFwcGVkUmFuZ2UgbXVzdCBtZSBhIG11bHRpcGxlIG9mIDhcbiAgICAgICAgLy8gc2l6ZSBvZiBnZXRNYXBwZWRSYW5nZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFxuXG4gICAgICAgIGlmICghdGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIC8vIHNpemUgbmVlZHMgdG8gYmUgYSBtdWx0aXBsZSBvZiA0XG4gICAgICAgICAgICBjb25zdCBzaXplID0gKHN0b3JhZ2UuYnl0ZUxlbmd0aCArIDMpICYgfjM7XG5cbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gZGV2aWNlLndncHUuY3JlYXRlQnVmZmVyKHtcbiAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICAgIHVzYWdlOiB0YXJnZXQgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIERlYnVnSGVscGVyLnNldExhYmVsKHRoaXMuYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ICYgR1BVQnVmZmVyVXNhZ2UuVkVSVEVYID8gJ1ZlcnRleEJ1ZmZlcicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCAmIEdQVUJ1ZmZlclVzYWdlLklOREVYID8gJ0luZGV4QnVmZmVyJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCAmIEdQVUJ1ZmZlclVzYWdlLlVOSUZPUk0gPyBcIlVuaWZvcm1CdWZmZXJcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICAvLyBtYXBwZWRBdENyZWF0aW9uIHBhdGggLSB0aGlzIGNvdWxkIGJlIHVzZWQgd2hlbiB0aGUgZGF0YSBpcyBwcm92aWRlZFxuXG4gICAgICAgICAgICAvLyB0aGlzLmJ1ZmZlciA9IGRldmljZS53Z3B1LmNyZWF0ZUJ1ZmZlcih7XG4gICAgICAgICAgICAvLyAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgICAgIC8vICAgICB1c2FnZTogdGFyZ2V0LFxuICAgICAgICAgICAgLy8gICAgIG1hcHBlZEF0Q3JlYXRpb246IHRydWVcbiAgICAgICAgICAgIC8vIH0pO1xuXG4gICAgICAgICAgICAvLyBjb25zdCBkZXN0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKSk7XG4gICAgICAgICAgICAvLyBjb25zdCBzcmMgPSBuZXcgVWludDhBcnJheShzdG9yYWdlLmJ1ZmZlciA/IHN0b3JhZ2UuYnVmZmVyIDogc3RvcmFnZSk7XG4gICAgICAgICAgICAvLyBkZXN0LnNldChzcmMpO1xuICAgICAgICAgICAgLy8gdGhpcy5idWZmZXIudW5tYXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNyYyBzaXplIG5lZWRzIHRvIGJlIGEgbXVsdGlwbGUgb2YgNCBhcyB3ZWxsXG4gICAgICAgIGNvbnN0IHNyY09mZnNldCA9IHN0b3JhZ2UuYnl0ZU9mZnNldCA/PyAwO1xuICAgICAgICBjb25zdCBzcmNEYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3RvcmFnZS5idWZmZXIgPz8gc3RvcmFnZSwgc3JjT2Zmc2V0LCBzdG9yYWdlLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIuc2l6ZSk7XG4gICAgICAgIGRhdGEuc2V0KHNyY0RhdGEpO1xuXG4gICAgICAgIC8vIGNvcHkgZGF0YSB0byB0aGUgZ3B1IGJ1ZmZlclxuICAgICAgICBEZWJ1Zy50cmFjZShUUkFDRUlEX1JFTkRFUl9RVUVVRSwgYHdyaXRlQnVmZmVyOiAke3RoaXMuYnVmZmVyLmxhYmVsfWApO1xuICAgICAgICB3Z3B1LnF1ZXVlLndyaXRlQnVmZmVyKHRoaXMuYnVmZmVyLCAwLCBkYXRhLCAwLCBkYXRhLmxlbmd0aCk7XG5cbiAgICAgICAgLy8gVE9ETzogaGFuZGxlIHVzYWdlIHR5cGVzOlxuICAgICAgICAvLyAtIEJVRkZFUl9TVEFUSUMsIEJVRkZFUl9EWU5BTUlDLCBCVUZGRVJfU1RSRUFNLCBCVUZGRVJfR1BVRFlOQU1JQ1xuICAgIH1cbn1cblxuZXhwb3J0IHsgV2ViZ3B1QnVmZmVyIH07XG4iXSwibmFtZXMiOlsiV2ViZ3B1QnVmZmVyIiwiY29uc3RydWN0b3IiLCJidWZmZXIiLCJkZXN0cm95IiwiZGV2aWNlIiwiaW5pdGlhbGl6ZWQiLCJsb3NlQ29udGV4dCIsInVubG9jayIsInVzYWdlIiwidGFyZ2V0Iiwic3RvcmFnZSIsIl9zdG9yYWdlJGJ5dGVPZmZzZXQiLCJfc3RvcmFnZSRidWZmZXIiLCJ3Z3B1Iiwic2l6ZSIsImJ5dGVMZW5ndGgiLCJjcmVhdGVCdWZmZXIiLCJHUFVCdWZmZXJVc2FnZSIsIkNPUFlfRFNUIiwiRGVidWdIZWxwZXIiLCJzZXRMYWJlbCIsIlZFUlRFWCIsIklOREVYIiwiVU5JRk9STSIsInNyY09mZnNldCIsImJ5dGVPZmZzZXQiLCJzcmNEYXRhIiwiVWludDhBcnJheSIsImRhdGEiLCJzZXQiLCJEZWJ1ZyIsInRyYWNlIiwiVFJBQ0VJRF9SRU5ERVJfUVVFVUUiLCJsYWJlbCIsInF1ZXVlIiwid3JpdGVCdWZmZXIiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxZQUFZLENBQUM7RUFBQUMsV0FBQSxHQUFBO0FBQ2Y7QUFDSjtBQUNBO0FBQ0E7SUFISSxJQUlBQyxDQUFBQSxNQUFNLEdBQUcsSUFBSSxDQUFBO0FBQUEsR0FBQTtFQUViQyxPQUFPQSxDQUFDQyxNQUFNLEVBQUU7SUFDWixJQUFJLElBQUksQ0FBQ0YsTUFBTSxFQUFFO0FBQ2IsTUFBQSxJQUFJLENBQUNBLE1BQU0sQ0FBQ0Ms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
