import { DebugHelper } from '../../../core/debug.js';
import { DynamicBuffer } from '../dynamic-buffers.js';

/**
 * @ignore
 */
class WebgpuDynamicBuffer extends DynamicBuffer {
  constructor(device, size, isStaging) {
    super(device);
    /**
     * @type {GPUBuffer}
     * @private
     */
    this.buffer = null;
    /**
     * CPU access over the whole buffer.
     *
     * @type {ArrayBuffer}
     */
    this.mappedRange = null;
    this.buffer = device.wgpu.createBuffer({
      size: size,
      usage: isStaging ? GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC : GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
      mappedAtCreation: isStaging
    });
    if (isStaging) {
      this.onAvailable();
    }

    // staging buffers are not stored in vram, but add them for tracking purposes anyways
    device._vram.ub += size;
    DebugHelper.setLabel(this.buffer, `DynamicBuffer-${isStaging ? 'Staging' : 'Gpu'}`);
  }
  destroy(device) {
    device._vram.ub -= this.buffer.size;
    this.buffer.destroy();
    this.buffer = null;
  }

  /**
   * Called when the staging buffer is mapped for writing.
   */
  onAvailable() {
    // map the whole buffer
    this.mappedRange = this.buffer.getMappedRange();
  }
  alloc(offset, size) {
    return new Int32Array(this.mappedRange, offset, size / 4);
  }
}

export { WebgpuDynamicBuffer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWR5bmFtaWMtYnVmZmVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3Mvd2ViZ3B1L3dlYmdwdS1keW5hbWljLWJ1ZmZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWJ1Z0hlbHBlciB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2RlYnVnLmpzXCI7XG5pbXBvcnQgeyBEeW5hbWljQnVmZmVyIH0gZnJvbSBcIi4uL2R5bmFtaWMtYnVmZmVycy5qc1wiO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgV2ViZ3B1RHluYW1pY0J1ZmZlciBleHRlbmRzIER5bmFtaWNCdWZmZXIge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtHUFVCdWZmZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBidWZmZXIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ1BVIGFjY2VzcyBvdmVyIHRoZSB3aG9sZSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXlCdWZmZXJ9XG4gICAgICovXG4gICAgbWFwcGVkUmFuZ2UgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBzaXplLCBpc1N0YWdpbmcpIHtcbiAgICAgICAgc3VwZXIoZGV2aWNlKTtcblxuICAgICAgICB0aGlzLmJ1ZmZlciA9IGRldmljZS53Z3B1LmNyZWF0ZUJ1ZmZlcih7XG4gICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgdXNhZ2U6IGlzU3RhZ2luZyA/IEdQVUJ1ZmZlclVzYWdlLk1BUF9XUklURSB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfU1JDIDogR1BVQnVmZmVyVXNhZ2UuVU5JRk9STSB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuICAgICAgICAgICAgbWFwcGVkQXRDcmVhdGlvbjogaXNTdGFnaW5nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpc1N0YWdpbmcpIHtcbiAgICAgICAgICAgIHRoaXMub25BdmFpbGFibGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0YWdpbmcgYnVmZmVycyBhcmUgbm90IHN0b3JlZCBpbiB2cmFtLCBidXQgYWRkIHRoZW0gZm9yIHRyYWNraW5nIHB1cnBvc2VzIGFueXdheXNcbiAgICAgICAgZGV2aWNlLl92cmFtLnViICs9IHNpemU7XG5cbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TGFiZWwodGhpcy5idWZmZXIsIGBEeW5hbWljQnVmZmVyLSR7aXNTdGFnaW5nID8gJ1N0YWdpbmcnIDogJ0dwdSd9YCk7XG4gICAgfVxuXG4gICAgZGVzdHJveShkZXZpY2UpIHtcblxuICAgICAgICBkZXZpY2UuX3ZyYW0udWIgLT0gdGhpcy5idWZmZXIuc2l6ZTtcblxuICAgICAgICB0aGlzLmJ1ZmZlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgc3RhZ2luZyBidWZmZXIgaXMgbWFwcGVkIGZvciB3cml0aW5nLlxuICAgICAqL1xuICAgIG9uQXZhaWxhYmxlKCkge1xuICAgICAgICAvLyBtYXAgdGhlIHdob2xlIGJ1ZmZlclxuICAgICAgICB0aGlzLm1hcHBlZFJhbmdlID0gdGhpcy5idWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKTtcbiAgICB9XG5cbiAgICBhbGxvYyhvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMubWFwcGVkUmFuZ2UsIG9mZnNldCwgc2l6ZSAvIDQpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgV2ViZ3B1RHluYW1pY0J1ZmZlciB9O1xuIl0sIm5hbWVzIjpbIldlYmdwdUR5bmFtaWNCdWZmZXIiLCJEeW5hbWljQnVmZmVyIiwiY29uc3RydWN0b3IiLCJkZXZpY2UiLCJzaXplIiwiaXNTdGFnaW5nIiwiYnVmZmVyIiwibWFwcGVkUmFuZ2UiLCJ3Z3B1IiwiY3JlYXRlQnVmZmVyIiwidXNhZ2UiLCJHUFVCdWZmZXJVc2FnZSIsIk1BUF9XUklURSIsIkNPUFlfU1JDIiwiVU5JRk9STSIsIkNPUFlfRFNUIiwibWFwcGVkQXRDcmVhdGlvbiIsIm9uQXZhaWxhYmxlIiwiX3ZyYW0iLCJ1YiIsIkRlYnVnSGVscGVyIiwic2V0TGFiZWwiLCJkZXN0cm95IiwiZ2V0TWFwcGVkUmFuZ2UiLCJhbGxvYyIsIm9mZnNldCIsIkludDMyQXJyYXkiXSwibWFwcGluZ3MiOiI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLG1CQUFtQixTQUFTQyxhQUFhLENBQUM7QUFjNUNDLEVBQUFBLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUU7SUFDakMsS0FBSyxDQUFDRixNQUFNLENBQUMsQ0FBQTtBQWRqQjtBQUNKO0FBQ0E7QUFDQTtJQUhJLElBSUFHLENBQUFBLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFFYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBSkksSUFLQUMsQ0FBQUEsV0FBVyxHQUFHLElBQUksQ0FBQTtJQUtkLElBQUksQ0FBQ0QsTUFBTSxHQUFHSCxNQUFNLENBQUNLLElBQUksQ0FBQ0MsWUFBWSxDQUFDO0FBQ25DTCxNQUFBQSxJQUFJLEVBQUVBLElBQUk7QUFDVk0sTUFBQUEsS0FBSyxFQUFFTCxTQUFTLEdBQUdNLGNBQWMsQ0FBQ0MsU0FBUyxHQUFHRCxjQUFjLENBQUNFLFFBQVEsR0FBR0YsY0FBYyxDQUFDRyxPQUFPLEdBQUdILGNBQWMsQ0FBQ0ksUUFBUTtBQUN4SEMsTUFBQUEsZ0JBQWdCLEVBQUVYLFNBQUFBO0FBQ3RCLEtBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBQSxJQUFJQSxTQUFTLEVBQUU7TUFDWCxJQUFJLENBQUNZLFdBQVcsRUFBRSxDQUFBO0FBQ3RCLEtBQUE7O0FBRUE7QUFDQWQsSUFBQUEsTUFBTSxDQUFDZSxLQUFLLENBQUNDLEVBQUUsSUFBSWYsSUFBSSxDQUFBO0FBRXZCZ0IsSUFBQUEsV0FBVyxDQUFDQyxRQUFRLENBQUMsSUFBSSxDQUFDZixNQUFNLEVBQUcsQ0FBZ0JELGNBQUFBLEVBQUFBLFNBQVMsR0FBRyxTQUFTLEdBQUcsS0FBTSxFQUFDLENBQUMsQ0FBQTtBQUN2RixHQUFBO0VBRUFpQixPQUFPQSxDQUFDbkIsTUFBTSxFQUFFO0lBRVpBLE1BQU0sQ0FBQ2UsS0FBSyxDQUFDQyxFQUFFLElBQUksSUFBSSxDQUFDYixNQUFNLENBQUNGLElBQUksQ0FBQTtBQUVuQyxJQUFBLElBQUksQ0FBQ0UsTUFBTSxDQUFDZ0IsT0FBTyxFQUFFLENBQUE7SUFDckIsSUFBSSxDQUFDaEIsTUFBTSxHQUFHLElBQUksQ0FBQTtBQUN0QixHQUFBOztBQUVBO0FBQ0o7QUFDQTtBQUNJVyxFQUFBQSxXQUFXQSxHQUFHO0FBQ1Y7SUFDQSxJQUFJLENBQUNWLFdBQVcsR0FBRyxJQUFJLENBQUNELE1BQU0sQ0FBQ2lCLGNBQWMsRUFBRSxDQUFBO0FBQ25ELEdBQUE7QUFFQUMsRUFBQUEsS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFckIsSUFBSSxFQUFFO0FBQ2hCLElBQUEsT0FBTyxJQUFJc0IsVUFBVSxDQUFDLElBQUksQ0FBQ25CLFdBQVcsRUFBRWtCLE1BQU0sRUFBRXJCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUM3RCxHQUFBO0FBQ0o7Ozs7In0=
