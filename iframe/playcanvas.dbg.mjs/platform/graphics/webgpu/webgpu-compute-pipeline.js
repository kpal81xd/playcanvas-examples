import { DebugHelper, Debug } from '../../../core/debug.js';
import { TRACEID_COMPUTEPIPELINE_ALLOC } from '../../../core/constants.js';
import { WebgpuDebug } from './webgpu-debug.js';
import { WebgpuPipeline } from './webgpu-pipeline.js';

let _pipelineId = 0;

/**
 * @ignore
 */
class WebgpuComputePipeline extends WebgpuPipeline {
  /** @private */
  get(shader, bindGroupFormat) {
    // pipeline layout
    const pipelineLayout = this.getPipelineLayout([bindGroupFormat.impl]);

    // TODO: this could be cached

    const pipeline = this.create(shader, pipelineLayout);
    return pipeline;
  }
  create(shader, pipelineLayout) {
    const wgpu = this.device.wgpu;

    /** @type {import('./webgpu-shader.js').WebgpuShader} */
    const webgpuShader = shader.impl;

    /** @type {GPUComputePipelineDescriptor} */
    const descr = {
      compute: {
        module: webgpuShader.getComputeShaderModule(),
        entryPoint: webgpuShader.computeEntryPoint
      },
      // uniform / texture binding layout
      layout: pipelineLayout
    };
    WebgpuDebug.validate(this.device);
    _pipelineId++;
    DebugHelper.setLabel(descr, `ComputePipelineDescr-${_pipelineId}`);
    const pipeline = wgpu.createComputePipeline(descr);
    DebugHelper.setLabel(pipeline, `ComputePipeline-${_pipelineId}`);
    Debug.trace(TRACEID_COMPUTEPIPELINE_ALLOC, `Alloc: Id ${_pipelineId}`, descr);
    WebgpuDebug.end(this.device, {
      computePipeline: this,
      descr,
      shader
    });
    return pipeline;
  }
}

export { WebgpuComputePipeline };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWNvbXB1dGUtcGlwZWxpbmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy93ZWJncHUvd2ViZ3B1LWNvbXB1dGUtcGlwZWxpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcsIERlYnVnSGVscGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZGVidWcuanNcIjtcbmltcG9ydCB7IFRSQUNFSURfQ09NUFVURVBJUEVMSU5FX0FMTE9DIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBXZWJncHVEZWJ1ZyB9IGZyb20gXCIuL3dlYmdwdS1kZWJ1Zy5qc1wiO1xuaW1wb3J0IHsgV2ViZ3B1UGlwZWxpbmUgfSBmcm9tIFwiLi93ZWJncHUtcGlwZWxpbmUuanNcIjtcblxubGV0IF9waXBlbGluZUlkID0gMDtcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFdlYmdwdUNvbXB1dGVQaXBlbGluZSBleHRlbmRzIFdlYmdwdVBpcGVsaW5lIHtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBnZXQoc2hhZGVyLCBiaW5kR3JvdXBGb3JtYXQpIHtcblxuICAgICAgICAvLyBwaXBlbGluZSBsYXlvdXRcbiAgICAgICAgY29uc3QgcGlwZWxpbmVMYXlvdXQgPSB0aGlzLmdldFBpcGVsaW5lTGF5b3V0KFtiaW5kR3JvdXBGb3JtYXQuaW1wbF0pO1xuXG4gICAgICAgIC8vIFRPRE86IHRoaXMgY291bGQgYmUgY2FjaGVkXG5cbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSB0aGlzLmNyZWF0ZShzaGFkZXIsIHBpcGVsaW5lTGF5b3V0KTtcbiAgICAgICAgcmV0dXJuIHBpcGVsaW5lO1xuICAgIH1cblxuICAgIGNyZWF0ZShzaGFkZXIsIHBpcGVsaW5lTGF5b3V0KSB7XG5cbiAgICAgICAgY29uc3Qgd2dwdSA9IHRoaXMuZGV2aWNlLndncHU7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vd2ViZ3B1LXNoYWRlci5qcycpLldlYmdwdVNoYWRlcn0gKi9cbiAgICAgICAgY29uc3Qgd2ViZ3B1U2hhZGVyID0gc2hhZGVyLmltcGw7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtHUFVDb21wdXRlUGlwZWxpbmVEZXNjcmlwdG9yfSAqL1xuICAgICAgICBjb25zdCBkZXNjciA9IHtcbiAgICAgICAgICAgIGNvbXB1dGU6IHtcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHdlYmdwdVNoYWRlci5nZXRDb21wdXRlU2hhZGVyTW9kdWxlKCksXG4gICAgICAgICAgICAgICAgZW50cnlQb2ludDogd2ViZ3B1U2hhZGVyLmNvbXB1dGVFbnRyeVBvaW50XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyB1bmlmb3JtIC8gdGV4dHVyZSBiaW5kaW5nIGxheW91dFxuICAgICAgICAgICAgbGF5b3V0OiBwaXBlbGluZUxheW91dFxuICAgICAgICB9O1xuXG4gICAgICAgIFdlYmdwdURlYnVnLnZhbGlkYXRlKHRoaXMuZGV2aWNlKTtcblxuICAgICAgICBfcGlwZWxpbmVJZCsrO1xuICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChkZXNjciwgYENvbXB1dGVQaXBlbGluZURlc2NyLSR7X3BpcGVsaW5lSWR9YCk7XG5cbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSB3Z3B1LmNyZWF0ZUNvbXB1dGVQaXBlbGluZShkZXNjcik7XG5cbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TGFiZWwocGlwZWxpbmUsIGBDb21wdXRlUGlwZWxpbmUtJHtfcGlwZWxpbmVJZH1gKTtcbiAgICAgICAgRGVidWcudHJhY2UoVFJBQ0VJRF9DT01QVVRFUElQRUxJTkVfQUxMT0MsIGBBbGxvYzogSWQgJHtfcGlwZWxpbmVJZH1gLCBkZXNjcik7XG5cbiAgICAgICAgV2ViZ3B1RGVidWcuZW5kKHRoaXMuZGV2aWNlLCB7XG4gICAgICAgICAgICBjb21wdXRlUGlwZWxpbmU6IHRoaXMsXG4gICAgICAgICAgICBkZXNjcixcbiAgICAgICAgICAgIHNoYWRlclxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcGlwZWxpbmU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBXZWJncHVDb21wdXRlUGlwZWxpbmUgfTtcbiJdLCJuYW1lcyI6WyJfcGlwZWxpbmVJZCIsIldlYmdwdUNvbXB1dGVQaXBlbGluZSIsIldlYmdwdVBpcGVsaW5lIiwiZ2V0Iiwic2hhZGVyIiwiYmluZEdyb3VwRm9ybWF0IiwicGlwZWxpbmVMYXlvdXQiLCJnZXRQaXBlbGluZUxheW91dCIsImltcGwiLCJwaXBlbGluZSIsImNyZWF0ZSIsIndncHUiLCJkZXZpY2UiLCJ3ZWJncHVTaGFkZXIiLCJkZXNjciIsImNvbXB1dGUiLCJtb2R1bGUiLCJnZXRDb21wdXRlU2hhZGVyTW9kdWxlIiwiZW50cnlQb2ludCIsImNvbXB1dGVFbnRyeVBvaW50IiwibGF5b3V0IiwiV2ViZ3B1RGVidWciLCJ2YWxpZGF0ZSIsIkRlYnVnSGVscGVyIiwic2V0TGFiZWwiLCJjcmVhdGVDb21wdXRlUGlwZWxpbmUiLCJEZWJ1ZyIsInRyYWNlIiwiVFJBQ0VJRF9DT01QVVRFUElQRUxJTkVfQUxMT0MiLCJlbmQiLCJjb21wdXRlUGlwZWxpbmUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsSUFBSUEsV0FBVyxHQUFHLENBQUMsQ0FBQTs7QUFFbkI7QUFDQTtBQUNBO0FBQ0EsTUFBTUMscUJBQXFCLFNBQVNDLGNBQWMsQ0FBQztBQUMvQztBQUNBQyxFQUFBQSxHQUFHQSxDQUFDQyxNQUFNLEVBQUVDLGVBQWUsRUFBRTtBQUV6QjtJQUNBLE1BQU1DLGNBQWMsR0FBRyxJQUFJLENBQUNDLGlCQUFpQixDQUFDLENBQUNGLGVBQWUsQ0FBQ0csSUFBSSxDQUFDLENBQUMsQ0FBQTs7QUFFckU7O0lBRUEsTUFBTUMsUUFBUSxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDTixNQUFNLEVBQUVFLGNBQWMsQ0FBQyxDQUFBO0FBQ3BELElBQUEsT0FBT0csUUFBUSxDQUFBO0FBQ25CLEdBQUE7QUFFQUMsRUFBQUEsTUFBTUEsQ0FBQ04sTUFBTSxFQUFFRSxjQUFjLEVBQUU7QUFFM0IsSUFBQSxNQUFNSyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUNELElBQUksQ0FBQTs7QUFFN0I7QUFDQSxJQUFBLE1BQU1FLFlBQVksR0FBR1QsTUFBTSxDQUFDSSxJQUFJLENBQUE7O0FBRWhDO0FBQ0EsSUFBQSxNQUFNTSxLQUFLLEdBQUc7QUFDVkMsTUFBQUEsT0FBTyxFQUFFO0FBQ0xDLFFBQUFBLE1BQU0sRUFBRUgsWUFBWSxDQUFDSSxzQkFBc0IsRUFBRTtRQUM3Q0MsVUFBVSxFQUFFTCxZQUFZLENBQUNNLGlCQUFBQTtPQUM1QjtBQUVEO0FBQ0FDLE1BQUFBLE1BQU0sRUFBRWQsY0FBQUE7S0FDWCxDQUFBO0FBRURlLElBQUFBLFdBQVcsQ0FBQ0MsUUFBUSxDQUFDLElBQUksQ0FBQ1YsTUFBTSxDQUFDLENBQUE7QUFFakNaLElBQUFBLFdBQVcsRUFBRSxDQUFBO0lBQ2J1QixXQUFXLENBQUNDLFFBQVEsQ0FBQ1YsS0FBSyxFQUFHLENBQXVCZCxxQkFBQUEsRUFBQUEsV0FBWSxFQUFDLENBQUMsQ0FBQTtBQUVsRSxJQUFBLE1BQU1TLFFBQVEsR0FBR0UsSUFBSSxDQUFDYyxxQkFBcUIsQ0FBQ1gsS0FBSyxDQUFDLENBQUE7SUFFbERTLFdBQVcsQ0FBQ0MsUUFBUSxDQUFDZixRQUFRLEVBQUcsQ0FBa0JULGdCQUFBQSxFQUFBQSxXQUFZLEVBQUMsQ0FBQyxDQUFBO0lBQ2hFMEIsS0FBSyxDQUFDQyxLQUFLLENBQUNDLDZCQUE2QixFQUFHLGFBQVk1QixXQUFZLENBQUEsQ0FBQyxFQUFFYyxLQUFLLENBQUMsQ0FBQTtBQUU3RU8sSUFBQUEsV0FBVyxDQUFDUSxHQUFHLENBQUMsSUFBSSxDQUFDakIsTUFBTSxFQUFFO0FBQ3pCa0IsTUFBQUEsZUFBZSxFQUFFLElBQUk7TUFDckJoQixLQUFLO0FBQ0xWLE1BQUFBLE1BQUFBO0FBQ0osS0FBQyxDQUFDLENBQUE7QUFFRixJQUFBLE9BQU9LLFFBQVEsQ0FBQTtBQUNuQixHQUFBO0FBQ0o7Ozs7In0=
