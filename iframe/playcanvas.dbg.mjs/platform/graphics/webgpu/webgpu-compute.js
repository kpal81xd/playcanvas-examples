import { Debug, DebugHelper } from '../../../core/debug.js';
import { BindGroup } from '../bind-group.js';

/**
 * A WebGPU implementation of the Compute.
 *
 * @ignore
 */
class WebgpuCompute {
  constructor(compute) {
    this.compute = compute;
    const {
      device,
      shader
    } = compute;

    // create bind group
    const {
      computeBindGroupFormat
    } = shader.impl;
    Debug.assert(computeBindGroupFormat, 'Compute shader does not have computeBindGroupFormat specified', shader);
    this.bindGroup = new BindGroup(device, computeBindGroupFormat);
    DebugHelper.setName(this.bindGroup, `Compute-BindGroup_${this.bindGroup.id}`);

    // pipeline
    this.pipeline = device.computePipeline.get(shader, computeBindGroupFormat);
  }
  dispatch(x, y, z) {
    // TODO: currently each dispatch is a separate compute pass, which is not optimal, and we should
    // batch multiple dispatches into a single compute pass
    const device = this.compute.device;
    device.startComputePass();

    // bind group data
    const {
      bindGroup
    } = this;
    bindGroup.update();
    device.setBindGroup(0, bindGroup);

    // dispatch
    const passEncoder = device.passEncoder;
    passEncoder.setPipeline(this.pipeline);
    passEncoder.dispatchWorkgroups(x, y, z);
    device.endComputePass();
  }
}

export { WebgpuCompute };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWNvbXB1dGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy93ZWJncHUvd2ViZ3B1LWNvbXB1dGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcsIERlYnVnSGVscGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZGVidWcuanNcIjtcbmltcG9ydCB7IEJpbmRHcm91cCB9IGZyb20gXCIuLi9iaW5kLWdyb3VwLmpzXCI7XG5cbi8qKlxuICogQSBXZWJHUFUgaW1wbGVtZW50YXRpb24gb2YgdGhlIENvbXB1dGUuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBXZWJncHVDb21wdXRlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb21wdXRlKSB7XG4gICAgICAgIHRoaXMuY29tcHV0ZSA9IGNvbXB1dGU7XG5cbiAgICAgICAgY29uc3QgeyBkZXZpY2UsIHNoYWRlciB9ID0gY29tcHV0ZTtcblxuICAgICAgICAvLyBjcmVhdGUgYmluZCBncm91cFxuICAgICAgICBjb25zdCB7IGNvbXB1dGVCaW5kR3JvdXBGb3JtYXQgfSA9IHNoYWRlci5pbXBsO1xuICAgICAgICBEZWJ1Zy5hc3NlcnQoY29tcHV0ZUJpbmRHcm91cEZvcm1hdCwgJ0NvbXB1dGUgc2hhZGVyIGRvZXMgbm90IGhhdmUgY29tcHV0ZUJpbmRHcm91cEZvcm1hdCBzcGVjaWZpZWQnLCBzaGFkZXIpO1xuICAgICAgICB0aGlzLmJpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoZGV2aWNlLCBjb21wdXRlQmluZEdyb3VwRm9ybWF0KTtcbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TmFtZSh0aGlzLmJpbmRHcm91cCwgYENvbXB1dGUtQmluZEdyb3VwXyR7dGhpcy5iaW5kR3JvdXAuaWR9YCk7XG5cbiAgICAgICAgLy8gcGlwZWxpbmVcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IGRldmljZS5jb21wdXRlUGlwZWxpbmUuZ2V0KHNoYWRlciwgY29tcHV0ZUJpbmRHcm91cEZvcm1hdCk7XG4gICAgfVxuXG4gICAgZGlzcGF0Y2goeCwgeSwgeikge1xuXG4gICAgICAgIC8vIFRPRE86IGN1cnJlbnRseSBlYWNoIGRpc3BhdGNoIGlzIGEgc2VwYXJhdGUgY29tcHV0ZSBwYXNzLCB3aGljaCBpcyBub3Qgb3B0aW1hbCwgYW5kIHdlIHNob3VsZFxuICAgICAgICAvLyBiYXRjaCBtdWx0aXBsZSBkaXNwYXRjaGVzIGludG8gYSBzaW5nbGUgY29tcHV0ZSBwYXNzXG4gICAgICAgIGNvbnN0IGRldmljZSA9IHRoaXMuY29tcHV0ZS5kZXZpY2U7XG4gICAgICAgIGRldmljZS5zdGFydENvbXB1dGVQYXNzKCk7XG5cbiAgICAgICAgLy8gYmluZCBncm91cCBkYXRhXG4gICAgICAgIGNvbnN0IHsgYmluZEdyb3VwIH0gPSB0aGlzO1xuICAgICAgICBiaW5kR3JvdXAudXBkYXRlKCk7XG4gICAgICAgIGRldmljZS5zZXRCaW5kR3JvdXAoMCwgYmluZEdyb3VwKTtcblxuICAgICAgICAvLyBkaXNwYXRjaFxuICAgICAgICBjb25zdCBwYXNzRW5jb2RlciA9IGRldmljZS5wYXNzRW5jb2RlcjtcbiAgICAgICAgcGFzc0VuY29kZXIuc2V0UGlwZWxpbmUodGhpcy5waXBlbGluZSk7XG4gICAgICAgIHBhc3NFbmNvZGVyLmRpc3BhdGNoV29ya2dyb3Vwcyh4LCB5LCB6KTtcblxuICAgICAgICBkZXZpY2UuZW5kQ29tcHV0ZVBhc3MoKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFdlYmdwdUNvbXB1dGUgfTtcbiJdLCJuYW1lcyI6WyJXZWJncHVDb21wdXRlIiwiY29uc3RydWN0b3IiLCJjb21wdXRlIiwiZGV2aWNlIiwic2hhZGVyIiwiY29tcHV0ZUJpbmRHcm91cEZvcm1hdCIsImltcGwiLCJEZWJ1ZyIsImFzc2VydCIsImJpbmRHcm91cCIsIkJpbmRHcm91cCIsIkRlYnVnSGVscGVyIiwic2V0TmFtZSIsImlkIiwicGlwZWxpbmUiLCJjb21wdXRlUGlwZWxpbmUiLCJnZXQiLCJkaXNwYXRjaCIsIngiLCJ5IiwieiIsInN0YXJ0Q29tcHV0ZVBhc3MiLCJ1cGRhdGUiLCJzZXRCaW5kR3JvdXAiLCJwYXNzRW5jb2RlciIsInNldFBpcGVsaW5lIiwiZGlzcGF0Y2hXb3JrZ3JvdXBzIiwiZW5kQ29tcHV0ZVBhc3MiXSwibWFwcGluZ3MiOiI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxhQUFhLENBQUM7RUFDaEJDLFdBQVdBLENBQUNDLE9BQU8sRUFBRTtJQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0EsT0FBTyxDQUFBO0lBRXRCLE1BQU07TUFBRUMsTUFBTTtBQUFFQyxNQUFBQSxNQUFBQTtBQUFPLEtBQUMsR0FBR0YsT0FBTyxDQUFBOztBQUVsQztJQUNBLE1BQU07QUFBRUcsTUFBQUEsc0JBQUFBO0tBQXdCLEdBQUdELE1BQU0sQ0FBQ0UsSUFBSSxDQUFBO0lBQzlDQyxLQUFLLENBQUNDLE1BQU0sQ0FBQ0gsc0JBQXNCLEVBQUUsK0RBQStELEVBQUVELE1BQU0sQ0FBQyxDQUFBO0lBQzdHLElBQUksQ0FBQ0ssU0FBUyxHQUFHLElBQUlDLFNBQVMsQ0FBQ1AsTUFBTSxFQUFFRSxzQkFBc0IsQ0FBQyxDQUFBO0FBQzlETSxJQUFBQSxXQUFXLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUNILFNBQVMsRUFBRyxDQUFvQixrQkFBQSxFQUFBLElBQUksQ0FBQ0EsU0FBUyxDQUFDSSxFQUFHLEVBQUMsQ0FBQyxDQUFBOztBQUU3RTtBQUNBLElBQUEsSUFBSSxDQUFDQyxRQUFRLEdBQUdYLE1BQU0sQ0FBQ1ksZUFBZSxDQUFDQyxHQUFHLENBQUNaLE1BQU0sRUFBRUMsc0JBQXNCLENBQUMsQ0FBQTtBQUM5RSxHQUFBO0FBRUFZLEVBQUFBLFFBQVFBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7QUFFZDtBQUNBO0FBQ0EsSUFBQSxNQUFNakIsTUFBTSxHQUFHLElBQUksQ0FBQ0QsT0FBTyxDQUFDQyxNQUFNLENBQUE7SUFDbENBLE1BQU0sQ0FBQ2tCLGdCQUFnQixFQUFFLENBQUE7O0FBRXpCO0lBQ0EsTUFBTTtBQUFFWixNQUFBQSxTQUFBQTtBQUFVLEtBQUMsR0FBRyxJQUFJLENBQUE7SUFDMUJBLFNBQVMsQ0FBQ2EsTUFBTSxFQUFFLENBQUE7QUFDbEJuQixJQUFBQSxNQUFNLENBQUNvQixZQUFZLENBQUMsQ0FBQyxFQUFFZCxTQUFTLENBQUMsQ0FBQTs7QUFFakM7QUFDQSxJQUFBLE1BQU1lLFdBQVcsR0FBR3JCLE1BQU0sQ0FBQ3FCLFdBQVcsQ0FBQTtBQUN0Q0EsSUFBQUEsV0FBVyxDQUFDQyxXQUFXLENBQUMsSUFBSSxDQUFDWCxRQUFRLENBQUMsQ0FBQTtJQUN0Q1UsV0FBVyxDQUFDRSxrQkFBa0IsQ0FBQ1IsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsQ0FBQyxDQUFBO0lBRXZDakIsTUFBTSxDQUFDd0IsY0FBYyxFQUFFLENBQUE7QUFDM0IsR0FBQTtBQUNKOzs7OyJ9
