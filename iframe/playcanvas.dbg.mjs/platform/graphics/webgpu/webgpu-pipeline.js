import { TRACEID_PIPELINELAYOUT_ALLOC } from '../../../core/constants.js';
import { DebugHelper, Debug } from '../../../core/debug.js';

let _layoutId = 0;

/**
 * Base class for render and compute pipelines.
 *
 * @ignore
 */
class WebgpuPipeline {
  constructor(device) {
    /** @type {import('./webgpu-graphics-device.js').WebgpuGraphicsDevice} */
    this.device = device;
  }

  // TODO: this could be cached using bindGroupKey

  /**
   * @param {import('../bind-group-format.js').BindGroupFormat[]} bindGroupFormats - An array
   * of bind group formats.
   * @returns {any} Returns the pipeline layout.
   */
  getPipelineLayout(bindGroupFormats) {
    const bindGroupLayouts = [];
    bindGroupFormats.forEach(format => {
      bindGroupLayouts.push(format.bindGroupLayout);
    });
    const descr = {
      bindGroupLayouts: bindGroupLayouts
    };
    _layoutId++;
    DebugHelper.setLabel(descr, `PipelineLayoutDescr-${_layoutId}`);

    /** @type {GPUPipelineLayout} */
    const pipelineLayout = this.device.wgpu.createPipelineLayout(descr);
    DebugHelper.setLabel(pipelineLayout, `PipelineLayout-${_layoutId}`);
    Debug.trace(TRACEID_PIPELINELAYOUT_ALLOC, `Alloc: Id ${_layoutId}`, {
      descr,
      bindGroupFormats
    });
    return pipelineLayout;
  }
}

export { WebgpuPipeline };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LXBpcGVsaW5lLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3Mvd2ViZ3B1L3dlYmdwdS1waXBlbGluZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUUkFDRUlEX1BJUEVMSU5FTEFZT1VUX0FMTE9DIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgRGVidWcsIERlYnVnSGVscGVyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbmxldCBfbGF5b3V0SWQgPSAwO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHJlbmRlciBhbmQgY29tcHV0ZSBwaXBlbGluZXMuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBXZWJncHVQaXBlbGluZSB7XG4gICAgY29uc3RydWN0b3IoZGV2aWNlKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3dlYmdwdS1ncmFwaGljcy1kZXZpY2UuanMnKS5XZWJncHVHcmFwaGljc0RldmljZX0gKi9cbiAgICAgICAgdGhpcy5kZXZpY2UgPSBkZXZpY2U7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogdGhpcyBjb3VsZCBiZSBjYWNoZWQgdXNpbmcgYmluZEdyb3VwS2V5XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYmluZC1ncm91cC1mb3JtYXQuanMnKS5CaW5kR3JvdXBGb3JtYXRbXX0gYmluZEdyb3VwRm9ybWF0cyAtIEFuIGFycmF5XG4gICAgICogb2YgYmluZCBncm91cCBmb3JtYXRzLlxuICAgICAqIEByZXR1cm5zIHthbnl9IFJldHVybnMgdGhlIHBpcGVsaW5lIGxheW91dC5cbiAgICAgKi9cbiAgICBnZXRQaXBlbGluZUxheW91dChiaW5kR3JvdXBGb3JtYXRzKSB7XG5cbiAgICAgICAgY29uc3QgYmluZEdyb3VwTGF5b3V0cyA9IFtdO1xuICAgICAgICBiaW5kR3JvdXBGb3JtYXRzLmZvckVhY2goKGZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgYmluZEdyb3VwTGF5b3V0cy5wdXNoKGZvcm1hdC5iaW5kR3JvdXBMYXlvdXQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBkZXNjciA9IHtcbiAgICAgICAgICAgIGJpbmRHcm91cExheW91dHM6IGJpbmRHcm91cExheW91dHNcbiAgICAgICAgfTtcblxuICAgICAgICBfbGF5b3V0SWQrKztcbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TGFiZWwoZGVzY3IsIGBQaXBlbGluZUxheW91dERlc2NyLSR7X2xheW91dElkfWApO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7R1BVUGlwZWxpbmVMYXlvdXR9ICovXG4gICAgICAgIGNvbnN0IHBpcGVsaW5lTGF5b3V0ID0gdGhpcy5kZXZpY2Uud2dwdS5jcmVhdGVQaXBlbGluZUxheW91dChkZXNjcik7XG4gICAgICAgIERlYnVnSGVscGVyLnNldExhYmVsKHBpcGVsaW5lTGF5b3V0LCBgUGlwZWxpbmVMYXlvdXQtJHtfbGF5b3V0SWR9YCk7XG4gICAgICAgIERlYnVnLnRyYWNlKFRSQUNFSURfUElQRUxJTkVMQVlPVVRfQUxMT0MsIGBBbGxvYzogSWQgJHtfbGF5b3V0SWR9YCwge1xuICAgICAgICAgICAgZGVzY3IsXG4gICAgICAgICAgICBiaW5kR3JvdXBGb3JtYXRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwaXBlbGluZUxheW91dDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFdlYmdwdVBpcGVsaW5lIH07XG4iXSwibmFtZXMiOlsiX2xheW91dElkIiwiV2ViZ3B1UGlwZWxpbmUiLCJjb25zdHJ1Y3RvciIsImRldmljZSIsImdldFBpcGVsaW5lTGF5b3V0IiwiYmluZEdyb3VwRm9ybWF0cyIsImJpbmRHcm91cExheW91dHMiLCJmb3JFYWNoIiwiZm9ybWF0IiwicHVzaCIsImJpbmRHcm91cExheW91dCIsImRlc2NyIiwiRGVidWdIZWxwZXIiLCJzZXRMYWJlbCIsInBpcGVsaW5lTGF5b3V0Iiwid2dwdSIsImNyZWF0ZVBpcGVsaW5lTGF5b3V0IiwiRGVidWciLCJ0cmFjZSIsIlRSQUNFSURfUElQRUxJTkVMQVlPVVRfQUxMT0MiXSwibWFwcGluZ3MiOiI7OztBQUdBLElBQUlBLFNBQVMsR0FBRyxDQUFDLENBQUE7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxjQUFjLENBQUM7RUFDakJDLFdBQVdBLENBQUNDLE1BQU0sRUFBRTtBQUNoQjtJQUNBLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNLENBQUE7QUFDeEIsR0FBQTs7QUFFQTs7QUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLGlCQUFpQkEsQ0FBQ0MsZ0JBQWdCLEVBQUU7SUFFaEMsTUFBTUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO0FBQzNCRCxJQUFBQSxnQkFBZ0IsQ0FBQ0UsT0FBTyxDQUFFQyxNQUFNLElBQUs7QUFDakNGLE1BQUFBLGdCQUFnQixDQUFDRyxJQUFJLENBQUNELE1BQU0sQ0FBQ0UsZUFBZSxDQUFDLENBQUE7QUFDakQsS0FBQyxDQUFDLENBQUE7QUFFRixJQUFBLE1BQU1DLEtBQUssR0FBRztBQUNWTCxNQUFBQSxnQkFBZ0IsRUFBRUEsZ0JBQUFBO0tBQ3JCLENBQUE7QUFFRE4sSUFBQUEsU0FBUyxFQUFFLENBQUE7SUFDWFksV0FBVyxDQUFDQyxRQUFRLENBQUNGLEtBQUssRUFBRyxDQUFzQlgsb0JBQUFBLEVBQUFBLFNBQVUsRUFBQyxDQUFDLENBQUE7O0FBRS9EO0lBQ0EsTUFBTWMsY0FBYyxHQUFHLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUNDLG9CQUFvQixDQUFDTCxLQUFLLENBQUMsQ0FBQTtJQUNuRUMsV0FBVyxDQUFDQyxRQUFRLENBQUNDLGNBQWMsRUFBRyxDQUFpQmQsZUFBQUEsRUFBQUEsU0FBVSxFQUFDLENBQUMsQ0FBQTtJQUNuRWlCLEtBQUssQ0FBQ0MsS0FBSyxDQUFDQyw0QkFBNEIsRUFBRyxDQUFZbkIsVUFBQUEsRUFBQUEsU0FBVSxFQUFDLEVBQUU7TUFDaEVXLEtBQUs7QUFDTE4sTUFBQUEsZ0JBQUFBO0FBQ0osS0FBQyxDQUFDLENBQUE7QUFFRixJQUFBLE9BQU9TLGNBQWMsQ0FBQTtBQUN6QixHQUFBO0FBQ0o7Ozs7In0=
