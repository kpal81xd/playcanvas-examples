var gles3PS = /* glsl */`

#ifndef outType_0
#define outType_0 vec4
#endif

layout(location = 0) out highp outType_0 pc_fragColor;

#ifndef REMOVE_COLOR_ATTACHMENT_1
#if COLOR_ATTACHMENT_1
layout(location = 1) out highp outType_1 pc_fragColor1;
#endif
#endif

#ifndef REMOVE_COLOR_ATTACHMENT_2
#if COLOR_ATTACHMENT_2
layout(location = 2) out highp outType_2 pc_fragColor2;
#endif
#endif

#ifndef REMOVE_COLOR_ATTACHMENT_3
#if COLOR_ATTACHMENT_3
layout(location = 3) out highp outType_3 pc_fragColor3;
#endif
#endif

#ifndef REMOVE_COLOR_ATTACHMENT_4
#if COLOR_ATTACHMENT_4
layout(location = 4) out highp outType_4 pc_fragColor4;
#endif
#endif

#ifndef REMOVE_COLOR_ATTACHMENT_5
#if COLOR_ATTACHMENT_5
layout(location = 5) out highp outType_5 pc_fragColor5;
#endif
#endif

#ifndef REMOVE_COLOR_ATTACHMENT_6
#if COLOR_ATTACHMENT_6
layout(location = 6) out highp outType_6 pc_fragColor6;
#endif
#endif

#ifndef REMOVE_COLOR_ATTACHMENT_7
#if COLOR_ATTACHMENT_7
layout(location = 7) out highp outType_7 pc_fragColor7;
#endif
#endif

#define gl_FragColor pc_fragColor

#define pcFragColor0 pc_fragColor
#define pcFragColor1 pc_fragColor1
#define pcFragColor2 pc_fragColor2
#define pcFragColor3 pc_fragColor3
#define pcFragColor4 pc_fragColor4
#define pcFragColor5 pc_fragColor5
#define pcFragColor6 pc_fragColor6
#define pcFragColor7 pc_fragColor7

#define varying in

#define texture2D texture
#define texture2DBias texture
#define textureCube texture
#define texture2DProj textureProj
#define texture2DLodEXT textureLod
#define texture2DProjLodEXT textureProjLod
#define textureCubeLodEXT textureLod
#define texture2DGradEXT textureGrad
#define texture2DProjGradEXT textureProjGrad
#define textureCubeGradEXT textureGrad
#define utexture2D texture
#define itexture2D texture

// sample shadows using textureGrad to remove derivatives in the dynamic loops (which are used by
// clustered lighting) - as DirectX shader compiler tries to unroll the loops and takes long time
// to compile the shader. Using textureLod would be even better, but WebGl does not translate it to
// lod instruction for DirectX correctly and uses SampleCmp instead of SampleCmpLevelZero or similar.
#define textureShadow(res, uv) textureGrad(res, uv, vec2(1, 1), vec2(1, 1))

// pass / accept shadow map or texture as a function parameter, on webgl this is simply passed as is
// but this is needed for WebGPU
#define SHADOWMAP_PASS(name) name
#define SHADOWMAP_ACCEPT(name) sampler2DShadow name
#define TEXTURE_PASS(name) name
#define TEXTURE_ACCEPT(name) sampler2D name

#define GL2
#define SUPPORTS_TEXLOD
#define SUPPORTS_MRT
`;

export { gles3PS as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xlczMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy9zaGFkZXItY2h1bmtzL2ZyYWcvZ2xlczMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcblxuI2lmbmRlZiBvdXRUeXBlXzBcbiNkZWZpbmUgb3V0VHlwZV8wIHZlYzRcbiNlbmRpZlxuXG5sYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgb3V0VHlwZV8wIHBjX2ZyYWdDb2xvcjtcblxuI2lmbmRlZiBSRU1PVkVfQ09MT1JfQVRUQUNITUVOVF8xXG4jaWYgQ09MT1JfQVRUQUNITUVOVF8xXG5sYXlvdXQobG9jYXRpb24gPSAxKSBvdXQgaGlnaHAgb3V0VHlwZV8xIHBjX2ZyYWdDb2xvcjE7XG4jZW5kaWZcbiNlbmRpZlxuXG4jaWZuZGVmIFJFTU9WRV9DT0xPUl9BVFRBQ0hNRU5UXzJcbiNpZiBDT0xPUl9BVFRBQ0hNRU5UXzJcbmxheW91dChsb2NhdGlvbiA9IDIpIG91dCBoaWdocCBvdXRUeXBlXzIgcGNfZnJhZ0NvbG9yMjtcbiNlbmRpZlxuI2VuZGlmXG5cbiNpZm5kZWYgUkVNT1ZFX0NPTE9SX0FUVEFDSE1FTlRfM1xuI2lmIENPTE9SX0FUVEFDSE1FTlRfM1xubGF5b3V0KGxvY2F0aW9uID0gMykgb3V0IGhpZ2hwIG91dFR5cGVfMyBwY19mcmFnQ29sb3IzO1xuI2VuZGlmXG4jZW5kaWZcblxuI2lmbmRlZiBSRU1PVkVfQ09MT1JfQVRUQUNITUVOVF80XG4jaWYgQ09MT1JfQVRUQUNITUVOVF80XG5sYXlvdXQobG9jYXRpb24gPSA0KSBvdXQgaGlnaHAgb3V0VHlwZV80IHBjX2ZyYWdDb2xvcjQ7XG4jZW5kaWZcbiNlbmRpZlxuXG4jaWZuZGVmIFJFTU9WRV9DT0xPUl9BVFRBQ0hNRU5UXzVcbiNpZiBDT0xPUl9BVFRBQ0hNRU5UXzVcbmxheW91dChsb2NhdGlvbiA9IDUpIG91dCBoaWdocCBvdXRUeXBlXzUgcGNfZnJhZ0NvbG9yNTtcbiNlbmRpZlxuI2VuZGlmXG5cbiNpZm5kZWYgUkVNT1ZFX0NPTE9SX0FUVEFDSE1FTlRfNlxuI2lmIENPTE9SX0FUVEFDSE1FTlRfNlxubGF5b3V0KGxvY2F0aW9uID0gNikgb3V0IGhpZ2hwIG91dFR5cGVfNiBwY19mcmFnQ29sb3I2O1xuI2VuZGlmXG4jZW5kaWZcblxuI2lmbmRlZiBSRU1PVkVfQ09MT1JfQVRUQUNITUVOVF83XG4jaWYgQ09MT1JfQVRUQUNITUVOVF83XG5sYXlvdXQobG9jYXRpb24gPSA3KSBvdXQgaGlnaHAgb3V0VHlwZV83IHBjX2ZyYWdDb2xvcjc7XG4jZW5kaWZcbiNlbmRpZlxuXG4jZGVmaW5lIGdsX0ZyYWdDb2xvciBwY19mcmFnQ29sb3JcblxuI2RlZmluZSBwY0ZyYWdDb2xvcjAgcGNfZnJhZ0NvbG9yXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMSBwY19mcmFnQ29sb3IxXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMiBwY19mcmFnQ29sb3IyXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMyBwY19mcmFnQ29sb3IzXG4jZGVmaW5lIHBjRnJhZ0NvbG9yNCBwY19mcmFnQ29sb3I0XG4jZGVmaW5lIHBjRnJhZ0NvbG9yNSBwY19mcmFnQ29sb3I1XG4jZGVmaW5lIHBjRnJhZ0NvbG9yNiBwY19mcmFnQ29sb3I2XG4jZGVmaW5lIHBjRnJhZ0NvbG9yNyBwY19mcmFnQ29sb3I3XG5cbiNkZWZpbmUgdmFyeWluZyBpblxuXG4jZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlXG4jZGVmaW5lIHRleHR1cmUyREJpYXMgdGV4dHVyZVxuI2RlZmluZSB0ZXh0dXJlQ3ViZSB0ZXh0dXJlXG4jZGVmaW5lIHRleHR1cmUyRFByb2ogdGV4dHVyZVByb2pcbiNkZWZpbmUgdGV4dHVyZTJETG9kRVhUIHRleHR1cmVMb2RcbiNkZWZpbmUgdGV4dHVyZTJEUHJvakxvZEVYVCB0ZXh0dXJlUHJvakxvZFxuI2RlZmluZSB0ZXh0dXJlQ3ViZUxvZEVYVCB0ZXh0dXJlTG9kXG4jZGVmaW5lIHRleHR1cmUyREdyYWRFWFQgdGV4dHVyZUdyYWRcbiNkZWZpbmUgdGV4dHVyZTJEUHJvakdyYWRFWFQgdGV4dHVyZVByb2pHcmFkXG4jZGVmaW5lIHRleHR1cmVDdWJlR3JhZEVYVCB0ZXh0dXJlR3JhZFxuI2RlZmluZSB1dGV4dHVyZTJEIHRleHR1cmVcbiNkZWZpbmUgaXRleHR1cmUyRCB0ZXh0dXJlXG5cbi8vIHNhbXBsZSBzaGFkb3dzIHVzaW5nIHRleHR1cmVHcmFkIHRvIHJlbW92ZSBkZXJpdmF0aXZlcyBpbiB0aGUgZHluYW1pYyBsb29wcyAod2hpY2ggYXJlIHVzZWQgYnlcbi8vIGNsdXN0ZXJlZCBsaWdodGluZykgLSBhcyBEaXJlY3RYIHNoYWRlciBjb21waWxlciB0cmllcyB0byB1bnJvbGwgdGhlIGxvb3BzIGFuZCB0YWtlcyBsb25nIHRpbWVcbi8vIHRvIGNvbXBpbGUgdGhlIHNoYWRlci4gVXNpbmcgdGV4dHVyZUxvZCB3b3VsZCBiZSBldmVuIGJldHRlciwgYnV0IFdlYkdsIGRvZXMgbm90IHRyYW5zbGF0ZSBpdCB0b1xuLy8gbG9kIGluc3RydWN0aW9uIGZvciBEaXJlY3RYIGNvcnJlY3RseSBhbmQgdXNlcyBTYW1wbGVDbXAgaW5zdGVhZCBvZiBTYW1wbGVDbXBMZXZlbFplcm8gb3Igc2ltaWxhci5cbiNkZWZpbmUgdGV4dHVyZVNoYWRvdyhyZXMsIHV2KSB0ZXh0dXJlR3JhZChyZXMsIHV2LCB2ZWMyKDEsIDEpLCB2ZWMyKDEsIDEpKVxuXG4vLyBwYXNzIC8gYWNjZXB0IHNoYWRvdyBtYXAgb3IgdGV4dHVyZSBhcyBhIGZ1bmN0aW9uIHBhcmFtZXRlciwgb24gd2ViZ2wgdGhpcyBpcyBzaW1wbHkgcGFzc2VkIGFzIGlzXG4vLyBidXQgdGhpcyBpcyBuZWVkZWQgZm9yIFdlYkdQVVxuI2RlZmluZSBTSEFET1dNQVBfUEFTUyhuYW1lKSBuYW1lXG4jZGVmaW5lIFNIQURPV01BUF9BQ0NFUFQobmFtZSkgc2FtcGxlcjJEU2hhZG93IG5hbWVcbiNkZWZpbmUgVEVYVFVSRV9QQVNTKG5hbWUpIG5hbWVcbiNkZWZpbmUgVEVYVFVSRV9BQ0NFUFQobmFtZSkgc2FtcGxlcjJEIG5hbWVcblxuI2RlZmluZSBHTDJcbiNkZWZpbmUgU1VQUE9SVFNfVEVYTE9EXG4jZGVmaW5lIFNVUFBPUlRTX01SVFxuYDtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFlLFVBQVcsQ0FBQTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7In0=
