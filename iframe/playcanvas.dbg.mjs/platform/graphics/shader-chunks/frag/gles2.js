var gles2PS = /* glsl */`

#define pcFragColor0 gl_FragData[0]

#if COLOR_ATTACHMENT_1
#define pcFragColor1 gl_FragData[1]
#endif

#if COLOR_ATTACHMENT_2
#define pcFragColor2 gl_FragData[2]
#endif

#if COLOR_ATTACHMENT_3
#define pcFragColor3 gl_FragData[3]
#endif

#if COLOR_ATTACHMENT_4
#define pcFragColor4 gl_FragData[4]
#endif

#if COLOR_ATTACHMENT_5
#define pcFragColor5 gl_FragData[5]
#endif

#if COLOR_ATTACHMENT_6
#define pcFragColor6 gl_FragData[6]
#endif

#if COLOR_ATTACHMENT_7
#define pcFragColor7 gl_FragData[7]
#endif

#define texture2DBias texture2D
#define itexture2D texture2D
#define utexture2D texture2D

// pass / accept shadow map or texture as a function parameter, on webgl this is simply passed as is
// but this is needed for WebGPU
#define SHADOWMAP_PASS(name) name
#define SHADOWMAP_ACCEPT(name) sampler2D name
#define TEXTURE_PASS(name) name
#define TEXTURE_ACCEPT(name) sampler2D name

#ifndef SUPPORTS_TEXLOD

    // fallback for lod instructions
    #define texture2DLodEXT texture2D
    #define texture2DProjLodEXT textureProj
    #define textureCubeLodEXT textureCube
    #define textureShadow texture2D

#else

    #define textureShadow(res, uv) texture2DGradEXT(res, uv, vec2(1, 1), vec2(1, 1))

#endif

#ifdef SUPPORTS_MRT
    #define gl_FragColor pcFragColor0
#endif

`;

export { gles2PS as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xlczIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy9zaGFkZXItY2h1bmtzL2ZyYWcvZ2xlczIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcblxuI2RlZmluZSBwY0ZyYWdDb2xvcjAgZ2xfRnJhZ0RhdGFbMF1cblxuI2lmIENPTE9SX0FUVEFDSE1FTlRfMVxuI2RlZmluZSBwY0ZyYWdDb2xvcjEgZ2xfRnJhZ0RhdGFbMV1cbiNlbmRpZlxuXG4jaWYgQ09MT1JfQVRUQUNITUVOVF8yXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMiBnbF9GcmFnRGF0YVsyXVxuI2VuZGlmXG5cbiNpZiBDT0xPUl9BVFRBQ0hNRU5UXzNcbiNkZWZpbmUgcGNGcmFnQ29sb3IzIGdsX0ZyYWdEYXRhWzNdXG4jZW5kaWZcblxuI2lmIENPTE9SX0FUVEFDSE1FTlRfNFxuI2RlZmluZSBwY0ZyYWdDb2xvcjQgZ2xfRnJhZ0RhdGFbNF1cbiNlbmRpZlxuXG4jaWYgQ09MT1JfQVRUQUNITUVOVF81XG4jZGVmaW5lIHBjRnJhZ0NvbG9yNSBnbF9GcmFnRGF0YVs1XVxuI2VuZGlmXG5cbiNpZiBDT0xPUl9BVFRBQ0hNRU5UXzZcbiNkZWZpbmUgcGNGcmFnQ29sb3I2IGdsX0ZyYWdEYXRhWzZdXG4jZW5kaWZcblxuI2lmIENPTE9SX0FUVEFDSE1FTlRfN1xuI2RlZmluZSBwY0ZyYWdDb2xvcjcgZ2xfRnJhZ0RhdGFbN11cbiNlbmRpZlxuXG4jZGVmaW5lIHRleHR1cmUyREJpYXMgdGV4dHVyZTJEXG4jZGVmaW5lIGl0ZXh0dXJlMkQgdGV4dHVyZTJEXG4jZGVmaW5lIHV0ZXh0dXJlMkQgdGV4dHVyZTJEXG5cbi8vIHBhc3MgLyBhY2NlcHQgc2hhZG93IG1hcCBvciB0ZXh0dXJlIGFzIGEgZnVuY3Rpb24gcGFyYW1ldGVyLCBvbiB3ZWJnbCB0aGlzIGlzIHNpbXBseSBwYXNzZWQgYXMgaXNcbi8vIGJ1dCB0aGlzIGlzIG5lZWRlZCBmb3IgV2ViR1BVXG4jZGVmaW5lIFNIQURPV01BUF9QQVNTKG5hbWUpIG5hbWVcbiNkZWZpbmUgU0hBRE9XTUFQX0FDQ0VQVChuYW1lKSBzYW1wbGVyMkQgbmFtZVxuI2RlZmluZSBURVhUVVJFX1BBU1MobmFtZSkgbmFtZVxuI2RlZmluZSBURVhUVVJFX0FDQ0VQVChuYW1lKSBzYW1wbGVyMkQgbmFtZVxuXG4jaWZuZGVmIFNVUFBPUlRTX1RFWExPRFxuXG4gICAgLy8gZmFsbGJhY2sgZm9yIGxvZCBpbnN0cnVjdGlvbnNcbiAgICAjZGVmaW5lIHRleHR1cmUyRExvZEVYVCB0ZXh0dXJlMkRcbiAgICAjZGVmaW5lIHRleHR1cmUyRFByb2pMb2RFWFQgdGV4dHVyZVByb2pcbiAgICAjZGVmaW5lIHRleHR1cmVDdWJlTG9kRVhUIHRleHR1cmVDdWJlXG4gICAgI2RlZmluZSB0ZXh0dXJlU2hhZG93IHRleHR1cmUyRFxuXG4jZWxzZVxuXG4gICAgI2RlZmluZSB0ZXh0dXJlU2hhZG93KHJlcywgdXYpIHRleHR1cmUyREdyYWRFWFQocmVzLCB1diwgdmVjMigxLCAxKSwgdmVjMigxLCAxKSlcblxuI2VuZGlmXG5cbiNpZmRlZiBTVVBQT1JUU19NUlRcbiAgICAjZGVmaW5lIGdsX0ZyYWdDb2xvciBwY0ZyYWdDb2xvcjBcbiNlbmRpZlxuXG5gO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWUsVUFBVyxDQUFBO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7In0=
