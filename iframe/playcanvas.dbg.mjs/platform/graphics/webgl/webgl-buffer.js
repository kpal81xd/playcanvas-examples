import { BUFFER_GPUDYNAMIC, BUFFER_STREAM, BUFFER_DYNAMIC, BUFFER_STATIC } from '../constants.js';

/**
 * A WebGL implementation of the Buffer.
 *
 * @ignore
 */
class WebglBuffer {
  constructor() {
    this.bufferId = null;
  }
  destroy(device) {
    if (this.bufferId) {
      device.gl.deleteBuffer(this.bufferId);
      this.bufferId = null;
    }
  }
  get initialized() {
    return !!this.bufferId;
  }
  loseContext() {
    this.bufferId = null;
  }
  unlock(device, usage, target, storage) {
    const gl = device.gl;
    if (!this.bufferId) {
      let glUsage;
      switch (usage) {
        case BUFFER_STATIC:
          glUsage = gl.STATIC_DRAW;
          break;
        case BUFFER_DYNAMIC:
          glUsage = gl.DYNAMIC_DRAW;
          break;
        case BUFFER_STREAM:
          glUsage = gl.STREAM_DRAW;
          break;
        case BUFFER_GPUDYNAMIC:
          glUsage = device.isWebGL2 ? gl.DYNAMIC_COPY : gl.STATIC_DRAW;
          break;
      }
      this.bufferId = gl.createBuffer();
      gl.bindBuffer(target, this.bufferId);
      gl.bufferData(target, storage, glUsage);
    } else {
      gl.bindBuffer(target, this.bufferId);
      gl.bufferSubData(target, 0, storage);
    }
  }
}

export { WebglBuffer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ2wtYnVmZmVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3Mvd2ViZ2wvd2ViZ2wtYnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJVRkZFUl9EWU5BTUlDLCBCVUZGRVJfR1BVRFlOQU1JQywgQlVGRkVSX1NUQVRJQywgQlVGRkVSX1NUUkVBTSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogQSBXZWJHTCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgQnVmZmVyLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgV2ViZ2xCdWZmZXIge1xuICAgIGJ1ZmZlcklkID0gbnVsbDtcblxuICAgIGRlc3Ryb3koZGV2aWNlKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcklkKSB7XG4gICAgICAgICAgICBkZXZpY2UuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVySWQpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaW5pdGlhbGl6ZWQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYnVmZmVySWQ7XG4gICAgfVxuXG4gICAgbG9zZUNvbnRleHQoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVySWQgPSBudWxsO1xuICAgIH1cblxuICAgIHVubG9jayhkZXZpY2UsIHVzYWdlLCB0YXJnZXQsIHN0b3JhZ2UpIHtcbiAgICAgICAgY29uc3QgZ2wgPSBkZXZpY2UuZ2w7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcklkKSB7XG4gICAgICAgICAgICBsZXQgZ2xVc2FnZTtcbiAgICAgICAgICAgIHN3aXRjaCAodXNhZ2UpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEJVRkZFUl9TVEFUSUM6XG4gICAgICAgICAgICAgICAgICAgIGdsVXNhZ2UgPSBnbC5TVEFUSUNfRFJBVztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCVUZGRVJfRFlOQU1JQzpcbiAgICAgICAgICAgICAgICAgICAgZ2xVc2FnZSA9IGdsLkRZTkFNSUNfRFJBVztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCVUZGRVJfU1RSRUFNOlxuICAgICAgICAgICAgICAgICAgICBnbFVzYWdlID0gZ2wuU1RSRUFNX0RSQVc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQlVGRkVSX0dQVURZTkFNSUM6XG4gICAgICAgICAgICAgICAgICAgIGdsVXNhZ2UgPSBkZXZpY2UuaXNXZWJHTDIgPyBnbC5EWU5BTUlDX0NPUFkgOiBnbC5TVEFUSUNfRFJBVztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYnVmZmVySWQgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIodGFyZ2V0LCB0aGlzLmJ1ZmZlcklkKTtcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEodGFyZ2V0LCBzdG9yYWdlLCBnbFVzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIodGFyZ2V0LCB0aGlzLmJ1ZmZlcklkKTtcbiAgICAgICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEodGFyZ2V0LCAwLCBzdG9yYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgV2ViZ2xCdWZmZXIgfTtcbiJdLCJuYW1lcyI6WyJXZWJnbEJ1ZmZlciIsImNvbnN0cnVjdG9yIiwiYnVmZmVySWQiLCJkZXN0cm95IiwiZGV2aWNlIiwiZ2wiLCJkZWxldGVCdWZmZXIiLCJpbml0aWFsaXplZCIsImxvc2VDb250ZXh0IiwidW5sb2NrIiwidXNhZ2UiLCJ0YXJnZXQiLCJzdG9yYWdlIiwiZ2xVc2FnZSIsIkJVRkZFUl9TVEFUSUMiLCJTVEFUSUNfRFJBVyIsIkJVRkZFUl9EWU5BTUlDIiwiRFlOQU1JQ19EUkFXIiwiQlVGRkVSX1NUUkVBTSIsIlNUUkVBTV9EUkFXIiwiQlVGRkVSX0dQVURZTkFNSUMiLCJpc1dlYkdMMiIsIkRZTkFNSUNfQ09QWSIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiYnVmZmVyU3ViRGF0YSJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsV0FBVyxDQUFDO0VBQUFDLFdBQUEsR0FBQTtJQUFBLElBQ2RDLENBQUFBLFFBQVEsR0FBRyxJQUFJLENBQUE7QUFBQSxHQUFBO0VBRWZDLE9BQU9BLENBQUNDLE1BQU0sRUFBRTtJQUNaLElBQUksSUFBSSxDQUFDRixRQUFRLEVBQUU7TUFDZkUsTUFBTSxDQUFDQyxFQUFFLENBQUNDLFlBQVksQ0FBQyxJQUFJLENBQUNKLFFBQVEsQ0FBQyxDQUFBO01BQ3JDLElBQUksQ0FBQ0EsUUFBUSxHQUFHLElBQUksQ0FBQTtBQUN4QixLQUFBO0FBQ0osR0FBQTtFQUVBLElBQUlLLFdBQVdBLEdBQUc7QUFDZCxJQUFBLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0wsUUFBUSxDQUFBO0FBQzFCLEdBQUE7QUFFQU0sRUFBQUEsV0FBV0EsR0FBRztJQUNWLElBQUksQ0FBQ04sUUFBUSxHQUFHLElBQUksQ0FBQTtBQUN4QixHQUFBO0VBRUFPLE1BQU1BLENBQUNMLE1BQU0sRUFBRU0sS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtBQUNuQyxJQUFBLE1BQU1QLEVBQUUsR0FBR0QsTUFBTSxDQUFDQyxFQUFFLENBQUE7QUFFcEIsSUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDSCxRQUFRLEVBQUU7QUFDaEIsTUFBQSxJQUFJVyxPQUFPLENBQUE7QUFDWCxNQUFBLFFBQVFILEtBQUs7QUFDVCxRQUFBLEtBQUtJLGFBQWE7VUFDZEQsT0FBTyxHQUFHUixFQUFFLENBQUNVLFdBQVcsQ0FBQTtBQUN4QixVQUFBLE1BQUE7QUFDSixRQUFBLEtBQUtDLGNBQWM7VUFDZkgsT0FBTyxHQUFHUixFQUFFLENBQUNZLFlBQVksQ0FBQTtBQUN6QixVQUFBLE1BQUE7QUFDSixRQUFBLEtBQUtDLGFBQWE7VUFDZEwsT0FBTyxHQUFHUixFQUFFLENBQUNjLFdBQVcsQ0FBQTtBQUN4QixVQUFBLE1BQUE7QUFDSixRQUFBLEtBQUtDLGlCQUFpQjtVQUNsQlAsT0FBTyxHQUFHVCxNQUFNLENBQUNpQixRQUFRLEdBQUdoQixFQUFFLENBQUNpQixZQUFZLEdBQUdqQixFQUFFLENBQUNVLFdBQVcsQ0FBQTtBQUM1RCxVQUFBLE1BQUE7QUFDUixPQUFBO0FBRUEsTUFBQSxJQUFJLENBQUNiLFFBQVEsR0FBR0csRUFBRSxDQUFDa0IsWUFBWSxFQUFFLENBQUE7TUFDakNsQixFQUFFLENBQUNtQixVQUFVLENBQUNiLE1BQU0sRUFBRSxJQUFJLENBQUNULFFBQVEsQ0FBQyxDQUFBO01BQ3BDRyxFQUFFLENBQUNvQixVQUFVLENBQUNkLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxPQUFPLENBQUMsQ0FBQTtBQUMzQyxLQUFDLE1BQU07TUFDSFIsRUFBRSxDQUFDbUIsVUFBVSxDQUFDYixNQUFNLEVBQUUsSUFBSSxDQUFDVCxRQUFRLENBQUMsQ0FBQTtNQUNwQ0csRUFBRSxDQUFDcUIsYUFBYSxDQUFDZixNQUFNLEVBQUUsQ0FBQyxFQUFFQyxPQUFPLENBQUMsQ0FBQTtBQUN4QyxLQUFBO0FBQ0osR0FBQTtBQUNKOzs7OyJ9
