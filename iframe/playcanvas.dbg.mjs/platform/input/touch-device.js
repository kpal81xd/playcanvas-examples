import { EventHandler } from '../../core/event-handler.js';
import { TouchEvent } from './touch-event.js';

/**
 * Attach a TouchDevice to an element and it will receive and fire events when the element is
 * touched. See also {@link Touch} and {@link TouchEvent}.
 *
 * @augments EventHandler
 * @category Input
 */
class TouchDevice extends EventHandler {
  /**
   * Create a new touch device and attach it to an element.
   *
   * @param {Element} element - The element to attach listen for events on.
   */
  constructor(element) {
    super();
    this._element = null;
    this._startHandler = this._handleTouchStart.bind(this);
    this._endHandler = this._handleTouchEnd.bind(this);
    this._moveHandler = this._handleTouchMove.bind(this);
    this._cancelHandler = this._handleTouchCancel.bind(this);
    this.attach(element);
  }

  /**
   * Attach a device to an element in the DOM. If the device is already attached to an element
   * this method will detach it first.
   *
   * @param {Element} element - The element to attach to.
   */
  attach(element) {
    if (this._element) {
      this.detach();
    }
    this._element = element;
    this._element.addEventListener('touchstart', this._startHandler, false);
    this._element.addEventListener('touchend', this._endHandler, false);
    this._element.addEventListener('touchmove', this._moveHandler, false);
    this._element.addEventListener('touchcancel', this._cancelHandler, false);
  }

  /**
   * Detach a device from the element it is attached to.
   */
  detach() {
    if (this._element) {
      this._element.removeEventListener('touchstart', this._startHandler, false);
      this._element.removeEventListener('touchend', this._endHandler, false);
      this._element.removeEventListener('touchmove', this._moveHandler, false);
      this._element.removeEventListener('touchcancel', this._cancelHandler, false);
    }
    this._element = null;
  }
  _handleTouchStart(e) {
    this.fire('touchstart', new TouchEvent(this, e));
  }
  _handleTouchEnd(e) {
    this.fire('touchend', new TouchEvent(this, e));
  }
  _handleTouchMove(e) {
    // call preventDefault to avoid issues in Chrome Android:
    // http://wilsonpage.co.uk/touch-events-in-chrome-android/
    e.preventDefault();
    this.fire('touchmove', new TouchEvent(this, e));
  }
  _handleTouchCancel(e) {
    this.fire('touchcancel', new TouchEvent(this, e));
  }
}

export { TouchDevice };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91Y2gtZGV2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vaW5wdXQvdG91Y2gtZGV2aWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gJy4uLy4uL2NvcmUvZXZlbnQtaGFuZGxlci5qcyc7XG5cbmltcG9ydCB7IFRvdWNoRXZlbnQgfSBmcm9tICcuL3RvdWNoLWV2ZW50LmpzJztcblxuLyoqXG4gKiBBdHRhY2ggYSBUb3VjaERldmljZSB0byBhbiBlbGVtZW50IGFuZCBpdCB3aWxsIHJlY2VpdmUgYW5kIGZpcmUgZXZlbnRzIHdoZW4gdGhlIGVsZW1lbnQgaXNcbiAqIHRvdWNoZWQuIFNlZSBhbHNvIHtAbGluayBUb3VjaH0gYW5kIHtAbGluayBUb3VjaEV2ZW50fS5cbiAqXG4gKiBAYXVnbWVudHMgRXZlbnRIYW5kbGVyXG4gKiBAY2F0ZWdvcnkgSW5wdXRcbiAqL1xuY2xhc3MgVG91Y2hEZXZpY2UgZXh0ZW5kcyBFdmVudEhhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyB0b3VjaCBkZXZpY2UgYW5kIGF0dGFjaCBpdCB0byBhbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gYXR0YWNoIGxpc3RlbiBmb3IgZXZlbnRzIG9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9zdGFydEhhbmRsZXIgPSB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2VuZEhhbmRsZXIgPSB0aGlzLl9oYW5kbGVUb3VjaEVuZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9tb3ZlSGFuZGxlciA9IHRoaXMuX2hhbmRsZVRvdWNoTW92ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9jYW5jZWxIYW5kbGVyID0gdGhpcy5faGFuZGxlVG91Y2hDYW5jZWwuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLmF0dGFjaChlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBkZXZpY2UgdG8gYW4gZWxlbWVudCBpbiB0aGUgRE9NLiBJZiB0aGUgZGV2aWNlIGlzIGFscmVhZHkgYXR0YWNoZWQgdG8gYW4gZWxlbWVudFxuICAgICAqIHRoaXMgbWV0aG9kIHdpbGwgZGV0YWNoIGl0IGZpcnN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gYXR0YWNoIHRvLlxuICAgICAqL1xuICAgIGF0dGFjaChlbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fc3RhcnRIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl9lbmRIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5fbW92ZUhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuX2NhbmNlbEhhbmRsZXIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRhY2ggYSBkZXZpY2UgZnJvbSB0aGUgZWxlbWVudCBpdCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKi9cbiAgICBkZXRhY2goKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9zdGFydEhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl9lbmRIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX21vdmVIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5fY2FuY2VsSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH1cblxuICAgIF9oYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICAgICAgdGhpcy5maXJlKCd0b3VjaHN0YXJ0JywgbmV3IFRvdWNoRXZlbnQodGhpcywgZSkpO1xuICAgIH1cblxuICAgIF9oYW5kbGVUb3VjaEVuZChlKSB7XG4gICAgICAgIHRoaXMuZmlyZSgndG91Y2hlbmQnLCBuZXcgVG91Y2hFdmVudCh0aGlzLCBlKSk7XG4gICAgfVxuXG4gICAgX2hhbmRsZVRvdWNoTW92ZShlKSB7XG4gICAgICAgIC8vIGNhbGwgcHJldmVudERlZmF1bHQgdG8gYXZvaWQgaXNzdWVzIGluIENocm9tZSBBbmRyb2lkOlxuICAgICAgICAvLyBodHRwOi8vd2lsc29ucGFnZS5jby51ay90b3VjaC1ldmVudHMtaW4tY2hyb21lLWFuZHJvaWQvXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5maXJlKCd0b3VjaG1vdmUnLCBuZXcgVG91Y2hFdmVudCh0aGlzLCBlKSk7XG4gICAgfVxuXG4gICAgX2hhbmRsZVRvdWNoQ2FuY2VsKGUpIHtcbiAgICAgICAgdGhpcy5maXJlKCd0b3VjaGNhbmNlbCcsIG5ldyBUb3VjaEV2ZW50KHRoaXMsIGUpKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRvdWNoRGV2aWNlIH07XG4iXSwibmFtZXMiOlsiVG91Y2hEZXZpY2UiLCJFdmVudEhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJfZWxlbWVudCIsIl9zdGFydEhhbmRsZXIiLCJfaGFuZGxlVG91Y2hTdGFydCIsImJpbmQiLCJfZW5kSGFuZGxlciIsIl9oYW5kbGVUb3VjaEVuZCIsIl9tb3ZlSGFuZGxlciIsIl9oYW5kbGVUb3VjaE1vdmUiLCJfY2FuY2VsSGFuZGxlciIsIl9oYW5kbGVUb3VjaENhbmNlbCIsImF0dGFjaCIsImRldGFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZSIsImZpcmUiLCJUb3VjaEV2ZW50IiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiI7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsV0FBVyxTQUFTQyxZQUFZLENBQUM7QUFDbkM7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXQSxDQUFDQyxPQUFPLEVBQUU7QUFDakIsSUFBQSxLQUFLLEVBQUUsQ0FBQTtJQUVQLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQTtJQUVwQixJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJLENBQUNDLGlCQUFpQixDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdEQsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSSxDQUFDQyxlQUFlLENBQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNsRCxJQUFJLENBQUNHLFlBQVksR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDcEQsSUFBSSxDQUFDSyxjQUFj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
