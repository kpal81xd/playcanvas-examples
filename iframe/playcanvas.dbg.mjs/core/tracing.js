/**
 * Log tracing functionality, allowing for tracing of the internal functionality of the engine.
 * Note that the trace logging only takes place in the debug build of the engine and is stripped
 * out in other builds.
 *
 * @category Debug
 */
class Tracing {
  /**
   * Enable or disable a trace channel.
   *
   * @param {string} channel - Name of the trace channel. Can be:
   *
   * - {@link TRACEID_RENDER_FRAME}
   * - {@link TRACEID_RENDER_FRAME_TIME}
   * - {@link TRACEID_RENDER_PASS}
   * - {@link TRACEID_RENDER_PASS_DETAIL}
   * - {@link TRACEID_RENDER_ACTION}
   * - {@link TRACEID_RENDER_TARGET_ALLOC}
   * - {@link TRACEID_TEXTURE_ALLOC}
   * - {@link TRACEID_SHADER_ALLOC}
   * - {@link TRACEID_SHADER_COMPILE}
   * - {@link TRACEID_VRAM_TEXTURE}
   * - {@link TRACEID_VRAM_VB}
   * - {@link TRACEID_VRAM_IB}
   * - {@link TRACEID_RENDERPIPELINE_ALLOC}
   * - {@link TRACEID_COMPUTEPIPELINE_ALLOC}
   * - {@link TRACEID_PIPELINELAYOUT_ALLOC}
   * - {@link TRACEID_TEXTURES}
   * - {@link TRACEID_GPU_TIMINGS}
   *
   * @param {boolean} enabled - New enabled state for the channel.
   */
  static set(channel, enabled = true) {
    if (enabled) {
      Tracing._traceChannels.add(channel);
    } else {
      Tracing._traceChannels.delete(channel);
    }
  }

  /**
   * Test if the trace channel is enabled.
   *
   * @param {string} channel - Name of the trace channel.
   * @returns {boolean} - True if the trace channel is enabled.
   */
  static get(channel) {
    return Tracing._traceChannels.has(channel);
  }
}
/**
 * Set storing the names of enabled trace channels.
 *
 * @type {Set<string>}
 * @private
 */
Tracing._traceChannels = new Set();
/**
 * Enable call stack logging for trace calls. Defaults to false.
 *
 * @type {boolean}
 */
Tracing.stack = false;

export { Tracing };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2luZy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvcmUvdHJhY2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExvZyB0cmFjaW5nIGZ1bmN0aW9uYWxpdHksIGFsbG93aW5nIGZvciB0cmFjaW5nIG9mIHRoZSBpbnRlcm5hbCBmdW5jdGlvbmFsaXR5IG9mIHRoZSBlbmdpbmUuXG4gKiBOb3RlIHRoYXQgdGhlIHRyYWNlIGxvZ2dpbmcgb25seSB0YWtlcyBwbGFjZSBpbiB0aGUgZGVidWcgYnVpbGQgb2YgdGhlIGVuZ2luZSBhbmQgaXMgc3RyaXBwZWRcbiAqIG91dCBpbiBvdGhlciBidWlsZHMuXG4gKlxuICogQGNhdGVnb3J5IERlYnVnXG4gKi9cbmNsYXNzIFRyYWNpbmcge1xuICAgIC8qKlxuICAgICAqIFNldCBzdG9yaW5nIHRoZSBuYW1lcyBvZiBlbmFibGVkIHRyYWNlIGNoYW5uZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge1NldDxzdHJpbmc+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc3RhdGljIF90cmFjZUNoYW5uZWxzID0gbmV3IFNldCgpO1xuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIGNhbGwgc3RhY2sgbG9nZ2luZyBmb3IgdHJhY2UgY2FsbHMuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgc3RhdGljIHN0YWNrID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSBhIHRyYWNlIGNoYW5uZWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbCAtIE5hbWUgb2YgdGhlIHRyYWNlIGNoYW5uZWwuIENhbiBiZTpcbiAgICAgKlxuICAgICAqIC0ge0BsaW5rIFRSQUNFSURfUkVOREVSX0ZSQU1FfVxuICAgICAqIC0ge0BsaW5rIFRSQUNFSURfUkVOREVSX0ZSQU1FX1RJTUV9XG4gICAgICogLSB7QGxpbmsgVFJBQ0VJRF9SRU5ERVJfUEFTU31cbiAgICAgKiAtIHtAbGluayBUUkFDRUlEX1JFTkRFUl9QQVNTX0RFVEFJTH1cbiAgICAgKiAtIHtAbGluayBUUkFDRUlEX1JFTkRFUl9BQ1RJT059XG4gICAgICogLSB7QGxpbmsgVFJBQ0VJRF9SRU5ERVJfVEFSR0VUX0FMTE9DfVxuICAgICAqIC0ge0BsaW5rIFRSQUNFSURfVEVYVFVSRV9BTExPQ31cbiAgICAgKiAtIHtAbGluayBUUkFDRUlEX1NIQURFUl9BTExPQ31cbiAgICAgKiAtIHtAbGluayBUUkFDRUlEX1NIQURFUl9DT01QSUxFfVxuICAgICAqIC0ge0BsaW5rIFRSQUNFSURfVlJBTV9URVhUVVJFfVxuICAgICAqIC0ge0BsaW5rIFRSQUNFSURfVlJBTV9WQn1cbiAgICAgKiAtIHtAbGluayBUUkFDRUlEX1ZSQU1fSUJ9XG4gICAgICogLSB7QGxpbmsgVFJBQ0VJRF9SRU5ERVJQSVBFTElORV9BTExPQ31cbiAgICAgKiAtIHtAbGluayBUUkFDRUlEX0NPTVBVVEVQSVBFTElORV9BTExPQ31cbiAgICAgKiAtIHtAbGluayBUUkFDRUlEX1BJUEVMSU5FTEFZT1VUX0FMTE9DfVxuICAgICAqIC0ge0BsaW5rIFRSQUNFSURfVEVYVFVSRVN9XG4gICAgICogLSB7QGxpbmsgVFJBQ0VJRF9HUFVfVElNSU5HU31cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCAtIE5ldyBlbmFibGVkIHN0YXRlIGZvciB0aGUgY2hhbm5lbC5cbiAgICAgKi9cbiAgICBzdGF0aWMgc2V0KGNoYW5uZWwsIGVuYWJsZWQgPSB0cnVlKSB7XG5cbiAgICAgICAgLy8gI2lmIF9ERUJVR1xuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgICAgVHJhY2luZy5fdHJhY2VDaGFubmVscy5hZGQoY2hhbm5lbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBUcmFjaW5nLl90cmFjZUNoYW5uZWxzLmRlbGV0ZShjaGFubmVsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAjZW5kaWZcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHRoZSB0cmFjZSBjaGFubmVsIGlzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbCAtIE5hbWUgb2YgdGhlIHRyYWNlIGNoYW5uZWwuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgdHJhY2UgY2hhbm5lbCBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQoY2hhbm5lbCkge1xuICAgICAgICByZXR1cm4gVHJhY2luZy5fdHJhY2VDaGFubmVscy5oYXMoY2hhbm5lbCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBUcmFjaW5nIH07XG4iXSwibmFtZXMiOlsiVHJhY2luZyIsInNldCIsImNoYW5uZWwiLCJlbmFibGVkIiwiX3RyYWNlQ2hhbm5lbHMiLCJhZGQiLCJkZWxldGUiLCJnZXQiLCJoYXMiLCJTZXQiLCJzdGFjayJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxPQUFPLENBQUM7QUFnQlY7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSSxFQUFBLE9BQU9DLEdBQUdBLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxHQUFHLElBQUksRUFBRTtBQUdoQyxJQUFBLElBQUlBLE9BQU8sRUFBRTtBQUNUSCxNQUFBQSxPQUFPLENBQUNJLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDSCxPQUFPLENBQUMsQ0FBQTtBQUN2QyxLQUFDLE1BQU07QUFDSEYsTUFBQUEsT0FBTyxDQUFDSSxjQUFjLENBQUNFLE1BQU0sQ0FBQ0osT0FBTyxDQUFDLENBQUE7QUFDMUMsS0FBQTtBQUVKLEdBQUE7O0FBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0ksT0FBT0ssR0FBR0EsQ0FBQ0wsT0FBTyxFQUFFO0FBQ2hCLElBQUEsT0FBT0YsT0FBTyxDQUFDSSxjQUFjLENBQUNJLEdBQUcsQ0FBQ04sT0FBTyxDQUFDLENBQUE7QUFDOUMsR0FBQTtBQUNKLENBQUE7QUE1REk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTk1GLE9BQU8sQ0FPRkksY0FBYyxHQUFHLElBQUlLLEdBQUcsRUFBRSxDQUFBO0FBRWpDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFiTVQsT0FBTyxDQWNGVSxLQUFLLEdBQUcsS0FBSzs7OzsifQ==
