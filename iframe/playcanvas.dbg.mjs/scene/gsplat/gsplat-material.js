import { CULLFACE_BACK, CULLFACE_NONE } from '../../platform/graphics/constants.js';
import { ShaderProcessorOptions } from '../../platform/graphics/shader-processor-options.js';
import { DITHER_NONE, BLEND_NONE, BLEND_NORMAL, SHADER_FORWARDHDR, GAMMA_SRGBHDR, GAMMA_NONE, TONEMAP_LINEAR } from '../constants.js';
import { Material } from '../materials/material.js';
import { getProgramLibrary } from '../shader-lib/get-program-library.js';
import { gsplat } from './shader-generator-gsplat.js';

const splatMainVS = `
    void main(void)
    {
        vec3 centerLocal = evalCenter();
        vec4 centerWorld = matrix_model * vec4(centerLocal, 1.0);

        gl_Position = evalSplat(centerWorld);
    }
`;
const splatMainFS = `
    void main(void)
    {
        gl_FragColor = evalSplat();
    }
`;

/**
 * @typedef {object} SplatMaterialOptions - The options.
 * @property {boolean} [debugRender] - Adds #define DEBUG_RENDER for shader.
 * @property {string} [vertex] - Custom vertex shader, see SPLAT MANY example.
 * @property {string} [fragment] - Custom fragment shader, see SPLAT MANY example.
 * @property {string} [dither] - Opacity dithering enum.
 */

/**
 * @param {SplatMaterialOptions} [options] - The options.
 * @returns {Material} The GS material.
 */
const createGSplatMaterial = (options = {}) => {
  var _options$dither;
  const {
    debugRender
  } = options;
  const ditherEnum = (_options$dither = options.dither) != null ? _options$dither : DITHER_NONE;
  const dither = ditherEnum !== DITHER_NONE;
  const material = new Material();
  material.name = 'splatMaterial';
  material.cull = debugRender ? CULLFACE_BACK : CULLFACE_NONE;
  material.blendType = dither ? BLEND_NONE : BLEND_NORMAL;
  material.depthWrite = dither;
  material.getShaderVariant = function (device, scene, defs, unused, pass, sortedLights, viewUniformFormat, viewBindGroupFormat) {
    var _options$vertex, _options$fragment;
    const programOptions = {
      pass: pass,
      gamma: pass === SHADER_FORWARDHDR ? scene.gammaCorrection ? GAMMA_SRGBHDR : GAMMA_NONE : scene.gammaCorrection,
      toneMapping: pass === SHADER_FORWARDHDR ? TONEMAP_LINEAR : scene.toneMapping,
      vertex: (_options$vertex = options.vertex) != null ? _options$vertex : splatMainVS,
      fragment: (_options$fragment = options.fragment) != null ? _options$fragment : splatMainFS,
      debugRender: debugRender,
      dither: ditherEnum
    };
    const processingOptions = new ShaderProcessorOptions(viewUniformFormat, viewBindGroupFormat);
    const library = getProgramLibrary(device);
    library.register('splat', gsplat);
    return library.getProgram('splat', programOptions, processingOptions);
  };
  material.update();
  return material;
};

export { createGSplatMaterial };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3NwbGF0LW1hdGVyaWFsLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvZ3NwbGF0L2dzcGxhdC1tYXRlcmlhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDVUxMRkFDRV9CQUNLLCBDVUxMRkFDRV9OT05FIH0gZnJvbSBcIi4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgU2hhZGVyUHJvY2Vzc29yT3B0aW9ucyB9IGZyb20gXCIuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9zaGFkZXItcHJvY2Vzc29yLW9wdGlvbnMuanNcIjtcbmltcG9ydCB7IEJMRU5EX05PTkUsIEJMRU5EX05PUk1BTCwgRElUSEVSX05PTkUsIEdBTU1BX05PTkUsIEdBTU1BX1NSR0JIRFIsIFNIQURFUl9GT1JXQVJESERSLCBUT05FTUFQX0xJTkVBUiB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFscy9tYXRlcmlhbC5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvZ3JhbUxpYnJhcnkgfSBmcm9tIFwiLi4vc2hhZGVyLWxpYi9nZXQtcHJvZ3JhbS1saWJyYXJ5LmpzXCI7XG5pbXBvcnQgeyBnc3BsYXQgfSBmcm9tIFwiLi9zaGFkZXItZ2VuZXJhdG9yLWdzcGxhdC5qc1wiO1xuXG5jb25zdCBzcGxhdE1haW5WUyA9IGBcbiAgICB2b2lkIG1haW4odm9pZClcbiAgICB7XG4gICAgICAgIHZlYzMgY2VudGVyTG9jYWwgPSBldmFsQ2VudGVyKCk7XG4gICAgICAgIHZlYzQgY2VudGVyV29ybGQgPSBtYXRyaXhfbW9kZWwgKiB2ZWM0KGNlbnRlckxvY2FsLCAxLjApO1xuXG4gICAgICAgIGdsX1Bvc2l0aW9uID0gZXZhbFNwbGF0KGNlbnRlcldvcmxkKTtcbiAgICB9XG5gO1xuXG5jb25zdCBzcGxhdE1haW5GUyA9IGBcbiAgICB2b2lkIG1haW4odm9pZClcbiAgICB7XG4gICAgICAgIGdsX0ZyYWdDb2xvciA9IGV2YWxTcGxhdCgpO1xuICAgIH1cbmA7XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gU3BsYXRNYXRlcmlhbE9wdGlvbnMgLSBUaGUgb3B0aW9ucy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2RlYnVnUmVuZGVyXSAtIEFkZHMgI2RlZmluZSBERUJVR19SRU5ERVIgZm9yIHNoYWRlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdmVydGV4XSAtIEN1c3RvbSB2ZXJ0ZXggc2hhZGVyLCBzZWUgU1BMQVQgTUFOWSBleGFtcGxlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtmcmFnbWVudF0gLSBDdXN0b20gZnJhZ21lbnQgc2hhZGVyLCBzZWUgU1BMQVQgTUFOWSBleGFtcGxlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtkaXRoZXJdIC0gT3BhY2l0eSBkaXRoZXJpbmcgZW51bS5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7U3BsYXRNYXRlcmlhbE9wdGlvbnN9IFtvcHRpb25zXSAtIFRoZSBvcHRpb25zLlxuICogQHJldHVybnMge01hdGVyaWFsfSBUaGUgR1MgbWF0ZXJpYWwuXG4gKi9cbmNvbnN0IGNyZWF0ZUdTcGxhdE1hdGVyaWFsID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xuXG4gICAgY29uc3QgeyBkZWJ1Z1JlbmRlciB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGRpdGhlckVudW0gPSBvcHRpb25zLmRpdGhlciA/PyBESVRIRVJfTk9ORTtcbiAgICBjb25zdCBkaXRoZXIgPSBkaXRoZXJFbnVtICE9PSBESVRIRVJfTk9ORTtcblxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKCk7XG4gICAgbWF0ZXJpYWwubmFtZSA9ICdzcGxhdE1hdGVyaWFsJztcbiAgICBtYXRlcmlhbC5jdWxsID0gZGVidWdSZW5kZXIgPyBDVUxMRkFDRV9CQUNLIDogQ1VMTEZBQ0VfTk9ORTtcbiAgICBtYXRlcmlhbC5ibGVuZFR5cGUgPSBkaXRoZXIgPyBCTEVORF9OT05FIDogQkxFTkRfTk9STUFMO1xuICAgIG1hdGVyaWFsLmRlcHRoV3JpdGUgPSBkaXRoZXI7XG5cbiAgICBtYXRlcmlhbC5nZXRTaGFkZXJWYXJpYW50ID0gZnVuY3Rpb24gKGRldmljZSwgc2NlbmUsIGRlZnMsIHVudXNlZCwgcGFzcywgc29ydGVkTGlnaHRzLCB2aWV3VW5pZm9ybUZvcm1hdCwgdmlld0JpbmRHcm91cEZvcm1hdCkge1xuXG4gICAgICAgIGNvbnN0IHByb2dyYW1PcHRpb25zID0ge1xuICAgICAgICAgICAgcGFzczogcGFzcyxcbiAgICAgICAgICAgIGdhbW1hOiAocGFzcyA9PT0gU0hBREVSX0ZPUldBUkRIRFIgPyAoc2NlbmUuZ2FtbWFDb3JyZWN0aW9uID8gR0FNTUFfU1JHQkhEUiA6IEdBTU1BX05PTkUpIDogc2NlbmUuZ2FtbWFDb3JyZWN0aW9uKSxcbiAgICAgICAgICAgIHRvbmVNYXBwaW5nOiAocGFzcyA9PT0gU0hBREVSX0ZPUldBUkRIRFIgPyBUT05FTUFQX0xJTkVBUiA6IHNjZW5lLnRvbmVNYXBwaW5nKSxcbiAgICAgICAgICAgIHZlcnRleDogb3B0aW9ucy52ZXJ0ZXggPz8gc3BsYXRNYWluVlMsXG4gICAgICAgICAgICBmcmFnbWVudDogb3B0aW9ucy5mcmFnbWVudCA/PyBzcGxhdE1haW5GUyxcbiAgICAgICAgICAgIGRlYnVnUmVuZGVyOiBkZWJ1Z1JlbmRlcixcbiAgICAgICAgICAgIGRpdGhlcjogZGl0aGVyRW51bVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHByb2Nlc3NpbmdPcHRpb25zID0gbmV3IFNoYWRlclByb2Nlc3Nvck9wdGlvbnModmlld1VuaWZvcm1Gb3JtYXQsIHZpZXdCaW5kR3JvdXBGb3JtYXQpO1xuXG4gICAgICAgIGNvbnN0IGxpYnJhcnkgPSBnZXRQcm9ncmFtTGlicmFyeShkZXZpY2UpO1xuICAgICAgICBsaWJyYXJ5LnJlZ2lzdGVyKCdzcGxhdCcsIGdzcGxhdCk7XG4gICAgICAgIHJldHVybiBsaWJyYXJ5LmdldFByb2dyYW0oJ3NwbGF0JywgcHJvZ3JhbU9wdGlvbnMsIHByb2Nlc3NpbmdPcHRpb25zKTtcbiAgICB9O1xuXG4gICAgbWF0ZXJpYWwudXBkYXRlKCk7XG5cbiAgICByZXR1cm4gbWF0ZXJpYWw7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVHU3BsYXRNYXRlcmlhbCB9O1xuIl0sIm5hbWVzIjpbInNwbGF0TWFpblZTIiwic3BsYXRNYWluRlMiLCJjcmVhdGVHU3BsYXRNYXRlcmlhbCIsIm9wdGlvbnMiLCJfb3B0aW9ucyRkaXRoZXIiLCJkZWJ1Z1JlbmRlciIsImRpdGhlckVudW0iLCJkaXRoZXIiLCJESVRIRVJfTk9ORSIsIm1hdGVyaWFsIiwiTWF0ZXJpYWwiLCJuYW1lIiwiY3VsbCIsIkNVTExGQUNFX0JBQ0siLCJDVUxMRkFDRV9OT05FIiwiYmxlbmRUeXBlIiwiQkxFTkRfTk9ORSIsIkJMRU5EX05PUk1BTCIsImRlcHRoV3JpdGUiLCJnZXRTaGFkZXJWYXJpYW50IiwiZGV2aWNlIiwic2NlbmUiLCJkZWZzIiwidW51c2VkIiwicGFzcyIsInNvcnRlZExpZ2h0cyIsInZpZXdVbmlmb3JtRm9ybWF0Iiwidmlld0JpbmRHcm91cEZvcm1hdCIsIl9vcHRpb25zJHZlcnRleCIsIl9vcHRpb25zJGZyYWdtZW50IiwicHJvZ3JhbU9wdGlvbnMiLCJnYW1tYSIsIlNIQURFUl9GT1JXQVJESERSIiwiZ2FtbWFDb3JyZWN0aW9uIiwiR0FNTUFfU1JHQkhEUiIsIkdBTU1BX05PTkUiLCJ0b25lTWFwcGluZyIsIlRPTkVNQVBfTElORUFSIiwidmVydGV4IiwiZnJhZ21lbnQiLCJwcm9jZXNzaW5nT3B0aW9ucyIsIlNoYWRlclByb2Nlc3Nvck9wdGlvbnMiLCJsaWJyYXJ5IiwiZ2V0UHJvZ3JhbUxpYnJhcnkiLCJyZWdpc3RlciIsImdzcGxhdCIsImdldFByb2dyYW0iLCJ1cGRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQSxNQUFNQSxXQUFXLEdBQUksQ0FBQTtBQUNy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
