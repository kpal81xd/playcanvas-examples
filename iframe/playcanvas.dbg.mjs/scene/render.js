import { EventHandler } from '../core/event-handler.js';

/**
 * A render contains an array of meshes that are referenced by a single hierarchy node in a GLB
 * model, and are accessible using {@link ContainerResource#renders} property. The render is the
 * resource of a Render Asset.
 *
 * @augments EventHandler
 * @ignore
 */
class Render extends EventHandler {
  /**
   * Create a new Render instance. These are usually created by the GLB loader and not created
   * by hand.
   */
  constructor() {
    super();

    /**
     * Meshes are reference counted, and this class owns the references and is responsible for
     * releasing the meshes when they are no longer referenced.
     *
     * @type {import('./mesh.js').Mesh[]}
     * @private
     */
    this._meshes = null;
  }

  /**
   * The meshes that the render contains.
   *
   * @type {import('./mesh.js').Mesh[]}
   */
  set meshes(value) {
    // decrement references on the existing meshes
    this.decRefMeshes();

    // assign new meshes
    this._meshes = value;
    this.incRefMeshes();
    this.fire('set:meshes', value);
  }
  get meshes() {
    return this._meshes;
  }
  destroy() {
    this.meshes = null;
  }

  // decrement references to meshes, destroy the ones with zero references
  decRefMeshes() {
    if (this._meshes) {
      const count = this._meshes.length;
      for (let i = 0; i < count; i++) {
        const mesh = this._meshes[i];
        if (mesh) {
          mesh.decRefCount();
          if (mesh.refCount < 1) {
            mesh.destroy();
            this._meshes[i] = null;
          }
        }
      }
    }
  }

  // increments ref count on all meshes
  incRefMeshes() {
    if (this._meshes) {
      const count = this._meshes.length;
      for (let i = 0; i < count; i++) {
        if (this._meshes[i]) {
          this._meshes[i].incRefCount();
        }
      }
    }
  }
}
/**
 * Fired when the meshes are set on the render. The handler is passed the an array of
 * {@link Mesh} objects.
 *
 * @event
 * @example
 * render.on('set:meshes', (meshes) => {
 *     console.log(`Render has ${meshes.length} meshes`);
 * });
 * @ignore
 */
Render.EVENT_SETMESHES = 'set:meshes';

export { Render };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvcmVuZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL2NvcmUvZXZlbnQtaGFuZGxlci5qcyc7XG5cbi8qKlxuICogQSByZW5kZXIgY29udGFpbnMgYW4gYXJyYXkgb2YgbWVzaGVzIHRoYXQgYXJlIHJlZmVyZW5jZWQgYnkgYSBzaW5nbGUgaGllcmFyY2h5IG5vZGUgaW4gYSBHTEJcbiAqIG1vZGVsLCBhbmQgYXJlIGFjY2Vzc2libGUgdXNpbmcge0BsaW5rIENvbnRhaW5lclJlc291cmNlI3JlbmRlcnN9IHByb3BlcnR5LiBUaGUgcmVuZGVyIGlzIHRoZVxuICogcmVzb3VyY2Ugb2YgYSBSZW5kZXIgQXNzZXQuXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50SGFuZGxlclxuICogQGlnbm9yZVxuICovXG5jbGFzcyBSZW5kZXIgZXh0ZW5kcyBFdmVudEhhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIG1lc2hlcyBhcmUgc2V0IG9uIHRoZSByZW5kZXIuIFRoZSBoYW5kbGVyIGlzIHBhc3NlZCB0aGUgYW4gYXJyYXkgb2ZcbiAgICAgKiB7QGxpbmsgTWVzaH0gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBldmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogcmVuZGVyLm9uKCdzZXQ6bWVzaGVzJywgKG1lc2hlcykgPT4ge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhgUmVuZGVyIGhhcyAke21lc2hlcy5sZW5ndGh9IG1lc2hlc2ApO1xuICAgICAqIH0pO1xuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzdGF0aWMgRVZFTlRfU0VUTUVTSEVTID0gJ3NldDptZXNoZXMnO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFJlbmRlciBpbnN0YW5jZS4gVGhlc2UgYXJlIHVzdWFsbHkgY3JlYXRlZCBieSB0aGUgR0xCIGxvYWRlciBhbmQgbm90IGNyZWF0ZWRcbiAgICAgKiBieSBoYW5kLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNoZXMgYXJlIHJlZmVyZW5jZSBjb3VudGVkLCBhbmQgdGhpcyBjbGFzcyBvd25zIHRoZSByZWZlcmVuY2VzIGFuZCBpcyByZXNwb25zaWJsZSBmb3JcbiAgICAgICAgICogcmVsZWFzaW5nIHRoZSBtZXNoZXMgd2hlbiB0aGV5IGFyZSBubyBsb25nZXIgcmVmZXJlbmNlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge2ltcG9ydCgnLi9tZXNoLmpzJykuTWVzaFtdfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbWVzaGVzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWVzaGVzIHRoYXQgdGhlIHJlbmRlciBjb250YWlucy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtpbXBvcnQoJy4vbWVzaC5qcycpLk1lc2hbXX1cbiAgICAgKi9cbiAgICBzZXQgbWVzaGVzKHZhbHVlKSB7XG4gICAgICAgIC8vIGRlY3JlbWVudCByZWZlcmVuY2VzIG9uIHRoZSBleGlzdGluZyBtZXNoZXNcbiAgICAgICAgdGhpcy5kZWNSZWZNZXNoZXMoKTtcblxuICAgICAgICAvLyBhc3NpZ24gbmV3IG1lc2hlc1xuICAgICAgICB0aGlzLl9tZXNoZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pbmNSZWZNZXNoZXMoKTtcblxuICAgICAgICB0aGlzLmZpcmUoJ3NldDptZXNoZXMnLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0IG1lc2hlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lc2hlcztcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLm1lc2hlcyA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gZGVjcmVtZW50IHJlZmVyZW5jZXMgdG8gbWVzaGVzLCBkZXN0cm95IHRoZSBvbmVzIHdpdGggemVybyByZWZlcmVuY2VzXG4gICAgZGVjUmVmTWVzaGVzKCkge1xuICAgICAgICBpZiAodGhpcy5fbWVzaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX21lc2hlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNoID0gdGhpcy5fbWVzaGVzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChtZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc2guZGVjUmVmQ291bnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc2gucmVmQ291bnQgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc2hlc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpbmNyZW1lbnRzIHJlZiBjb3VudCBvbiBhbGwgbWVzaGVzXG4gICAgaW5jUmVmTWVzaGVzKCkge1xuICAgICAgICBpZiAodGhpcy5fbWVzaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX21lc2hlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWVzaGVzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc2hlc1tpXS5pbmNSZWZDb3VudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgUmVuZGVyIH07XG4iXSwibmFtZXMiOlsiUmVuZGVyIiwiRXZlbnRIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJfbWVzaGVzIiwibWVzaGVzIiwidmFsdWUiLCJkZWNSZWZNZXNoZXMiLCJpbmNSZWZNZXNoZXMiLCJmaXJlIiwiZGVzdHJveSIsImNvdW50IiwibGVuZ3RoIiwiaSIsIm1lc2giLCJkZWNSZWZDb3VudCIsInJlZkNvdW50IiwiaW5jUmVmQ291bnQiLCJFVkVOVF9TRVRNRVNIRVMiXSwibWFwcGluZ3MiOiI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLE1BQU0sU0FBU0MsWUFBWSxDQUFDO0FBYzlCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLFdBQVdBLEdBQUc7QUFDVixJQUFBLEtBQUssRUFBRSxDQUFBOztBQUVQO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFBO0FBQ3ZCLEdBQUE7O0FBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJLElBQUlDLE1BQU1BLENBQUNDLEtBQUssRUFBRTtBQUNkO0lBQ0EsSUFBSSxDQUFDQyxZQUFZLEVBQUUsQ0FBQTs7QUFFbkI7SUFDQSxJQUFJLENBQUNILE9BQU8sR0FBR0UsS0FBSyxDQUFBO0lBQ3BCLElBQUksQ0FBQ0UsWUFBWSxFQUFFLENBQUE7QUFFbkIsSUFBQSxJQUFJLENBQUNDLElBQUksQ0FBQyxZQUFZLEVBQUVILEtBQUssQ0FBQyxDQUFBO0FBQ2xDLEdBQUE7RUFFQSxJQUFJRCxNQUFNQSxHQUFHO0lBQ1QsT0FBTyxJQUFJLENBQUNELE9BQU8sQ0FBQTtBQUN2QixHQUFBO0FBRUFNLEVBQUFBLE9BQU9BLEdBQUc7SUFDTixJQUFJLENBQUNMLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFDdEIsR0FBQTs7QUFFQTtBQUNBRSxFQUFBQSxZQUFZQSxHQUFHO0lBQ1gsSUFBSSxJQUFJLENBQUNILE9BQU8sRUFBRTtBQUNkLE1BQUEsTUFBTU8sS0FBSyxHQUFHLElBQUksQ0FBQ1AsT0FBTyxDQUFDUSxNQUFNLENBQUE7TUFDakMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdGLEtBQUssRUFBRUUsQ0FBQyxFQUFFLEVBQUU7QUFDNUIsUUFBQSxNQUFNQyxJQUFJLEdBQUcsSUFBSSxDQUFDVixPQUFPLENBQUNTLENBQUMsQ0FBQyxDQUFBO0FBQzVCLFFBQUEsSUFBSUMsSUFBSSxFQUFFO1VBQ05BLElBQUksQ0FBQ0MsV0FBVyxFQUFFLENBQUE7QUFDbEIsVUFBQSxJQUFJRCxJQUFJLENBQUNFLFFBQVEsR0FBRyxDQUFDLEVBQUU7WUFDbkJGLElBQUksQ0FBQ0osT0FBTyxFQUFFLENBQUE7QUFDZCxZQUFBLElBQUksQ0FBQ04sT0FBTyxDQUFDUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7QUFDMUIsV0FBQTtBQUNKLFNBQUE7QUFDSixPQUFBO0FBQ0osS0FBQTtBQUNKLEdBQUE7O0FBRUE7QUFDQUwsRUFBQUEsWUFBWUEsR0FBRztJQUNYLElBQUksSUFBSSxDQUFDSixPQUFPLEVBQUU7QUFDZCxNQUFBLE1BQU1PLEtBQUssR0FBRyxJQUFJLENBQUNQLE9BQU8sQ0FBQ1EsTUFBTSxDQUFBO01BQ2pDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRixLQUFLLEVBQUVFLENBQUMsRUFBRSxFQUFFO0FBQzVCLFFBQUEsSUFBSSxJQUFJLENBQUNULE9BQU8sQ0FBQ1MsQ0FBQyxDQUFDLEVBQUU7VUFDakIsSUFBSSxDQUFDVCxPQUFPLENBQUNTLENBQUMsQ0FBQyxDQUFDSSxXQUFXLEVBQUUsQ0FBQTtBQUNqQyxTQUFBO0FBQ0osT0FBQTtBQUNKLEtBQUE7QUFDSixHQUFBO0FBQ0osQ0FBQTtBQWxGSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWE1oQixNQUFNLENBWURpQixlQUFlLEdBQUcsWUFBWTs7OzsifQ==
