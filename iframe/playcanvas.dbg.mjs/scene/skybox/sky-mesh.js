import { CULLFACE_FRONT } from '../../platform/graphics/constants.js';
import { ShaderProcessorOptions } from '../../platform/graphics/shader-processor-options.js';
import { SHADER_FORWARDHDR, GAMMA_SRGBHDR, GAMMA_NONE, TONEMAP_LINEAR, LAYERID_SKYBOX } from '../constants.js';
import { Material } from '../materials/material.js';
import { MeshInstance } from '../mesh-instance.js';
import { getProgramLibrary } from '../shader-lib/get-program-library.js';
import { skybox } from '../shader-lib/programs/skybox.js';
import { SkyGeometry } from './sky-geometry.js';

/**
 * A visual representation of the sky.
 *
 * @ignore
 */
class SkyMesh {
  /**
   * @param {import('../../platform/graphics/graphics-device.js').GraphicsDevice} device - The
   * graphics device.
   * @param {import('../scene.js').Scene} scene - The scene owning the sky.
   * @param {import('../../platform/graphics/texture.js').Texture} texture - The texture of the sky.
   * @param {string} type - The type of the sky. One of the SKYMESH_* constants.
   */
  constructor(device, scene, node, texture, type) {
    /**
     * Mesh instance representing the visuals of the sky.
     *
     * @type {MeshInstance|null}
     */
    this.meshInstance = null;
    const material = new Material();
    material.getShaderVariant = function (dev, sc, defs, unused, pass, sortedLights, viewUniformFormat, viewBindGroupFormat) {
      const options = {
        pass: pass,
        encoding: texture.encoding,
        useIntensity: scene.skyboxIntensity !== 1 || scene.physicalUnits,
        gamma: pass === SHADER_FORWARDHDR ? scene.gammaCorrection ? GAMMA_SRGBHDR : GAMMA_NONE : scene.gammaCorrection,
        toneMapping: pass === SHADER_FORWARDHDR ? TONEMAP_LINEAR : scene.toneMapping,
        skymesh: type
      };
      if (texture.cubemap) {
        options.type = 'cubemap';
        options.mip = texture.fixCubemapSeams ? scene.skyboxMip : 0;
        options.fixSeams = texture.fixCubemapSeams;
      } else {
        options.type = 'envAtlas';
      }
      const processingOptions = new ShaderProcessorOptions(viewUniformFormat, viewBindGroupFormat);
      const library = getProgramLibrary(device);
      library.register('skybox', skybox);
      return library.getProgram('skybox', options, processingOptions);
    };
    if (texture.cubemap) {
      material.setParameter('texture_cubeMap', texture);
    } else {
      material.setParameter('texture_envAtlas', texture);
      material.setParameter('mipLevel', scene._skyboxMip);
    }
    material.cull = CULLFACE_FRONT;
    material.depthWrite = false;
    const skyLayer = scene.layers.getLayerById(LAYERID_SKYBOX);
    if (skyLayer) {
      const mesh = SkyGeometry.create(device, type);
      const meshInstance = new MeshInstance(mesh, material, node);
      this.meshInstance = meshInstance;
      meshInstance.cull = false;

      // disable picker, the material has custom update shader and does not handle picker variant
      meshInstance.pick = false;
      skyLayer.addMeshInstances([meshInstance]);
      this.skyLayer = skyLayer;
    }
  }
  destroy() {
    if (this.meshInstance) {
      if (this.skyLayer) {
        this.skyLayer.removeMeshInstances([this.meshInstance]);
      }
      this.meshInstance.destroy();
      this.meshInstance = null;
    }
  }
}

export { SkyMesh };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2t5LW1lc2guanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZS9za3lib3gvc2t5LW1lc2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ1VMTEZBQ0VfRlJPTlQgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgU2hhZGVyUHJvY2Vzc29yT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL3NoYWRlci1wcm9jZXNzb3Itb3B0aW9ucy5qcyc7XG5cbmltcG9ydCB7IEdBTU1BX05PTkUsIEdBTU1BX1NSR0JIRFIsIExBWUVSSURfU0tZQk9YLCBTSEFERVJfRk9SV0FSREhEUiwgVE9ORU1BUF9MSU5FQVIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvbWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTWVzaEluc3RhbmNlIH0gZnJvbSAnLi4vbWVzaC1pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBnZXRQcm9ncmFtTGlicmFyeSB9IGZyb20gJy4uL3NoYWRlci1saWIvZ2V0LXByb2dyYW0tbGlicmFyeS5qcyc7XG5pbXBvcnQgeyBza3lib3ggfSBmcm9tICcuLi9zaGFkZXItbGliL3Byb2dyYW1zL3NreWJveC5qcyc7XG5pbXBvcnQgeyBTa3lHZW9tZXRyeSB9IGZyb20gJy4vc2t5LWdlb21ldHJ5LmpzJztcblxuLyoqXG4gKiBBIHZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgc2t5LlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgU2t5TWVzaCB7XG4gICAgLyoqXG4gICAgICogTWVzaCBpbnN0YW5jZSByZXByZXNlbnRpbmcgdGhlIHZpc3VhbHMgb2YgdGhlIHNreS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtNZXNoSW5zdGFuY2V8bnVsbH1cbiAgICAgKi9cbiAgICBtZXNoSW5zdGFuY2UgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL2dyYXBoaWNzLWRldmljZS5qcycpLkdyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBUaGVcbiAgICAgKiBncmFwaGljcyBkZXZpY2UuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uL3NjZW5lLmpzJykuU2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIG93bmluZyB0aGUgc2t5LlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy90ZXh0dXJlLmpzJykuVGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlIG9mIHRoZSBza3kuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgc2t5LiBPbmUgb2YgdGhlIFNLWU1FU0hfKiBjb25zdGFudHMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBzY2VuZSwgbm9kZSwgdGV4dHVyZSwgdHlwZSkge1xuXG4gICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKCk7XG5cbiAgICAgICAgbWF0ZXJpYWwuZ2V0U2hhZGVyVmFyaWFudCA9IGZ1bmN0aW9uIChkZXYsIHNjLCBkZWZzLCB1bnVzZWQsIHBhc3MsIHNvcnRlZExpZ2h0cywgdmlld1VuaWZvcm1Gb3JtYXQsIHZpZXdCaW5kR3JvdXBGb3JtYXQpIHtcblxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBwYXNzOiBwYXNzLFxuICAgICAgICAgICAgICAgIGVuY29kaW5nOiB0ZXh0dXJlLmVuY29kaW5nLFxuICAgICAgICAgICAgICAgIHVzZUludGVuc2l0eTogc2NlbmUuc2t5Ym94SW50ZW5zaXR5ICE9PSAxIHx8IHNjZW5lLnBoeXNpY2FsVW5pdHMsXG4gICAgICAgICAgICAgICAgZ2FtbWE6IChwYXNzID09PSBTSEFERVJfRk9SV0FSREhEUiA/IChzY2VuZS5nYW1tYUNvcnJlY3Rpb24gPyBHQU1NQV9TUkdCSERSIDogR0FNTUFfTk9ORSkgOiBzY2VuZS5nYW1tYUNvcnJlY3Rpb24pLFxuICAgICAgICAgICAgICAgIHRvbmVNYXBwaW5nOiAocGFzcyA9PT0gU0hBREVSX0ZPUldBUkRIRFIgPyBUT05FTUFQX0xJTkVBUiA6IHNjZW5lLnRvbmVNYXBwaW5nKSxcbiAgICAgICAgICAgICAgICBza3ltZXNoOiB0eXBlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGV4dHVyZS5jdWJlbWFwKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy50eXBlID0gJ2N1YmVtYXAnO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWlwID0gdGV4dHVyZS5maXhDdWJlbWFwU2VhbXMgPyBzY2VuZS5za3lib3hNaXAgOiAwO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZml4U2VhbXMgPSB0ZXh0dXJlLmZpeEN1YmVtYXBTZWFtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy50eXBlID0gJ2VudkF0bGFzJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2luZ09wdGlvbnMgPSBuZXcgU2hhZGVyUHJvY2Vzc29yT3B0aW9ucyh2aWV3VW5pZm9ybUZvcm1hdCwgdmlld0JpbmRHcm91cEZvcm1hdCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxpYnJhcnkgPSBnZXRQcm9ncmFtTGlicmFyeShkZXZpY2UpO1xuICAgICAgICAgICAgbGlicmFyeS5yZWdpc3Rlcignc2t5Ym94Jywgc2t5Ym94KTtcbiAgICAgICAgICAgIHJldHVybiBsaWJyYXJ5LmdldFByb2dyYW0oJ3NreWJveCcsIG9wdGlvbnMsIHByb2Nlc3NpbmdPcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGV4dHVyZS5jdWJlbWFwKSB7XG4gICAgICAgICAgICBtYXRlcmlhbC5zZXRQYXJhbWV0ZXIoJ3RleHR1cmVfY3ViZU1hcCcsIHRleHR1cmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWwuc2V0UGFyYW1ldGVyKCd0ZXh0dXJlX2VudkF0bGFzJywgdGV4dHVyZSk7XG4gICAgICAgICAgICBtYXRlcmlhbC5zZXRQYXJhbWV0ZXIoJ21pcExldmVsJywgc2NlbmUuX3NreWJveE1pcCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRlcmlhbC5jdWxsID0gQ1VMTEZBQ0VfRlJPTlQ7XG4gICAgICAgIG1hdGVyaWFsLmRlcHRoV3JpdGUgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBza3lMYXllciA9IHNjZW5lLmxheWVycy5nZXRMYXllckJ5SWQoTEFZRVJJRF9TS1lCT1gpO1xuICAgICAgICBpZiAoc2t5TGF5ZXIpIHtcblxuICAgICAgICAgICAgY29uc3QgbWVzaCA9IFNreUdlb21ldHJ5LmNyZWF0ZShkZXZpY2UsIHR5cGUpO1xuICAgICAgICAgICAgY29uc3QgbWVzaEluc3RhbmNlID0gbmV3IE1lc2hJbnN0YW5jZShtZXNoLCBtYXRlcmlhbCwgbm9kZSk7XG4gICAgICAgICAgICB0aGlzLm1lc2hJbnN0YW5jZSA9IG1lc2hJbnN0YW5jZTtcblxuICAgICAgICAgICAgbWVzaEluc3RhbmNlLmN1bGwgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gZGlzYWJsZSBwaWNrZXIsIHRoZSBtYXRlcmlhbCBoYXMgY3VzdG9tIHVwZGF0ZSBzaGFkZXIgYW5kIGRvZXMgbm90IGhhbmRsZSBwaWNrZXIgdmFyaWFudFxuICAgICAgICAgICAgbWVzaEluc3RhbmNlLnBpY2sgPSBmYWxzZTtcblxuICAgICAgICAgICAgc2t5TGF5ZXIuYWRkTWVzaEluc3RhbmNlcyhbbWVzaEluc3RhbmNlXSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2t5TGF5ZXIgPSBza3lMYXllcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLm1lc2hJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2t5TGF5ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNreUxheWVyLnJlbW92ZU1lc2hJbnN0YW5jZXMoW3RoaXMubWVzaEluc3RhbmNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1lc2hJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLm1lc2hJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IFNreU1lc2ggfTtcbiJdLCJuYW1lcyI6WyJTa3lNZXNoIiwiY29uc3RydWN0b3IiLCJkZXZpY2UiLCJzY2VuZSIsIm5vZGUiLCJ0ZXh0dXJlIiwidHlwZSIsIm1lc2hJbnN0YW5jZSIsIm1hdGVyaWFsIiwiTWF0ZXJpYWwiLCJnZXRTaGFkZXJWYXJpYW50IiwiZGV2Iiwic2MiLCJkZWZzIiwidW51c2VkIiwicGFzcyIsInNvcnRlZExpZ2h0cyIsInZpZXdVbmlmb3JtRm9ybWF0Iiwidmlld0JpbmRHcm91cEZvcm1hdCIsIm9wdGlvbnMiLCJlbmNvZGluZyIsInVzZUludGVuc2l0eSIsInNreWJveEludGVuc2l0eSIsInBoeXNpY2FsVW5pdHMiLCJnYW1tYSIsIlNIQURFUl9GT1JXQVJESERSIiwiZ2FtbWFDb3JyZWN0aW9uIiwiR0FNTUFfU1JHQkhEUiIsIkdBTU1BX05PTkUiLCJ0b25lTWFwcGluZyIsIlRPTkVNQVBfTElORUFSIiwic2t5bWVzaCIsImN1YmVtYXAiLCJtaXAiLCJmaXhDdWJlbWFwU2VhbXMiLCJza3lib3hNaXAiLCJmaXhTZWFtcyIsInByb2Nlc3NpbmdPcHRpb25zIiwiU2hhZGVyUHJvY2Vzc29yT3B0aW9ucyIsImxpYnJhcnkiLCJnZXRQcm9ncmFtTGlicmFyeSIsInJlZ2lzdGVyIiwic2t5Ym94IiwiZ2V0UHJvZ3JhbSIsInNldFBhcmFtZXRlciIsIl9za3lib3hNaXAiLCJjdWxsIiwiQ1VMTEZBQ0VfRlJPTlQiLCJkZXB0aFdyaXRlIiwic2t5TGF5ZXIiLCJsYXllcnMiLCJnZXRMYXllckJ5SWQiLCJMQVlFUklEX1NLWUJPWCIsIm1lc2giLCJTa3lHZW9tZXRyeSIsImNyZWF0ZSIsIk1lc2hJbnN0YW5jZSIsInBpY2siLCJhZGRNZXNoSW5zdGFuY2VzIiwiZGVzdHJveSIsInJlbW92ZU1lc2hJbnN0YW5jZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxPQUFPLENBQUM7QUFRVjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRTtBQWRoRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBSkksSUFLQUMsQ0FBQUEsWUFBWSxHQUFHLElBQUksQ0FBQTtBQVdmLElBQUEsTUFBTUMsUUFBUSxHQUFHLElBQUlDLFFBQVEsRUFBRSxDQUFBO0FBRS9CRCxJQUFBQSxRQUFRLENBQUNFLGdCQUFnQixHQUFHLFVBQVVDLEdBQUcsRUFBRUMsRUFBRSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxZQUFZLEVBQUVDLGlCQUFpQixFQUFFQyxtQkFBbUIsRUFBRTtBQUVySCxNQUFBLE1BQU1DLE9BQU8sR0FBRztBQUNaSixRQUFBQSxJQUFJLEVBQUVBLElBQUk7UUFDVkssUUFBUSxFQUFFZixPQUFPLENBQUNlLFFBQVE7UUFDMUJDLFlBQVksRUFBRWxCLEtBQUssQ0FBQ21CLGVBQWUsS0FBSyxDQUFDLElBQUluQixLQUFLLENBQUNvQixhQUFhO0FBQ2hFQyxRQUFBQSxLQUFLLEVBQUdULElBQUksS0FBS1UsaUJBQWlCLEdBQUl0QixLQUFLLENBQUN1QixlQUFlLEdBQUdDLGFBQWEsR0FBR0MsVUFBVSxHQUFJekIsS0FBSyxDQUFDdUIsZUFBZ0I7UUFDbEhHLFdBQVcsRUFBR2QsSUFBSSxLQUFLVSxpQkFBaUIsR0FBR0ssY0FBYyxHQUFHM0IsS0FB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
