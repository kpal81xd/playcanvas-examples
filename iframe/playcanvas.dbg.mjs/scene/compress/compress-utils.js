class CompressUtils {
  /**
   * Set position, rotation and scale of an entity using compressed scene format.
   *
   * @param {import('../../framework/entity.js').Entity} entity - The entity.
   * @param {object} data - Json entity data from a compressed scene.
   * @param {object} compressed - Compression metadata.
   */
  static setCompressedPRS(entity, data, compressed) {
    const a = compressed.singleVecs;
    let b, i;
    const v = data.___1;
    if (!v) {
      b = compressed.tripleVecs;
      i = data.___2;
    }
    let n = v ? v[0] : b[i];
    entity.setLocalPosition(a[n], a[n + 1], a[n + 2]);
    n = v ? v[1] : b[i + 1];
    entity.setLocalEulerAngles(a[n], a[n + 1], a[n + 2]);
    n = v ? v[2] : b[i + 2];
    entity.setLocalScale(a[n], a[n + 1], a[n + 2]);
  }

  /**
   * Retrieve the original field name (key) for a single character key from a compressed entity.
   *
   * @param {string} s - The compressed key string.
   * @param {object} data - Compression metadata.
   * @returns {string} The original key.
   */
  static oneCharToKey(s, data) {
    const i = s.charCodeAt(0) - data.fieldFirstCode;
    return data.fieldArray[i];
  }

  /**
   * Retrieve the original field name (key) for a multi-character key from a compressed entity.
   *
   * @param {string} s - The compressed key string.
   * @param {object} data - Compression metadata.
   * @returns {string} The original key.
   */
  static multCharToKey(s, data) {
    let ind = 0;
    for (let i = 0; i < s.length; i++) {
      ind = ind * data.fieldCodeBase + s.charCodeAt(i) - data.fieldFirstCode;
    }
    return data.fieldArray[ind];
  }
}

export { CompressUtils };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHJlc3MtdXRpbHMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZS9jb21wcmVzcy9jb21wcmVzcy11dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDb21wcmVzc1V0aWxzIHtcbiAgICAvKipcbiAgICAgKiBTZXQgcG9zaXRpb24sIHJvdGF0aW9uIGFuZCBzY2FsZSBvZiBhbiBlbnRpdHkgdXNpbmcgY29tcHJlc3NlZCBzY2VuZSBmb3JtYXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vZnJhbWV3b3JrL2VudGl0eS5qcycpLkVudGl0eX0gZW50aXR5IC0gVGhlIGVudGl0eS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEpzb24gZW50aXR5IGRhdGEgZnJvbSBhIGNvbXByZXNzZWQgc2NlbmUuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbXByZXNzZWQgLSBDb21wcmVzc2lvbiBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICBzdGF0aWMgc2V0Q29tcHJlc3NlZFBSUyhlbnRpdHksIGRhdGEsIGNvbXByZXNzZWQpIHtcbiAgICAgICAgY29uc3QgYSA9IGNvbXByZXNzZWQuc2luZ2xlVmVjcztcblxuICAgICAgICBsZXQgYiwgaTtcblxuICAgICAgICBjb25zdCB2ID0gZGF0YS5fX18xO1xuXG4gICAgICAgIGlmICghdikge1xuICAgICAgICAgICAgYiA9IGNvbXByZXNzZWQudHJpcGxlVmVjcztcblxuICAgICAgICAgICAgaSA9IGRhdGEuX19fMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBuID0gdiA/IHZbMF0gOiBiW2ldO1xuXG4gICAgICAgIGVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKGFbbl0sIGFbbiArIDFdLCBhW24gKyAyXSk7XG5cbiAgICAgICAgbiA9IHYgPyB2WzFdIDogYltpICsgMV07XG5cbiAgICAgICAgZW50aXR5LnNldExvY2FsRXVsZXJBbmdsZXMoYVtuXSwgYVtuICsgMV0sIGFbbiArIDJdKTtcblxuICAgICAgICBuID0gdiA/IHZbMl0gOiBiW2kgKyAyXTtcblxuICAgICAgICBlbnRpdHkuc2V0TG9jYWxTY2FsZShhW25dLCBhW24gKyAxXSwgYVtuICsgMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBvcmlnaW5hbCBmaWVsZCBuYW1lIChrZXkpIGZvciBhIHNpbmdsZSBjaGFyYWN0ZXIga2V5IGZyb20gYSBjb21wcmVzc2VkIGVudGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gVGhlIGNvbXByZXNzZWQga2V5IHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIENvbXByZXNzaW9uIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBvcmlnaW5hbCBrZXkuXG4gICAgICovXG4gICAgc3RhdGljIG9uZUNoYXJUb0tleShzLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IGkgPSBzLmNoYXJDb2RlQXQoMCkgLSBkYXRhLmZpZWxkRmlyc3RDb2RlO1xuXG4gICAgICAgIHJldHVybiBkYXRhLmZpZWxkQXJyYXlbaV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIG9yaWdpbmFsIGZpZWxkIG5hbWUgKGtleSkgZm9yIGEgbXVsdGktY2hhcmFjdGVyIGtleSBmcm9tIGEgY29tcHJlc3NlZCBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBjb21wcmVzc2VkIGtleSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBDb21wcmVzc2lvbiBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgb3JpZ2luYWwga2V5LlxuICAgICAqL1xuICAgIHN0YXRpYyBtdWx0Q2hhclRvS2V5KHMsIGRhdGEpIHtcbiAgICAgICAgbGV0IGluZCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbmQgPSBpbmQgKiBkYXRhLmZpZWxkQ29kZUJhc2UgKyBzLmNoYXJDb2RlQXQoaSkgLSBkYXRhLmZpZWxkRmlyc3RDb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGEuZmllbGRBcnJheVtpbmRdO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQ29tcHJlc3NVdGlscyB9O1xuIl0sIm5hbWVzIjpbIkNvbXByZXNzVXRpbHMiLCJzZXRDb21wcmVzc2VkUFJTIiwiZW50aXR5IiwiZGF0YSIsImNvbXByZXNzZWQiLCJhIiwic2luZ2xlVmVjcyIsImIiLCJpIiwidiIsIl9fXzEiLCJ0cmlwbGVWZWNzIiwiX19fMiIsIm4iLCJzZXRMb2NhbFBvc2l0aW9uIiwic2V0TG9jYWxFdWxlckFuZ2xlcyIsInNldExvY2FsU2NhbGUiLCJvbmVDaGFyVG9LZXkiLCJzIiwiY2hhckNvZGVBdCIsImZpZWxkRmlyc3RDb2RlIiwiZmllbGRBcnJheSIsIm11bHRDaGFyVG9LZXkiLCJpbmQiLCJsZW5ndGgiLCJmaWVsZENvZGVCYXNlIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxhQUFhLENBQUM7QUFDaEI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSSxFQUFBLE9BQU9DLGdCQUFnQkEsQ0FBQ0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRTtBQUM5QyxJQUFBLE1BQU1DLENBQUMsR0FBR0QsVUFBVSxDQUFDRSxVQUFVLENBQUE7SUFFL0IsSUFBSUMsQ0FBQyxFQUFFQyxDQUFDLENBQUE7QUFFUixJQUFBLE1BQU1DLENBQUMsR0FBR04sSUFBSSxDQUFDTyxJQUFJLENBQUE7SUFFbkIsSUFBSSxDQUFDRCxDQUFDLEVBQUU7TUFDSkYsQ0FBQyxHQUFHSCxVQUFVLENBQUNPLFVBQVUsQ0FBQTtNQUV6QkgsQ0FBQyxHQUFHTCxJQUFJLENBQUNTLElBQUksQ0FBQTtBQUNqQixLQUFBO0FBRUEsSUFBQSxJQUFJQyxDQUFDLEdBQUdKLENBQUMsR0FBR0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHRixDQUFDLENBQUNDLENBQUMsQ0FBQyxDQUFBO0lBRXZCTixNQUFNLENBQUNZLGdCQUFnQixDQUFDVCxDQUFDLENBQUNRLENBQUMsQ0FBQyxFQUFFUixDQUFDLENBQUNRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRVIsQ0FBQyxDQUFDUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUVqREEsSUFBQUEsQ0FBQyxHQUFHSixDQUFDLEdBQUdBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBR0YsQ0FBQyxDQUFDQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFdkJOLE1BQU0sQ0FBQ2EsbUJBQW1CLENBQUNWLENBQUMsQ0FBQ1EsQ0FBQyxDQUFDLEVBQUVSLENBQUMsQ0FBQ1EsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFUixDQUFDLENBQUNRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBRXBEQSxJQUFBQSxDQUFDLEdBQUdKLENBQUMsR0FBR0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHRixDQUFDLENBQUNDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV2Qk4sTUFBTSxDQUFDYyxhQUFhLENBQUNYLENBQUMsQ0FBQ1EsQ0FBQyxDQUFDLEVBQUVSLENBQUMsQ0FBQ1EsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFUixDQUFDLENBQUNRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xELEdBQUE7O0FBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSSxFQUFBLE9BQU9JLFlBQVlBLENBQUNDLENBQUMsRUFBRWYsSUFBSSxFQUFFO0lBQ3pCLE1BQU1LLENBQUMsR0FBR1UsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUdoQixJQUFJLENBQUNpQixjQUFjLENBQUE7QUFFL0MsSUFBQSxPQUFPakIsSUFBSSxDQUFDa0IsVUFBVSxDQUFDYixDQUFDLENBQUMsQ0FBQTtBQUM3QixHQUFBOztBQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0ksRUFBQSxPQUFPYyxhQUFhQSxDQUFDSixDQUFDLEVBQUVmLElBQUksRUFBRTtJQUMxQixJQUFJb0IsR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUVYLElBQUEsS0FBSyxJQUFJZixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdVLENBQUMsQ0FBQ00sTUFBTSxFQUFFaEIsQ0FBQyxFQUFFLEVBQUU7QUFDL0JlLE1BQUFBLEdBQUcsR0FBR0EsR0FBRyxHQUFHcEIsSUFBSSxDQUFDc0IsYUFBYSxHQUFHUCxDQUFDLENBQUNDLFVBQVUsQ0FBQ1gsQ0FBQyxDQUFDLEdBQUdMLElBQUksQ0FBQ2lCLGNBQWMsQ0FBQTtBQUMxRSxLQUFBO0FBRUEsSUFBQSxPQUFPakIsSUFBSSxDQUFDa0IsVUFBVSxDQUFDRSxHQUFHLENBQUMsQ0FBQTtBQUMvQixHQUFBO0FBQ0o7Ozs7In0=
