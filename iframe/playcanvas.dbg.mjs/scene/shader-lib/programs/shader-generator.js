import { GAMMA_SRGB, GAMMA_SRGBFAST, GAMMA_SRGBHDR, TONEMAP_FILMIC, TONEMAP_LINEAR, TONEMAP_HEJL, TONEMAP_ACES, TONEMAP_ACES2 } from '../../constants.js';
import { shaderChunks } from '../chunks/chunks.js';

class ShaderGenerator {
  static begin() {
    return 'void main(void)\n{\n';
  }
  static end() {
    return '}\n';
  }
  static skinCode(device, chunks = shaderChunks) {
    if (device.supportsBoneTextures) {
      return chunks.skinTexVS;
    }
    return "#define BONE_LIMIT " + device.getBoneLimit() + "\n" + chunks.skinConstVS;
  }
  static fogCode(value, chunks = shaderChunks) {
    if (value === 'linear') {
      return chunks.fogLinearPS ? chunks.fogLinearPS : shaderChunks.fogLinearPS;
    } else if (value === 'exp') {
      return chunks.fogExpPS ? chunks.fogExpPS : shaderChunks.fogExpPS;
    } else if (value === 'exp2') {
      return chunks.fogExp2PS ? chunks.fogExp2PS : shaderChunks.fogExp2PS;
    }
    return chunks.fogNonePS ? chunks.fogNonePS : shaderChunks.fogNonePS;
  }
  static gammaCode(value, chunks = shaderChunks) {
    if (value === GAMMA_SRGB || value === GAMMA_SRGBFAST) {
      return chunks.gamma2_2PS ? chunks.gamma2_2PS : shaderChunks.gamma2_2PS;
    } else if (value === GAMMA_SRGBHDR) {
      return "#define HDR\n" + (chunks.gamma2_2PS ? chunks.gamma2_2PS : shaderChunks.gamma2_2PS);
    }
    return chunks.gamma1_0PS ? chunks.gamma1_0PS : shaderChunks.gamma1_0PS;
  }
  static tonemapCode(value, chunks = shaderChunks) {
    if (value === TONEMAP_FILMIC) {
      return chunks.tonemappingFilmicPS ? chunks.tonemappingFilmicPS : shaderChunks.tonemappingFilmicPS;
    } else if (value === TONEMAP_LINEAR) {
      return chunks.tonemappingLinearPS ? chunks.tonemappingLinearPS : shaderChunks.tonemappingLinearPS;
    } else if (value === TONEMAP_HEJL) {
      return chunks.tonemappingHejlPS ? chunks.tonemappingHejlPS : shaderChunks.tonemappingHejlPS;
    } else if (value === TONEMAP_ACES) {
      return chunks.tonemappingAcesPS ? chunks.tonemappingAcesPS : shaderChunks.tonemappingAcesPS;
    } else if (value === TONEMAP_ACES2) {
      return chunks.tonemappingAces2PS ? chunks.tonemappingAces2PS : shaderChunks.tonemappingAces2PS;
    }
    return chunks.tonemapingNonePS ? chunks.tonemapingNonePS : shaderChunks.tonemappingNonePS;
  }
}

export { ShaderGenerator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZGVyLWdlbmVyYXRvci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3NjZW5lL3NoYWRlci1saWIvcHJvZ3JhbXMvc2hhZGVyLWdlbmVyYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEdBTU1BX1NSR0IsIEdBTU1BX1NSR0JGQVNULCBHQU1NQV9TUkdCSERSLFxuICAgIFRPTkVNQVBfQUNFUywgVE9ORU1BUF9BQ0VTMiwgVE9ORU1BUF9GSUxNSUMsIFRPTkVNQVBfSEVKTCwgVE9ORU1BUF9MSU5FQVJcbn0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHNoYWRlckNodW5rcyB9IGZyb20gJy4uL2NodW5rcy9jaHVua3MuanMnO1xuXG5jbGFzcyBTaGFkZXJHZW5lcmF0b3Ige1xuICAgIHN0YXRpYyBiZWdpbigpIHtcbiAgICAgICAgcmV0dXJuICd2b2lkIG1haW4odm9pZClcXG57XFxuJztcbiAgICB9XG5cbiAgICBzdGF0aWMgZW5kKCkge1xuICAgICAgICByZXR1cm4gJ31cXG4nO1xuICAgIH1cblxuICAgIHN0YXRpYyBza2luQ29kZShkZXZpY2UsIGNodW5rcyA9IHNoYWRlckNodW5rcykge1xuICAgICAgICBpZiAoZGV2aWNlLnN1cHBvcnRzQm9uZVRleHR1cmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2h1bmtzLnNraW5UZXhWUztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCIjZGVmaW5lIEJPTkVfTElNSVQgXCIgKyBkZXZpY2UuZ2V0Qm9uZUxpbWl0KCkgKyBcIlxcblwiICsgY2h1bmtzLnNraW5Db25zdFZTO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb2dDb2RlKHZhbHVlLCBjaHVua3MgPSBzaGFkZXJDaHVua3MpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnbGluZWFyJykge1xuICAgICAgICAgICAgcmV0dXJuIGNodW5rcy5mb2dMaW5lYXJQUyA/IGNodW5rcy5mb2dMaW5lYXJQUyA6IHNoYWRlckNodW5rcy5mb2dMaW5lYXJQUztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ2V4cCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjaHVua3MuZm9nRXhwUFMgPyBjaHVua3MuZm9nRXhwUFMgOiBzaGFkZXJDaHVua3MuZm9nRXhwUFM7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdleHAyJykge1xuICAgICAgICAgICAgcmV0dXJuIGNodW5rcy5mb2dFeHAyUFMgPyBjaHVua3MuZm9nRXhwMlBTIDogc2hhZGVyQ2h1bmtzLmZvZ0V4cDJQUztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2h1bmtzLmZvZ05vbmVQUyA/IGNodW5rcy5mb2dOb25lUFMgOiBzaGFkZXJDaHVua3MuZm9nTm9uZVBTO1xuICAgIH1cblxuICAgIHN0YXRpYyBnYW1tYUNvZGUodmFsdWUsIGNodW5rcyA9IHNoYWRlckNodW5rcykge1xuICAgICAgICBpZiAodmFsdWUgPT09IEdBTU1BX1NSR0IgfHwgdmFsdWUgPT09IEdBTU1BX1NSR0JGQVNUKSB7XG4gICAgICAgICAgICByZXR1cm4gY2h1bmtzLmdhbW1hMl8yUFMgPyBjaHVua3MuZ2FtbWEyXzJQUyA6IHNoYWRlckNodW5rcy5nYW1tYTJfMlBTO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBHQU1NQV9TUkdCSERSKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIjZGVmaW5lIEhEUlxcblwiICsgKGNodW5rcy5nYW1tYTJfMlBTID8gY2h1bmtzLmdhbW1hMl8yUFMgOiBzaGFkZXJDaHVua3MuZ2FtbWEyXzJQUyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNodW5rcy5nYW1tYTFfMFBTID8gY2h1bmtzLmdhbW1hMV8wUFMgOiBzaGFkZXJDaHVua3MuZ2FtbWExXzBQUztcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9uZW1hcENvZGUodmFsdWUsIGNodW5rcyA9IHNoYWRlckNodW5rcykge1xuICAgICAgICBpZiAodmFsdWUgPT09IFRPTkVNQVBfRklMTUlDKSB7XG4gICAgICAgICAgICByZXR1cm4gY2h1bmtzLnRvbmVtYXBwaW5nRmlsbWljUFMgPyBjaHVua3MudG9uZW1hcHBpbmdGaWxtaWNQUyA6IHNoYWRlckNodW5rcy50b25lbWFwcGluZ0ZpbG1pY1BTO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBUT05FTUFQX0xJTkVBUikge1xuICAgICAgICAgICAgcmV0dXJuIGNodW5rcy50b25lbWFwcGluZ0xpbmVhclBTID8gY2h1bmtzLnRvbmVtYXBwaW5nTGluZWFyUFMgOiBzaGFkZXJDaHVua3MudG9uZW1hcHBpbmdMaW5lYXJQUztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gVE9ORU1BUF9IRUpMKSB7XG4gICAgICAgICAgICByZXR1cm4gY2h1bmtzLnRvbmVtYXBwaW5nSGVqbFBTID8gY2h1bmtzLnRvbmVtYXBwaW5nSGVqbFBTIDogc2hhZGVyQ2h1bmtzLnRvbmVtYXBwaW5nSGVqbFBTO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBUT05FTUFQX0FDRVMpIHtcbiAgICAgICAgICAgIHJldHVybiBjaHVua3MudG9uZW1hcHBpbmdBY2VzUFMgPyBjaHVua3MudG9uZW1hcHBpbmdBY2VzUFMgOiBzaGFkZXJDaHVua3MudG9uZW1hcHBpbmdBY2VzUFM7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFRPTkVNQVBfQUNFUzIpIHtcbiAgICAgICAgICAgIHJldHVybiBjaHVua3MudG9uZW1hcHBpbmdBY2VzMlBTID8gY2h1bmtzLnRvbmVtYXBwaW5nQWNlczJQUyA6IHNoYWRlckNodW5rcy50b25lbWFwcGluZ0FjZXMyUFM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNodW5rcy50b25lbWFwaW5nTm9uZVBTID8gY2h1bmtzLnRvbmVtYXBpbmdOb25lUFMgOiBzaGFkZXJDaHVua3MudG9uZW1hcHBpbmdOb25lUFM7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTaGFkZXJHZW5lcmF0b3IgfTtcbiJdLCJuYW1lcyI6WyJTaGFkZXJHZW5lcmF0b3IiLCJiZWdpbiIsImVuZCIsInNraW5Db2RlIiwiZGV2aWNlIiwiY2h1bmtzIiwic2hhZGVyQ2h1bmtzIiwic3VwcG9ydHNCb25lVGV4dHVyZXMiLCJza2luVGV4VlMiLCJnZXRCb25lTGltaXQiLCJza2luQ29uc3RWUyIsImZvZ0NvZGUiLCJ2YWx1ZSIsImZvZ0xpbmVhclBTIiwiZm9nRXhwUFMiLCJmb2dFeHAyUFMiLCJmb2dOb25lUFMiLCJnYW1tYUNvZGUiLCJHQU1NQV9TUkdCIiwiR0FNTUFfU1JHQkZBU1QiLCJnYW1tYTJfMlBTIiwiR0FNTUFfU1JHQkhEUiIsImdhbW1hMV8wUFMiLCJ0b25lbWFwQ29kZSIsIlRPTkVNQVBfRklMTUlDIiwidG9uZW1hcHBpbmdGaWxtaWNQUyIsIlRPTkVNQVBfTElORUFSIiwidG9uZW1hcHBpbmdMaW5lYXJQUyIsIlRPTkVNQVBfSEVKTCIsInRvbmVtYXBwaW5nSGVqbFBTIiwiVE9ORU1BUF9BQ0VTIiwidG9uZW1hcHBpbmdBY2VzUFMiLCJUT05FTUFQX0FDRVMyIiwidG9uZW1hcHBpbmdBY2VzMlBTIiwidG9uZW1hcGluZ05vbmVQUyIsInRvbmVtYXBwaW5nTm9uZVBTIl0sIm1hcHBpbmdzIjoiOzs7QUFNQSxNQUFNQSxlQUFlLENBQUM7RUFDbEIsT0FBT0MsS0FBS0EsR0FBRztBQUNYLElBQUEsT0FBTyxzQkFBc0IsQ0FBQTtBQUNqQyxHQUFBO0VBRUEsT0FBT0MsR0FBR0EsR0FBRztBQUNULElBQUEsT0FBTyxLQUFLLENBQUE7QUFDaEIsR0FBQTtBQUVBLEVBQUEsT0FBT0MsUUFBUUEsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEdBQUdDLFlBQVksRUFBRTtJQUMzQyxJQUFJRixNQUFNLENBQUNHLG9CQUFvQixFQUFFO01BQzdCLE9BQU9GLE1BQU0sQ0FBQ0csU0FBUyxDQUFBO0FBQzNCLEtBQUE7QUFDQSxJQUFBLE9BQU8scUJBQXFCLEdBQUdKLE1BQU0sQ0FBQ0ss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
