import { ShaderUtils } from '../../../platform/graphics/shader-utils.js';
import { BLEND_NORMAL, BLEND_ADDITIVE, BLEND_MULTIPLICATIVE } from '../../constants.js';
import { shaderChunks } from '../chunks/chunks.js';
import { ShaderGenerator } from './shader-generator.js';

class ShaderGeneratorParticle extends ShaderGenerator {
  generateKey(options) {
    let key = "particle";
    for (const prop in options) {
      if (options.hasOwnProperty(prop)) {
        key += options[prop];
      }
    }
    return key;
  }
  _animTex(options) {
    let vshader = "";
    vshader += options.animTexLoop ? shaderChunks.particleAnimFrameLoopVS : shaderChunks.particleAnimFrameClampVS;
    vshader += shaderChunks.particleAnimTexVS;
    return vshader;
  }
  createShaderDefinition(device, options) {
    const executionDefine = `#define PARTICLE_${options.useCpu ? 'CPU' : 'GPU'}\n`;
    let fshader = '#define PARTICLE\n' + executionDefine;
    let vshader = "#define VERTEXSHADER\n" + executionDefine;
    if (options.mesh) vshader += "#define USE_MESH\n";
    if (options.localSpace) vshader += "#define LOCAL_SPACE\n";
    if (options.screenSpace) vshader += "#define SCREEN_SPACE\n";
    if (options.animTex) vshader += "\nuniform vec2 animTexTilesParams;\n";
    if (options.animTex) vshader += "\nuniform vec4 animTexParams;\n";
    if (options.animTex) vshader += "\nuniform vec2 animTexIndexParams;\n";
    if (options.normal === 2) vshader += "\nvarying mat3 ParticleMat;\n";
    if (options.normal === 1) vshader += "\nvarying vec3 Normal;\n";
    if (options.soft) vshader += "\nvarying float vDepth;\n";
    const faceVS = options.customFace ? shaderChunks.particle_customFaceVS : shaderChunks.particle_billboardVS;
    if (!options.useCpu) {
      vshader += shaderChunks.particle_initVS;
      vshader += options.pack8 ? shaderChunks.particleInputRgba8PS : shaderChunks.particleInputFloatPS;
      if (options.soft > 0) vshader += shaderChunks.screenDepthPS;
      vshader += shaderChunks.particleVS;
      if (options.localSpace) vshader += shaderChunks.particle_localShiftVS;
      if (options.animTex) vshader += this._animTex(options);
      if (options.wrap) vshader += shaderChunks.particle_wrapVS;
      if (options.alignToMotion) vshader += shaderChunks.particle_pointAlongVS;
      vshader += options.mesh ? shaderChunks.particle_meshVS : faceVS;
      if (options.normal === 1) vshader += shaderChunks.particle_normalVS;
      if (options.normal === 2) vshader += shaderChunks.particle_TBNVS;
      if (options.stretch > 0.0) vshader += shaderChunks.particle_stretchVS;
      vshader += shaderChunks.particle_endVS;
      if (options.soft > 0) vshader += shaderChunks.particle_softVS;
    } else {
      if (options.soft > 0) vshader += shaderChunks.screenDepthPS;
      vshader += shaderChunks.particle_cpuVS;
      if (options.localSpace) vshader += shaderChunks.particle_localShiftVS;
      if (options.animTex) vshader += this._animTex(options);
      // if (options.wrap) vshader += shaderChunks.particle_wrapVS;
      if (options.alignToMotion) vshader += shaderChunks.particle_pointAlongVS;
      vshader += options.mesh ? shaderChunks.particle_meshVS : faceVS;
      if (options.normal === 1) vshader += shaderChunks.particle_normalVS;
      if (options.normal === 2) vshader += shaderChunks.particle_TBNVS;
      if (options.stretch > 0.0) vshader += shaderChunks.particle_stretchVS;
      vshader += shaderChunks.particle_cpu_endVS;
      if (options.soft > 0) vshader += shaderChunks.particle_softVS;
    }
    vshader += "}\n";
    if (options.normal > 0) {
      if (options.normal === 1) {
        fshader += "\nvarying vec3 Normal;\n";
      } else if (options.normal === 2) {
        fshader += "\nvarying mat3 ParticleMat;\n";
      }
      fshader += "\nuniform vec3 lightCube[6];\n";
    }
    if (options.soft) fshader += "\nvarying float vDepth;\n";
    if (options.normal === 0 && options.fog === "none") options.srgb = false; // don't have to perform all gamma conversions when no lighting and fogging is used
    fshader += shaderChunks.decodePS;
    fshader += ShaderGenerator.gammaCode(options.gamma);
    fshader += ShaderGenerator.tonemapCode(options.toneMap);
    if (options.fog === 'linear') {
      fshader += shaderChunks.fogLinearPS;
    } else if (options.fog === 'exp') {
      fshader += shaderChunks.fogExpPS;
    } else if (options.fog === 'exp2') {
      fshader += shaderChunks.fogExp2PS;
    } else {
      fshader += shaderChunks.fogNonePS;
    }
    if (options.normal === 2) fshader += "\nuniform sampler2D normalMap;\n";
    if (options.soft > 0) fshader += shaderChunks.screenDepthPS;
    fshader += shaderChunks.particlePS;
    if (options.soft > 0) fshader += shaderChunks.particle_softPS;
    if (options.normal === 1) fshader += "\nvec3 normal = Normal;\n";
    if (options.normal === 2) fshader += shaderChunks.particle_normalMapPS;
    if (options.normal > 0) fshader += options.halflambert ? shaderChunks.particle_halflambertPS : shaderChunks.particle_lambertPS;
    if (options.normal > 0) fshader += shaderChunks.particle_lightingPS;
    if (options.blend === BLEND_NORMAL) {
      fshader += shaderChunks.particle_blendNormalPS;
    } else if (options.blend === BLEND_ADDITIVE) {
      fshader += shaderChunks.particle_blendAddPS;
    } else if (options.blend === BLEND_MULTIPLICATIVE) {
      fshader += shaderChunks.particle_blendMultiplyPS;
    }
    fshader += shaderChunks.particle_endPS;
    return ShaderUtils.createDefinition(device, {
      name: 'ParticleShader',
      vertexCode: vshader,
      fragmentCode: fshader
    });
  }
}
const particle = new ShaderGeneratorParticle();

export { particle };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljbGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZS9zaGFkZXItbGliL3Byb2dyYW1zL3BhcnRpY2xlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNoYWRlclV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3Mvc2hhZGVyLXV0aWxzLmpzJztcbmltcG9ydCB7IEJMRU5EX0FERElUSVZFLCBCTEVORF9NVUxUSVBMSUNBVElWRSwgQkxFTkRfTk9STUFMIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHNoYWRlckNodW5rcyB9IGZyb20gJy4uL2NodW5rcy9jaHVua3MuanMnO1xuaW1wb3J0IHsgU2hhZGVyR2VuZXJhdG9yIH0gZnJvbSAnLi9zaGFkZXItZ2VuZXJhdG9yLmpzJztcblxuY2xhc3MgU2hhZGVyR2VuZXJhdG9yUGFydGljbGUgZXh0ZW5kcyBTaGFkZXJHZW5lcmF0b3Ige1xuICAgIGdlbmVyYXRlS2V5KG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGtleSA9IFwicGFydGljbGVcIjtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAga2V5ICs9IG9wdGlvbnNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG5cbiAgICBfYW5pbVRleChvcHRpb25zKSB7XG4gICAgICAgIGxldCB2c2hhZGVyID0gXCJcIjtcbiAgICAgICAgdnNoYWRlciArPSBvcHRpb25zLmFuaW1UZXhMb29wID8gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlQW5pbUZyYW1lTG9vcFZTIDogc2hhZGVyQ2h1bmtzLnBhcnRpY2xlQW5pbUZyYW1lQ2xhbXBWUztcbiAgICAgICAgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVBbmltVGV4VlM7XG4gICAgICAgIHJldHVybiB2c2hhZGVyO1xuICAgIH1cblxuICAgIGNyZWF0ZVNoYWRlckRlZmluaXRpb24oZGV2aWNlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgY29uc3QgZXhlY3V0aW9uRGVmaW5lID0gYCNkZWZpbmUgUEFSVElDTEVfJHtvcHRpb25zLnVzZUNwdSA/ICdDUFUnIDogJ0dQVSd9XFxuYDtcblxuICAgICAgICBsZXQgZnNoYWRlciA9ICcjZGVmaW5lIFBBUlRJQ0xFXFxuJyArIGV4ZWN1dGlvbkRlZmluZTtcbiAgICAgICAgbGV0IHZzaGFkZXIgPSBcIiNkZWZpbmUgVkVSVEVYU0hBREVSXFxuXCIgKyBleGVjdXRpb25EZWZpbmU7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWVzaCkgdnNoYWRlciArPSBcIiNkZWZpbmUgVVNFX01FU0hcXG5cIjtcbiAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxTcGFjZSkgdnNoYWRlciArPSBcIiNkZWZpbmUgTE9DQUxfU1BBQ0VcXG5cIjtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NyZWVuU3BhY2UpIHZzaGFkZXIgKz0gXCIjZGVmaW5lIFNDUkVFTl9TUEFDRVxcblwiO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1UZXgpIHZzaGFkZXIgKz0gXCJcXG51bmlmb3JtIHZlYzIgYW5pbVRleFRpbGVzUGFyYW1zO1xcblwiO1xuICAgICAgICBpZiAob3B0aW9ucy5hbmltVGV4KSB2c2hhZGVyICs9IFwiXFxudW5pZm9ybSB2ZWM0IGFuaW1UZXhQYXJhbXM7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1UZXgpIHZzaGFkZXIgKz0gXCJcXG51bmlmb3JtIHZlYzIgYW5pbVRleEluZGV4UGFyYW1zO1xcblwiO1xuICAgICAgICBpZiAob3B0aW9ucy5ub3JtYWwgPT09IDIpIHZzaGFkZXIgKz0gXCJcXG52YXJ5aW5nIG1hdDMgUGFydGljbGVNYXQ7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA9PT0gMSkgdnNoYWRlciArPSBcIlxcbnZhcnlpbmcgdmVjMyBOb3JtYWw7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLnNvZnQpIHZzaGFkZXIgKz0gXCJcXG52YXJ5aW5nIGZsb2F0IHZEZXB0aDtcXG5cIjtcblxuICAgICAgICBjb25zdCBmYWNlVlMgPSBvcHRpb25zLmN1c3RvbUZhY2UgPyBzaGFkZXJDaHVua3MucGFydGljbGVfY3VzdG9tRmFjZVZTIDogc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2JpbGxib2FyZFZTO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy51c2VDcHUpIHtcbiAgICAgICAgICAgIHZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2luaXRWUztcbiAgICAgICAgICAgIHZzaGFkZXIgKz0gKG9wdGlvbnMucGFjazggPyBzaGFkZXJDaHVua3MucGFydGljbGVJbnB1dFJnYmE4UFMgOiBzaGFkZXJDaHVua3MucGFydGljbGVJbnB1dEZsb2F0UFMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc29mdCA+IDApIHZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNjcmVlbkRlcHRoUFM7XG4gICAgICAgICAgICB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxTcGFjZSkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfbG9jYWxTaGlmdFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbVRleCkgdnNoYWRlciArPSB0aGlzLl9hbmltVGV4KG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMud3JhcCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfd3JhcFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxpZ25Ub01vdGlvbikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfcG9pbnRBbG9uZ1ZTO1xuICAgICAgICAgICAgdnNoYWRlciArPSBvcHRpb25zLm1lc2ggPyBzaGFkZXJDaHVua3MucGFydGljbGVfbWVzaFZTIDogZmFjZVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAxKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ub3JtYWxWUztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA9PT0gMikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfVEJOVlM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJldGNoID4gMC4wKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9zdHJldGNoVlM7XG4gICAgICAgICAgICB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9lbmRWUztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNvZnQgPiAwKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9zb2Z0VlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zb2Z0ID4gMCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3Muc2NyZWVuRGVwdGhQUztcbiAgICAgICAgICAgIHZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2NwdVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxTcGFjZSkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfbG9jYWxTaGlmdFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbVRleCkgdnNoYWRlciArPSB0aGlzLl9hbmltVGV4KG9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gaWYgKG9wdGlvbnMud3JhcCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfd3JhcFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxpZ25Ub01vdGlvbikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfcG9pbnRBbG9uZ1ZTO1xuICAgICAgICAgICAgdnNoYWRlciArPSBvcHRpb25zLm1lc2ggPyBzaGFkZXJDaHVua3MucGFydGljbGVfbWVzaFZTIDogZmFjZVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAxKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ub3JtYWxWUztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA9PT0gMikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfVEJOVlM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJldGNoID4gMC4wKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9zdHJldGNoVlM7XG4gICAgICAgICAgICB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9jcHVfZW5kVlM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zb2Z0ID4gMCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfc29mdFZTO1xuICAgICAgICB9XG4gICAgICAgIHZzaGFkZXIgKz0gXCJ9XFxuXCI7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID4gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZnNoYWRlciArPSBcIlxcbnZhcnlpbmcgdmVjMyBOb3JtYWw7XFxuXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubm9ybWFsID09PSAyKSB7XG4gICAgICAgICAgICAgICAgZnNoYWRlciArPSBcIlxcbnZhcnlpbmcgbWF0MyBQYXJ0aWNsZU1hdDtcXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZzaGFkZXIgKz0gXCJcXG51bmlmb3JtIHZlYzMgbGlnaHRDdWJlWzZdO1xcblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNvZnQpIGZzaGFkZXIgKz0gXCJcXG52YXJ5aW5nIGZsb2F0IHZEZXB0aDtcXG5cIjtcblxuICAgICAgICBpZiAoKG9wdGlvbnMubm9ybWFsID09PSAwKSAmJiAob3B0aW9ucy5mb2cgPT09IFwibm9uZVwiKSkgb3B0aW9ucy5zcmdiID0gZmFsc2U7IC8vIGRvbid0IGhhdmUgdG8gcGVyZm9ybSBhbGwgZ2FtbWEgY29udmVyc2lvbnMgd2hlbiBubyBsaWdodGluZyBhbmQgZm9nZ2luZyBpcyB1c2VkXG4gICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLmRlY29kZVBTO1xuICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci5nYW1tYUNvZGUob3B0aW9ucy5nYW1tYSk7XG4gICAgICAgIGZzaGFkZXIgKz0gU2hhZGVyR2VuZXJhdG9yLnRvbmVtYXBDb2RlKG9wdGlvbnMudG9uZU1hcCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZm9nID09PSAnbGluZWFyJykge1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZm9nTGluZWFyUFM7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5mb2cgPT09ICdleHAnKSB7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5mb2dFeHBQUztcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmZvZyA9PT0gJ2V4cDInKSB7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5mb2dFeHAyUFM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5mb2dOb25lUFM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5ub3JtYWwgPT09IDIpIGZzaGFkZXIgKz0gXCJcXG51bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLnNvZnQgPiAwKSBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5zY3JlZW5EZXB0aFBTO1xuICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZVBTO1xuICAgICAgICBpZiAob3B0aW9ucy5zb2Z0ID4gMCkgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfc29mdFBTO1xuICAgICAgICBpZiAob3B0aW9ucy5ub3JtYWwgPT09IDEpIGZzaGFkZXIgKz0gXCJcXG52ZWMzIG5vcm1hbCA9IE5vcm1hbDtcXG5cIjtcbiAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAyKSBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ub3JtYWxNYXBQUztcbiAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID4gMCkgZnNoYWRlciArPSBvcHRpb25zLmhhbGZsYW1iZXJ0ID8gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2hhbGZsYW1iZXJ0UFMgOiBzaGFkZXJDaHVua3MucGFydGljbGVfbGFtYmVydFBTO1xuICAgICAgICBpZiAob3B0aW9ucy5ub3JtYWwgPiAwKSBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9saWdodGluZ1BTO1xuICAgICAgICBpZiAob3B0aW9ucy5ibGVuZCA9PT0gQkxFTkRfTk9STUFMKSB7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ibGVuZE5vcm1hbFBTO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuYmxlbmQgPT09IEJMRU5EX0FERElUSVZFKSB7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ibGVuZEFkZFBTO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuYmxlbmQgPT09IEJMRU5EX01VTFRJUExJQ0FUSVZFKSB7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ibGVuZE11bHRpcGx5UFM7XG4gICAgICAgIH1cbiAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfZW5kUFM7XG5cbiAgICAgICAgcmV0dXJuIFNoYWRlclV0aWxzLmNyZWF0ZURlZmluaXRpb24oZGV2aWNlLCB7XG4gICAgICAgICAgICBuYW1lOiAnUGFydGljbGVTaGFkZXInLFxuICAgICAgICAgICAgdmVydGV4Q29kZTogdnNoYWRlcixcbiAgICAgICAgICAgIGZyYWdtZW50Q29kZTogZnNoYWRlclxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IHBhcnRpY2xlID0gbmV3IFNoYWRlckdlbmVyYXRvclBhcnRpY2xlKCk7XG5cbmV4cG9ydCB7IHBhcnRpY2xlIH07XG4iXSwibmFtZXMiOlsiU2hhZGVyR2VuZXJhdG9yUGFydGljbGUiLCJTaGFkZXJHZW5lcmF0b3IiLCJnZW5lcmF0ZUtleSIsIm9wdGlvbnMiLCJrZXkiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJfYW5pbVRleCIsInZzaGFkZXIiLCJhbmltVGV4TG9vcCIsInNoYWRlckNodW5rcyIsInBhcnRpY2xlQW5pbUZyYW1lTG9vcFZTIiwicGFydGljbGVBbmltRnJhbWVDbGFtcFZTIiwicGFydGljbGVBbmltVGV4VlMiLCJjcmVhdGVTaGFkZXJEZWZpbml0aW9uIiwiZGV2aWNlIiwiZXhlY3V0aW9uRGVmaW5lIiwidXNlQ3B1IiwiZnNoYWRlciIsIm1lc2giLCJsb2NhbFNwYWNlIiwic2NyZWVuU3BhY2UiLCJhbmltVGV4Iiwibm9ybWFsIiwic29mdCIsImZhY2VWUyIsImN1c3RvbUZhY2UiLCJwYXJ0aWNsZV9jdXN0b21GYWNlVlMiLCJwYXJ0aWNsZV9iaWxsYm9hcmRWUyIsInBhcnRpY2xlX2luaXRWUyIsInBhY2s4IiwicGFydGljbGVJbnB1dFJnYmE4UFMiLCJwYXJ0aWNsZUlucHV0RmxvYXRQUyIsInNjcmVlbkRlcHRoUFMiLCJwYXJ0aWNsZVZTIiwicGFydGljbGVfbG9jYWxTaGlmdFZTIiwid3JhcCIsInBhcnRpY2xlX3dyYXBWUyIsImFsaWduVG9Nb3Rpb24iLCJwYXJ0aWNsZV9wb2ludEFsb25nVlMiLCJwYXJ0aWNsZV9tZXNoVlMiLCJwYXJ0aWNsZV9ub3JtYWxWUyIsInBhcnRpY2xlX1RCTlZTIiwic3RyZXRjaCIsInBhcnRpY2xlX3N0cmV0Y2hWUyIsInBhcnRpY2xlX2VuZFZTIiwicGFydGljbGVfc29mdFZTIiwicGFydGljbGVfY3B1VlMiLCJwYXJ0aWNsZV9jcHVfZW5kVlMiLCJmb2ciLCJzcmdiIiwiZGVjb2RlUFMiLCJnYW1tYUNvZGUiLCJnYW1tYSIsInRvbmVtYXBDb2RlIiwidG9uZU1hcCIsImZvZ0xpbmVhclBTIiwiZm9nRXhwUFMiLCJmb2dFeHAyUFMiLCJmb2dOb25lUFMiLCJwYXJ0aWNsZVBTIiwicGFydGljbGVfc29mdFBTIiwicGFydGljbGVfbm9ybWFsTWFwUFMiLCJoYWxmbGFtYmVydCIsInBhcnRpY2xlX2hhbGZsYW1iZXJ0UFMiLCJwYXJ0aWNsZV9sYW1iZXJ0UFMiLCJwYXJ0aWNsZV9saWdodGluZ1BTIiwiYmxlbmQiLCJCTEVORF9OT1JNQUwiLCJwYXJ0aWNsZV9ibGVuZE5vcm1hbFBTIiwiQkxFTkRfQURESVRJVkUiLCJwYXJ0aWNsZV9ibGVuZEFkZFBTIiwiQkxFTkRfTVVMVElQTElDQVRJVkUiLCJwYXJ0aWNsZV9ibGVuZE11bHRpcGx5UFMiLCJwYXJ0aWNsZV9lbmRQUyIsIlNoYWRlclV0aWxzIiwiY3JlYXRlRGVmaW5pdGlvbiIsIm5hbWUiLCJ2ZXJ0ZXhDb2RlIiwiZnJhZ21lbnRDb2RlIiwicGFydGljbGUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsTUFBTUEsdUJBQXVCLFNBQVNDLGVBQWUsQ0FBQztFQUNsREMsV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQ2pCLElBQUlDLEdBQUcsR0FBRyxVQUFVLENBQUE7QUFDcEIsSUFBQSxLQUFLLE1BQU1DLElBQUksSUFBSUYsT0FBTyxFQUFFO0FBQ3hCLE1BQUEsSUFBSUEsT0FBTyxDQUFDRyxjQUFjLENBQUNELElBQUksQ0FBQyxFQUFFO0FBQzlCRCxRQUFBQSxHQUFHLElBQUlELE9BQU8sQ0FBQ0UsSUFBSSxDQUFDLENBQUE7QUFDeEIsT0FBQTtBQUNKLEtBQUE7QUFDQSxJQUFBLE9BQU9ELEdB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
