import { SEMANTIC_POSITION } from '../../../platform/graphics/constants.js';
import { shaderChunks } from '../chunks/chunks.js';
import { ChunkUtils } from '../chunk-utils.js';
import { ShaderUtils } from '../../../platform/graphics/shader-utils.js';
import { ShaderGenerator } from './shader-generator.js';
import { SKYTYPE_INFINITE } from '../../constants.js';

class ShaderGeneratorSkybox extends ShaderGenerator {
  generateKey(options) {
    const sharedKey = `skybox-${options.type}-${options.encoding}-${options.useIntensity}-${options.gamma}-${options.toneMapping}-${options.skymesh}`;
    return sharedKey + (options.type === 'cubemap' ? `-${options.fixSeams}-${options.mip}` : '');
  }
  createShaderDefinition(device, options) {
    const defines = options.skymesh === SKYTYPE_INFINITE ? '' : '#define SKYMESH\n';
    const vshader = defines + shaderChunks.skyboxVS;
    let fshader = defines;
    if (options.type === 'cubemap') {
      const mip2size = [128, 64, /* 32 */16, 8, 4, 2];
      fshader += options.mip ? shaderChunks.fixCubemapSeamsStretchPS : shaderChunks.fixCubemapSeamsNonePS;
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += ShaderGenerator.gammaCode(options.gamma);
      fshader += ShaderGenerator.tonemapCode(options.toneMapping);
      fshader += shaderChunks.skyboxHDRPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding)).replace(/\$FIXCONST/g, 1 - 1 / mip2size[options.mip] + "");
    } else {
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += ShaderGenerator.gammaCode(options.gamma);
      fshader += ShaderGenerator.tonemapCode(options.toneMapping);
      fshader += shaderChunks.sphericalPS;
      fshader += shaderChunks.envAtlasPS;
      fshader += shaderChunks.skyboxEnvPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding));
    }
    return ShaderUtils.createDefinition(device, {
      name: 'SkyboxShader',
      attributes: {
        aPosition: SEMANTIC_POSITION
      },
      vertexCode: vshader,
      fragmentCode: fshader
    });
  }
}
const skybox = new ShaderGeneratorSkybox();

export { skybox };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2t5Ym94LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvc2hhZGVyLWxpYi9wcm9ncmFtcy9za3lib3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0VNQU5USUNfUE9TSVRJT04gfSBmcm9tICcuLi8uLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgc2hhZGVyQ2h1bmtzIH0gZnJvbSAnLi4vY2h1bmtzL2NodW5rcy5qcyc7XG5pbXBvcnQgeyBDaHVua1V0aWxzIH0gZnJvbSAnLi4vY2h1bmstdXRpbHMuanMnO1xuXG5pbXBvcnQgeyBTaGFkZXJVdGlscyB9IGZyb20gJy4uLy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL3NoYWRlci11dGlscy5qcyc7XG5pbXBvcnQgeyBTaGFkZXJHZW5lcmF0b3IgfSBmcm9tICcuL3NoYWRlci1nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgU0tZVFlQRV9JTkZJTklURSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbmNsYXNzIFNoYWRlckdlbmVyYXRvclNreWJveCBleHRlbmRzIFNoYWRlckdlbmVyYXRvciB7XG4gICAgZ2VuZXJhdGVLZXkob3B0aW9ucykge1xuICAgICAgICBjb25zdCBzaGFyZWRLZXkgPSBgc2t5Ym94LSR7b3B0aW9ucy50eXBlfS0ke29wdGlvbnMuZW5jb2Rpbmd9LSR7b3B0aW9ucy51c2VJbnRlbnNpdHl9LSR7b3B0aW9ucy5nYW1tYX0tJHtvcHRpb25zLnRvbmVNYXBwaW5nfS0ke29wdGlvbnMuc2t5bWVzaH1gO1xuICAgICAgICByZXR1cm4gc2hhcmVkS2V5ICsgKG9wdGlvbnMudHlwZSA9PT0gJ2N1YmVtYXAnID8gYC0ke29wdGlvbnMuZml4U2VhbXN9LSR7b3B0aW9ucy5taXB9YCA6ICcnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTaGFkZXJEZWZpbml0aW9uKGRldmljZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBkZWZpbmVzID0gb3B0aW9ucy5za3ltZXNoID09PSBTS1lUWVBFX0lORklOSVRFID8gJycgOiAnI2RlZmluZSBTS1lNRVNIXFxuJztcbiAgICAgICAgY29uc3QgdnNoYWRlciA9IGRlZmluZXMgKyBzaGFkZXJDaHVua3Muc2t5Ym94VlM7XG4gICAgICAgIGxldCBmc2hhZGVyID0gZGVmaW5lcztcblxuICAgICAgICBpZiAob3B0aW9ucy50eXBlID09PSAnY3ViZW1hcCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pcDJzaXplID0gWzEyOCwgNjQsIC8qIDMyICovIDE2LCA4LCA0LCAyXTtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gb3B0aW9ucy5taXAgPyBzaGFkZXJDaHVua3MuZml4Q3ViZW1hcFNlYW1zU3RyZXRjaFBTIDogc2hhZGVyQ2h1bmtzLmZpeEN1YmVtYXBTZWFtc05vbmVQUztcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gb3B0aW9ucy51c2VJbnRlbnNpdHkgPyBzaGFkZXJDaHVua3MuZW52TXVsdGlwbHlQUyA6IHNoYWRlckNodW5rcy5lbnZDb25zdFBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZGVjb2RlUFM7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci5nYW1tYUNvZGUob3B0aW9ucy5nYW1tYSk7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci50b25lbWFwQ29kZShvcHRpb25zLnRvbmVNYXBwaW5nKTtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNreWJveEhEUlBTXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJERFQ09ERS9nLCBDaHVua1V0aWxzLmRlY29kZUZ1bmMob3B0aW9ucy5lbmNvZGluZykpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJEZJWENPTlNUL2csICgxIC0gMSAvIG1pcDJzaXplW29wdGlvbnMubWlwXSkgKyBcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gb3B0aW9ucy51c2VJbnRlbnNpdHkgPyBzaGFkZXJDaHVua3MuZW52TXVsdGlwbHlQUyA6IHNoYWRlckNodW5rcy5lbnZDb25zdFBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZGVjb2RlUFM7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci5nYW1tYUNvZGUob3B0aW9ucy5nYW1tYSk7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci50b25lbWFwQ29kZShvcHRpb25zLnRvbmVNYXBwaW5nKTtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNwaGVyaWNhbFBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZW52QXRsYXNQUztcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNreWJveEVudlBTLnJlcGxhY2UoL1xcJERFQ09ERS9nLCBDaHVua1V0aWxzLmRlY29kZUZ1bmMob3B0aW9ucy5lbmNvZGluZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNoYWRlclV0aWxzLmNyZWF0ZURlZmluaXRpb24oZGV2aWNlLCB7XG4gICAgICAgICAgICBuYW1lOiAnU2t5Ym94U2hhZGVyJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBhUG9zaXRpb246IFNFTUFOVElDX1BPU0lUSU9OXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVydGV4Q29kZTogdnNoYWRlcixcbiAgICAgICAgICAgIGZyYWdtZW50Q29kZTogZnNoYWRlclxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IHNreWJveCA9IG5ldyBTaGFkZXJHZW5lcmF0b3JTa3lib3goKTtcblxuZXhwb3J0IHsgc2t5Ym94IH07XG4iXSwibmFtZXMiOlsiU2hhZGVyR2VuZXJhdG9yU2t5Ym94IiwiU2hhZGVyR2VuZXJhdG9yIiwiZ2VuZXJhdGVLZXkiLCJvcHRpb25zIiwic2hhcmVkS2V5IiwidHlwZSIsImVuY29kaW5nIiwidXNlSW50ZW5zaXR5IiwiZ2FtbWEiLCJ0b25lTWFwcGluZyIsInNreW1lc2giLCJmaXhTZWFtcyIsIm1pcCIsImNyZWF0ZVNoYWRlckRlZmluaXRpb24iLCJkZXZpY2UiLCJkZWZpbmVzIiwiU0tZVFlQRV9JTkZJTklURSIsInZzaGFkZXIiLCJzaGFkZXJDaHVua3MiLCJza3lib3hWUyIsImZzaGFkZXIiLCJtaXAyc2l6ZSIsImZpeEN1YmVtYXBTZWFtc1N0cmV0Y2hQUyIsImZpeEN1YmVtYXBTZWFtc05vbmVQUyIsImVudk11bHRpcGx5UFMiLCJlbnZDb25zdFBTIiwiZGVjb2RlUFMiLCJnYW1tYUNvZGUiLCJ0b25lbWFwQ29kZSIsInNreWJveEhEUlBTIiwicmVwbGFjZSIsIkNodW5rVXRpbHMiLCJkZWNvZGVGdW5jIiwic3BoZXJpY2FsUFMiLCJlbnZBdGxhc1BTIiwic2t5Ym94RW52UFMiLCJTaGFkZXJVdGlscyIsImNyZWF0ZURlZmluaXRpb24iLCJuYW1lIiwiYXR0cmlidXRlcyIsImFQb3NpdGlvbiIsIlNFTUFOVElDX1BPU0lUSU9OIiwidmVydGV4Q29kZSIsImZyYWdtZW50Q29kZSIsInNreWJveCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBLE1BQU1BLHFCQUFxQixTQUFTQyxlQUFlLENBQUM7RUFDaERDLFdBQVdBLENBQUNDLE9BQU8sRUFBRTtJQUNqQixNQUFNQyxTQUFTLEdBQUksQ0FBQSxPQUFBLEVBQVNELE9BQU8sQ0FBQ0UsSUFBSyxDQUFBLENBQUEsRUFBR0YsT0FBTyxDQUFDRyxRQUFTLENBQUEsQ0FBQSxFQUFHSCxPQUFPLENBQUNJLFlBQWEsQ0FBR0osQ0FBQUEsRUFBQUEsT0FBTyxDQUFDSyxLQUFNLENBQUdMLENBQUFBLEVBQUFBLE9BQU8sQ0FBQ00sV0FBWSxDQUFHTixDQUFBQSxFQUFBQSxPQUFPLENBQUNPLE9BQVEsQ0FB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
