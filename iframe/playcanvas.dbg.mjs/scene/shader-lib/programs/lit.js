import { ChunkBuilder } from '../chunk-builder.js';
import { LitShader } from './lit-shader.js';
import { LitOptionsUtils } from './lit-options-utils.js';
import { ShaderGenerator } from './shader-generator.js';

const dummyUvs = [0, 1, 2, 3, 4, 5, 6, 7];
class ShaderGeneratorLit extends ShaderGenerator {
  generateKey(options) {
    const key = "lit" + dummyUvs.map((dummy, index) => {
      return options.usedUvs[index] ? "1" : "0";
    }).join("") + options.shaderChunk + LitOptionsUtils.generateKey(options.litOptions);
    return key;
  }

  /**
   * @param {import('../../../platform/graphics/graphics-device.js').GraphicsDevice} device - The
   * graphics device.
   * @param {object} options - The options to be passed to the backend.
   * @returns {object} Returns the created shader definition.
   * @ignore
   */
  createShaderDefinition(device, options) {
    const litShader = new LitShader(device, options.litOptions);
    const decl = new ChunkBuilder();
    const code = new ChunkBuilder();
    const func = new ChunkBuilder();

    // global texture bias for standard textures
    decl.append(`uniform float textureBias;`);
    decl.append(litShader.chunks.litShaderArgsPS);
    code.append(options.shaderChunk);
    func.code = `evaluateFrontend();`;
    func.code = `\n${func.code.split('\n').map(l => `    ${l}`).join('\n')}\n\n`;
    const usedUvSets = options.usedUvs || [true];
    const mapTransforms = [];
    litShader.generateVertexShader(usedUvSets, usedUvSets, mapTransforms);
    litShader.generateFragmentShader(decl.code, code.code, func.code, "vUv0");
    return litShader.getDefinition();
  }
}
const lit = new ShaderGeneratorLit();

export { lit };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvc2hhZGVyLWxpYi9wcm9ncmFtcy9saXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2h1bmtCdWlsZGVyIH0gZnJvbSAnLi4vY2h1bmstYnVpbGRlci5qcyc7XG5pbXBvcnQgeyBMaXRTaGFkZXIgfSBmcm9tICcuL2xpdC1zaGFkZXIuanMnO1xuaW1wb3J0IHsgTGl0T3B0aW9uc1V0aWxzIH0gZnJvbSAnLi9saXQtb3B0aW9ucy11dGlscy5qcyc7XG5pbXBvcnQgeyBTaGFkZXJHZW5lcmF0b3IgfSBmcm9tICcuL3NoYWRlci1nZW5lcmF0b3IuanMnO1xuXG5jb25zdCBkdW1teVV2cyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3XTtcblxuY2xhc3MgU2hhZGVyR2VuZXJhdG9yTGl0IGV4dGVuZHMgU2hhZGVyR2VuZXJhdG9yIHtcbiAgICBnZW5lcmF0ZUtleShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IFwibGl0XCIgK1xuICAgICAgICAgICAgZHVtbXlVdnMubWFwKChkdW1teSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy51c2VkVXZzW2luZGV4XSA/IFwiMVwiIDogXCIwXCI7XG4gICAgICAgICAgICB9KS5qb2luKFwiXCIpICtcbiAgICAgICAgICAgIG9wdGlvbnMuc2hhZGVyQ2h1bmsgK1xuICAgICAgICAgICAgTGl0T3B0aW9uc1V0aWxzLmdlbmVyYXRlS2V5KG9wdGlvbnMubGl0T3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3MvZ3JhcGhpY3MtZGV2aWNlLmpzJykuR3JhcGhpY3NEZXZpY2V9IGRldmljZSAtIFRoZVxuICAgICAqIGdyYXBoaWNzIGRldmljZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUgYmFja2VuZC5cbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBSZXR1cm5zIHRoZSBjcmVhdGVkIHNoYWRlciBkZWZpbml0aW9uLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjcmVhdGVTaGFkZXJEZWZpbml0aW9uKGRldmljZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBsaXRTaGFkZXIgPSBuZXcgTGl0U2hhZGVyKGRldmljZSwgb3B0aW9ucy5saXRPcHRpb25zKTtcblxuICAgICAgICBjb25zdCBkZWNsID0gbmV3IENodW5rQnVpbGRlcigpO1xuICAgICAgICBjb25zdCBjb2RlID0gbmV3IENodW5rQnVpbGRlcigpO1xuICAgICAgICBjb25zdCBmdW5jID0gbmV3IENodW5rQnVpbGRlcigpO1xuXG4gICAgICAgIC8vIGdsb2JhbCB0ZXh0dXJlIGJpYXMgZm9yIHN0YW5kYXJkIHRleHR1cmVzXG4gICAgICAgIGRlY2wuYXBwZW5kKGB1bmlmb3JtIGZsb2F0IHRleHR1cmVCaWFzO2ApO1xuXG4gICAgICAgIGRlY2wuYXBwZW5kKGxpdFNoYWRlci5jaHVua3MubGl0U2hhZGVyQXJnc1BTKTtcbiAgICAgICAgY29kZS5hcHBlbmQob3B0aW9ucy5zaGFkZXJDaHVuayk7XG4gICAgICAgIGZ1bmMuY29kZSA9IGBldmFsdWF0ZUZyb250ZW5kKCk7YDtcblxuICAgICAgICBmdW5jLmNvZGUgPSBgXFxuJHtmdW5jLmNvZGUuc3BsaXQoJ1xcbicpLm1hcChsID0+IGAgICAgJHtsfWApLmpvaW4oJ1xcbicpfVxcblxcbmA7XG4gICAgICAgIGNvbnN0IHVzZWRVdlNldHMgPSBvcHRpb25zLnVzZWRVdnMgfHwgW3RydWVdO1xuICAgICAgICBjb25zdCBtYXBUcmFuc2Zvcm1zID0gW107XG4gICAgICAgIGxpdFNoYWRlci5nZW5lcmF0ZVZlcnRleFNoYWRlcih1c2VkVXZTZXRzLCB1c2VkVXZTZXRzLCBtYXBUcmFuc2Zvcm1zKTtcbiAgICAgICAgbGl0U2hhZGVyLmdlbmVyYXRlRnJhZ21lbnRTaGFkZXIoZGVjbC5jb2RlLCBjb2RlLmNvZGUsIGZ1bmMuY29kZSwgXCJ2VXYwXCIpO1xuXG4gICAgICAgIHJldHVybiBsaXRTaGFkZXIuZ2V0RGVmaW5pdGlvbigpO1xuICAgIH1cbn1cblxuY29uc3QgbGl0ID0gbmV3IFNoYWRlckdlbmVyYXRvckxpdCgpO1xuXG5leHBvcnQgeyBsaXQgfTtcbiJdLCJuYW1lcyI6WyJkdW1teVV2cyIsIlNoYWRlckdlbmVyYXRvckxpdCIsIlNoYWRlckdlbmVyYXRvciIsImdlbmVyYXRlS2V5Iiwib3B0aW9ucyIsImtleSIsIm1hcCIsImR1bW15IiwiaW5kZXgiLCJ1c2VkVXZzIiwiam9pbiIsInNoYWRlckNodW5rIiwiTGl0T3B0aW9uc1V0aWxzIiwibGl0T3B0aW9ucyIsImNyZWF0ZVNoYWRlckRlZmluaXRpb24iLCJkZXZpY2UiLCJsaXRTaGFkZXIiLCJMaXRTaGFkZXIiLCJkZWNsIiwiQ2h1bmtCdWlsZGVyIiwiY29kZSIsImZ1bmMiLCJhcHBlbmQiLCJjaHVua3MiLCJsaXRTaGFkZXJBcmdzUFMiLCJzcGxpdCIsImwiLCJ1c2VkVXZTZXRzIiwibWFwVHJhbnNmb3JtcyIsImdlbmVyYXRlVmVydGV4U2hhZGVyIiwiZ2VuZXJhdGVGcmFnbWVudFNoYWRlciIsImdldERlZmluaXRpb24iLCJsaXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsTUFBTUEsUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRXpDLE1BQU1DLGtCQUFrQixTQUFTQyxlQUFlLENBQUM7RUFDN0NDLFdBQVdBLENBQUNDLE9BQU8sRUFBRTtBQUNqQixJQUFBLE1BQU1DLEdBQUcsR0FBRyxLQUFLLEdBQ2JMLFFBQVEsQ0FBQ00sR0FBRyxDQUFDLENBQUNDLEtBQUssRUFBRUMsS0FBSyxLQUFLO01BQzNCLE9BQU9KLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDRCxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFBO0FBQzdDLEtBQUMsQ0FBQyxDQUFDRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQ1hOLE9BQU8sQ0FBQ08sV0FBVyxHQUNuQkMsZUFBZSxDQUFDVCxXQUFXLENBQUNDLE9BQU8sQ0FBQ1MsVUFBVSxDQUFDLENBQUE7QUFFbkQsSUFBQSxPQUFPUixHQUFHLENBQUE7QUFDZCxHQUFBOztBQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lTLEVBQUFBLHNCQUFzQkEsQ0FBQ0MsTUFBTSxFQUFFWCxPQUFPLEVBQUU7SUFDcEMsTUFBTVksU0FBUyxHQUFHLElBQUlDLFNBQVMsQ0FBQ0YsTUFBTSxFQUFFWCxPQUFPLENBQUNTLFVBQVUsQ0FBQyxDQUFBO0FBRTNELElBQUEsTUFBTUssSUFBSSxHQUFHLElBQUlDLFlBQVksRUFBRSxDQUFBO0FBQy9CLElBQUEsTUFBTUMsSUFBSSxHQUFHLElBQUlELFlBQVksRUFBRSxDQUFBO0FBQy9CLElBQUEsTUFBTUUsSUFBSSxHQUFHLElBQUlGLFlBQVksRUFBRSxDQUFBOztBQUUvQjtBQUNBRCxJQUFBQSxJQUFJLENBQUNJLE1BQU0sQ0FBRSxDQUFBLDBCQUFBLENBQTJCLENBQUMsQ0FBQTtJQUV6Q0osSUFBSSxDQUFDSSxNQUFNLENBQUNOLFNBQVMsQ0FBQ08sTUFBTSxDQUFDQyxlQUFlLENBQUMsQ0FBQTtBQUM3Q0osSUFBQUEsSUFBSSxDQUFDRSxNQUFNLENBQUNsQixPQUFPLENBQUNPLFdBQVcsQ0FBQyxDQUFBO0lBQ2hDVSxJQUFJLENBQUNELElBQUksR0FBSSxDQUFvQixtQkFBQSxDQUFBLENBQUE7SUFFakNDLElBQUksQ0FBQ0QsSUFBSSxHQUFJLENBQUlDLEVBQUFBLEVBQUFBLElBQUksQ0FBQ0QsSUFBSSxDQUFDSyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUNuQixHQUFHLENBQUNvQixDQUFDLElBQUssQ0FBQSxJQUFBLEVBQU1BLENBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBSyxJQUFBLENBQUEsQ0FBQTtJQUM1RSxNQUFNaUIsVUFBVSxHQUFHdkIsT0FBTyxDQUFDSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1QyxNQUFNbUIsYUFBYSxHQUFHLEVBQUUsQ0FBQTtJQUN4QlosU0FBUyxDQUFDYSxvQkFBb0IsQ0FBQ0YsVUFBVSxFQUFFQSxVQUFVLEVBQUVDLGFBQWEsQ0FBQyxDQUFBO0FBQ3JFWixJQUFBQSxTQUFTLENBQUNjLHNCQUFzQixDQUFDWixJQUFJLENBQUNFLElBQUksRUFBRUEsSUFBSSxDQUFDQSxJQUFJLEVBQUVDLElBQUksQ0FBQ0QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBRXpFLElBQUEsT0FBT0osU0FBUyxDQUFDZSxhQUFhLEVBQUUsQ0FBQTtBQUNwQyxHQUFBO0FBQ0osQ0FBQTtBQUVBLE1BQU1DLEdBQUcsR0FBRyxJQUFJL0Isa0JBQWtCOzs7OyJ9
