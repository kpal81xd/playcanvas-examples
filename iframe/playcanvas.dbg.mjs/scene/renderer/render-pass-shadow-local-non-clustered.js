import { DebugHelper } from '../../core/debug.js';
import { RenderPass } from '../../platform/graphics/render-pass.js';

/**
 * A render pass used to render local non-clustered shadows. It represents rendering to a single
 * face of shadow map, as each face is a separate render target.
 *
 * @ignore
 */
class RenderPassShadowLocalNonClustered extends RenderPass {
  constructor(device, shadowRenderer, light, face, applyVsm) {
    super(device);
    DebugHelper.setName(this, `${this.name}-${light._node.name}`);
    this.requiresCubemaps = false;
    this.shadowRenderer = shadowRenderer;
    this.light = light;
    this.face = face;
    this.applyVsm = applyVsm;
    this.shadowCamera = shadowRenderer.prepareFace(light, null, face);

    // clear the render target as well, as it contains a single shadow map
    shadowRenderer.setupRenderPass(this, this.shadowCamera, true);
  }
  execute() {
    this.shadowRenderer.renderFace(this.light, null, this.face, false);
  }
  after() {
    if (this.applyVsm) {
      this.shadowRenderer.renderVsm(this.light, this.shadowCamera);
    }
  }
}

export { RenderPassShadowLocalNonClustered };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXBhc3Mtc2hhZG93LWxvY2FsLW5vbi1jbHVzdGVyZWQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZS9yZW5kZXJlci9yZW5kZXItcGFzcy1zaGFkb3ctbG9jYWwtbm9uLWNsdXN0ZXJlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWJ1Z0hlbHBlciB9IGZyb20gXCIuLi8uLi9jb3JlL2RlYnVnLmpzXCI7XG5pbXBvcnQgeyBSZW5kZXJQYXNzIH0gZnJvbSBcIi4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL3JlbmRlci1wYXNzLmpzXCI7XG5cbi8qKlxuICogQSByZW5kZXIgcGFzcyB1c2VkIHRvIHJlbmRlciBsb2NhbCBub24tY2x1c3RlcmVkIHNoYWRvd3MuIEl0IHJlcHJlc2VudHMgcmVuZGVyaW5nIHRvIGEgc2luZ2xlXG4gKiBmYWNlIG9mIHNoYWRvdyBtYXAsIGFzIGVhY2ggZmFjZSBpcyBhIHNlcGFyYXRlIHJlbmRlciB0YXJnZXQuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBSZW5kZXJQYXNzU2hhZG93TG9jYWxOb25DbHVzdGVyZWQgZXh0ZW5kcyBSZW5kZXJQYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIHNoYWRvd1JlbmRlcmVyLCBsaWdodCwgZmFjZSwgYXBwbHlWc20pIHtcbiAgICAgICAgc3VwZXIoZGV2aWNlKTtcbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TmFtZSh0aGlzLCBgJHt0aGlzLm5hbWV9LSR7bGlnaHQuX25vZGUubmFtZX1gKTtcblxuICAgICAgICB0aGlzLnJlcXVpcmVzQ3ViZW1hcHMgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnNoYWRvd1JlbmRlcmVyID0gc2hhZG93UmVuZGVyZXI7XG4gICAgICAgIHRoaXMubGlnaHQgPSBsaWdodDtcbiAgICAgICAgdGhpcy5mYWNlID0gZmFjZTtcbiAgICAgICAgdGhpcy5hcHBseVZzbSA9IGFwcGx5VnNtO1xuICAgICAgICB0aGlzLnNoYWRvd0NhbWVyYSA9IHNoYWRvd1JlbmRlcmVyLnByZXBhcmVGYWNlKGxpZ2h0LCBudWxsLCBmYWNlKTtcblxuICAgICAgICAvLyBjbGVhciB0aGUgcmVuZGVyIHRhcmdldCBhcyB3ZWxsLCBhcyBpdCBjb250YWlucyBhIHNpbmdsZSBzaGFkb3cgbWFwXG4gICAgICAgIHNoYWRvd1JlbmRlcmVyLnNldHVwUmVuZGVyUGFzcyh0aGlzLCB0aGlzLnNoYWRvd0NhbWVyYSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZXhlY3V0ZSgpIHtcbiAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJlci5yZW5kZXJGYWNlKHRoaXMubGlnaHQsIG51bGwsIHRoaXMuZmFjZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFmdGVyKCkge1xuICAgICAgICBpZiAodGhpcy5hcHBseVZzbSkge1xuICAgICAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJlci5yZW5kZXJWc20odGhpcy5saWdodCwgdGhpcy5zaGFkb3dDYW1lcmEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBSZW5kZXJQYXNzU2hhZG93TG9jYWxOb25DbHVzdGVyZWQgfTtcbiJdLCJuYW1lcyI6WyJSZW5kZXJQYXNzU2hhZG93TG9jYWxOb25DbHVzdGVyZWQiLCJSZW5kZXJQYXNzIiwiY29uc3RydWN0b3IiLCJkZXZpY2UiLCJzaGFkb3dSZW5kZXJlciIsImxpZ2h0IiwiZmFjZSIsImFwcGx5VnNtIiwiRGVidWdIZWxwZXIiLCJzZXROYW1lIiwibmFtZSIsIl9ub2RlIiwicmVxdWlyZXNDdWJlbWFwcyIsInNoYWRvd0NhbWVyYSIsInByZXBhcmVGYWNlIiwic2V0dXBSZW5kZXJQYXNzIiwiZXhlY3V0ZSIsInJlbmRlckZhY2UiLCJhZnRlciIsInJlbmRlclZzbSJdLCJtYXBwaW5ncyI6Ijs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsaUNBQWlDLFNBQVNDLFVBQVUsQ0FBQztFQUN2REMsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxjQUFjLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUU7SUFDdkQsS0FBSyxDQUFDSixNQUFNLENBQUMsQ0FBQTtBQUNiSyxJQUFBQSxXQUFXLENBQUNDLE9BQU8sQ0FBQyxJQUFJLEVBQUcsR0FBRSxJQUFJLENBQUNDLElBQUssQ0FBQSxDQUFBLEVBQUdMLEtBQUssQ0FBQ00sS0FBSyxDQUFDRCxJQUFLLEVBQUMsQ0FBQyxDQUFBO0lBRTdELElBQUksQ0FBQ0UsZ0JBQWdCLEdBQUcsS0FBSyxDQUFBO0lBRTdCLElBQUksQ0FBQ1IsY0FBYyxHQUFHQSxjQUFjLENBQUE7SUFDcEMsSUFBSSxDQUFDQyxLQUFLLEdBQUdBLEtBQUssQ0FBQTtJQUNsQixJQUFJLENBQUNDLElBQUksR0FBR0EsSUFBSSxDQUFBO0lBQ2hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHQSxRQUFRLENBQUE7QUFDeEIsSUFBQSxJQUFJLENBQUNNLFlBQVksR0FBR1QsY0FBYyxDQUFDVSxXQUFXLENBQUNULEtBQUssRUFBRSxJQUFJLEVBQUVDLElBQUksQ0FBQyxDQUFBOztBQUVqRTtJQUNBRixjQUFjLENBQUNXLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDakUsR0FBQTtBQUVBRyxFQUFBQSxPQUFPQSxHQUFHO0FBQ04sSUFBQSxJQUFJLENBQUNaLGNBQWMsQ0FBQ2EsVUFBVSxDQUFDLElBQUksQ0FBQ1osS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUNDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUN0RSxHQUFBO0FBRUFZLEVBQUFBLEtBQUtBLEdBQUc7SUFDSixJQUFJLElBQUksQ0FBQ1gsUUFBUSxFQUFFO0FBQ2YsTUFBQSxJQUFJLENBQUNILGNBQWMsQ0FBQ2UsU0FBUyxDQUFDLElBQUksQ0FBQ2QsS0FBSyxFQUFFLElBQUksQ0FBQ1EsWUFBWSxDQUFDLENBQUE7QUFDaEUsS0FBQTtBQUNKLEdBQUE7QUFDSjs7OzsifQ==
