import { now } from '../../core/time.js';
import { RenderPass } from '../../platform/graphics/render-pass.js';
import { RenderPassCookieRenderer } from './render-pass-cookie-renderer.js';
import { RenderPassShadowLocalClustered } from './render-pass-shadow-local-clustered.js';

/**
 * A render pass used to update clustered lighting data - shadows, cookies, world clusters.
 *
 * @ignore
 */
class RenderPassUpdateClustered extends RenderPass {
  constructor(device, renderer, shadowRenderer, shadowRendererLocal, lightTextureAtlas) {
    super(device);
    this.renderer = renderer;
    this.frameGraph = null;

    // render cookies for all local visible lights
    this.cookiesRenderPass = RenderPassCookieRenderer.create(lightTextureAtlas.cookieRenderTarget, lightTextureAtlas.cubeSlotsOffsets);
    this.beforePasses.push(this.cookiesRenderPass);

    // local shadows - these are shared by all cameras (not entirely correctly)
    this.shadowRenderPass = new RenderPassShadowLocalClustered(device, shadowRenderer, shadowRendererLocal);
    this.beforePasses.push(this.shadowRenderPass);
  }
  update(frameGraph, shadowsEnabled, cookiesEnabled, lights, localLights) {
    this.frameGraph = frameGraph;
    this.cookiesRenderPass.enabled = cookiesEnabled;
    if (cookiesEnabled) {
      this.cookiesRenderPass.update(lights);
    }
    this.shadowRenderPass.enabled = shadowsEnabled;
    if (shadowsEnabled) {
      this.shadowRenderPass.update(localLights);
    }
  }
  destroy() {
    this.cookiesRenderPass.destroy();
    this.cookiesRenderPass = null;
  }
  execute() {
    const startTime = now();
    const {
      renderer
    } = this;
    const {
      scene
    } = renderer;
    renderer.worldClustersAllocator.update(this.frameGraph.renderPasses, scene.gammaCorrection, scene.lighting);
    renderer._lightClustersTime += now() - startTime;
    renderer._lightClusters = renderer.worldClustersAllocator.count;
  }
}

export { RenderPassUpdateClustered };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXBhc3MtdXBkYXRlLWNsdXN0ZXJlZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3NjZW5lL3JlbmRlcmVyL3JlbmRlci1wYXNzLXVwZGF0ZS1jbHVzdGVyZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm93IH0gZnJvbSBcIi4uLy4uL2NvcmUvdGltZS5qc1wiO1xuaW1wb3J0IHsgUmVuZGVyUGFzcyB9IGZyb20gXCIuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9yZW5kZXItcGFzcy5qc1wiO1xuaW1wb3J0IHsgUmVuZGVyUGFzc0Nvb2tpZVJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyLXBhc3MtY29va2llLXJlbmRlcmVyLmpzXCI7XG5pbXBvcnQgeyBSZW5kZXJQYXNzU2hhZG93TG9jYWxDbHVzdGVyZWQgfSBmcm9tIFwiLi9yZW5kZXItcGFzcy1zaGFkb3ctbG9jYWwtY2x1c3RlcmVkLmpzXCI7XG5cbi8qKlxuICogQSByZW5kZXIgcGFzcyB1c2VkIHRvIHVwZGF0ZSBjbHVzdGVyZWQgbGlnaHRpbmcgZGF0YSAtIHNoYWRvd3MsIGNvb2tpZXMsIHdvcmxkIGNsdXN0ZXJzLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgUmVuZGVyUGFzc1VwZGF0ZUNsdXN0ZXJlZCBleHRlbmRzIFJlbmRlclBhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgcmVuZGVyZXIsIHNoYWRvd1JlbmRlcmVyLCBzaGFkb3dSZW5kZXJlckxvY2FsLCBsaWdodFRleHR1cmVBdGxhcykge1xuICAgICAgICBzdXBlcihkZXZpY2UpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuZnJhbWVHcmFwaCA9IG51bGw7XG5cbiAgICAgICAgLy8gcmVuZGVyIGNvb2tpZXMgZm9yIGFsbCBsb2NhbCB2aXNpYmxlIGxpZ2h0c1xuICAgICAgICB0aGlzLmNvb2tpZXNSZW5kZXJQYXNzID0gUmVuZGVyUGFzc0Nvb2tpZVJlbmRlcmVyLmNyZWF0ZShsaWdodFRleHR1cmVBdGxhcy5jb29raWVSZW5kZXJUYXJnZXQsIGxpZ2h0VGV4dHVyZUF0bGFzLmN1YmVTbG90c09mZnNldHMpO1xuICAgICAgICB0aGlzLmJlZm9yZVBhc3Nlcy5wdXNoKHRoaXMuY29va2llc1JlbmRlclBhc3MpO1xuXG4gICAgICAgIC8vIGxvY2FsIHNoYWRvd3MgLSB0aGVzZSBhcmUgc2hhcmVkIGJ5IGFsbCBjYW1lcmFzIChub3QgZW50aXJlbHkgY29ycmVjdGx5KVxuICAgICAgICB0aGlzLnNoYWRvd1JlbmRlclBhc3MgPSBuZXcgUmVuZGVyUGFzc1NoYWRvd0xvY2FsQ2x1c3RlcmVkKGRldmljZSwgc2hhZG93UmVuZGVyZXIsIHNoYWRvd1JlbmRlcmVyTG9jYWwpO1xuICAgICAgICB0aGlzLmJlZm9yZVBhc3Nlcy5wdXNoKHRoaXMuc2hhZG93UmVuZGVyUGFzcyk7XG4gICAgfVxuXG4gICAgdXBkYXRlKGZyYW1lR3JhcGgsIHNoYWRvd3NFbmFibGVkLCBjb29raWVzRW5hYmxlZCwgbGlnaHRzLCBsb2NhbExpZ2h0cykge1xuXG4gICAgICAgIHRoaXMuZnJhbWVHcmFwaCA9IGZyYW1lR3JhcGg7XG5cbiAgICAgICAgdGhpcy5jb29raWVzUmVuZGVyUGFzcy5lbmFibGVkID0gY29va2llc0VuYWJsZWQ7XG4gICAgICAgIGlmIChjb29raWVzRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5jb29raWVzUmVuZGVyUGFzcy51cGRhdGUobGlnaHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hhZG93UmVuZGVyUGFzcy5lbmFibGVkID0gc2hhZG93c0VuYWJsZWQ7XG4gICAgICAgIGlmIChzaGFkb3dzRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJQYXNzLnVwZGF0ZShsb2NhbExpZ2h0cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmNvb2tpZXNSZW5kZXJQYXNzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5jb29raWVzUmVuZGVyUGFzcyA9IG51bGw7XG4gICAgfVxuXG4gICAgZXhlY3V0ZSgpIHtcblxuICAgICAgICAvLyAjaWYgX1BST0ZJTEVSXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IG5vdygpO1xuICAgICAgICAvLyAjZW5kaWZcblxuICAgICAgICBjb25zdCB7IHJlbmRlcmVyIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHNjZW5lIH0gPSByZW5kZXJlcjtcbiAgICAgICAgcmVuZGVyZXIud29ybGRDbHVzdGVyc0FsbG9jYXRvci51cGRhdGUodGhpcy5mcmFtZUdyYXBoLnJlbmRlclBhc3Nlcywgc2NlbmUuZ2FtbWFDb3JyZWN0aW9uLCBzY2VuZS5saWdodGluZyk7XG5cbiAgICAgICAgLy8gI2lmIF9QUk9GSUxFUlxuICAgICAgICByZW5kZXJlci5fbGlnaHRDbHVzdGVyc1RpbWUgKz0gbm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIHJlbmRlcmVyLl9saWdodENsdXN0ZXJzID0gcmVuZGVyZXIud29ybGRDbHVzdGVyc0FsbG9jYXRvci5jb3VudDtcbiAgICAgICAgLy8gI2VuZGlmXG4gICAgfVxufVxuXG5leHBvcnQgeyBSZW5kZXJQYXNzVXBkYXRlQ2x1c3RlcmVkIH07XG4iXSwibmFtZXMiOlsiUmVuZGVyUGFzc1VwZGF0ZUNsdXN0ZXJlZCIsIlJlbmRlclBhc3MiLCJjb25zdHJ1Y3RvciIsImRldmljZSIsInJlbmRlcmVyIiwic2hhZG93UmVuZGVyZXIiLCJzaGFkb3dSZW5kZXJlckxvY2FsIiwibGlnaHRUZXh0dXJlQXRsYXMiLCJmcmFtZUdyYXBoIiwiY29va2llc1JlbmRlclBhc3MiLCJSZW5kZXJQYXNzQ29va2llUmVuZGVyZXIiLCJjcmVhdGUiLCJjb29raWVSZW5kZXJUYXJnZXQiLCJjdWJlU2xvdHNPZmZzZXRzIiwiYmVmb3JlUGFzc2VzIiwicHVzaCIsInNoYWRvd1JlbmRlclBhc3MiLCJSZW5kZXJQYXNzU2hhZG93TG9jYWxDbHVzdGVyZWQiLCJ1cGRhdGUiLCJzaGFkb3dzRW5hYmxlZCIsImNvb2tpZXNFbmFibGVkIiwibGlnaHRzIiwibG9jYWxMaWdodHMiLCJlbmFibGVkIiwiZGVzdHJveSIsImV4ZWN1dGUiLCJzdGFydFRpbWUiLCJub3ciLCJzY2VuZSIsIndvcmxkQ2x1c3RlcnNBbGxvY2F0b3IiLCJyZW5kZXJQYXNzZXMiLCJnYW1tYUNvcnJlY3Rpb24iLCJsaWdodGluZyIsIl9saWdodENsdXN0ZXJzVGltZSIsIl9saWdodENsdXN0ZXJzIiwiY291bnQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLHlCQUF5QixTQUFTQyxVQUFVLENBQUM7RUFDL0NDLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxjQUFjLEVBQUVDLG1CQUFtQixFQUFFQyxpQkFBaUIsRUFBRTtJQUNsRixLQUFLLENBQUNKLE1BQU0sQ0FBQyxDQUFBO0lBQ2IsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVEsQ0FBQTtJQUN4QixJQUFJLENBQUNJLFVBQVUsR0FBRyxJQUFJLENBQUE7O0FBRXRCO0FBQ0EsSUFBQSxJQUFJLENBQUNDLGlCQUFpQixHQUFHQyx3QkFBd0IsQ0FBQ0MsTUFBTSxDQUFDSixpQkFBaUIsQ0FBQ0ssa0JBQWtCLEVBQUVMLGlCQUFpQixDQUFDTSxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ2xJLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDTixpQkFBaUIsQ0FBQyxDQUFBOztBQUU5QztJQUNBLElBQUksQ0FBQ08sZ0JBQWdCLEdBQUcsSUFBSUMsOEJBQThCLENBQUNkLE1BQU0sRUFBRUUsY0FBYyxFQUFFQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQ3ZHLElBQUksQ0FBQ1EsWUFBWSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ2pELEdBQUE7RUFFQUUsTUFBTUEsQ0FBQ1YsVUFBVSxFQUFFVyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUU7SUFFcEUsSUFBSSxDQUFDZCxVQUFVLEdBQUdBLFVBQVUsQ0FBQTtBQUU1QixJQUFBLElBQUksQ0FBQ0MsaUJBQWlCLENBQUNjLE9BQU8sR0FBR0gsY0FBYyxDQUFBO0FBQy9DLElBQUEsSUFBSUEsY0FBYyxFQUFFO0FBQ2hCLE1BQUEsSUFBSSxDQUFDWCxpQkFBaUIsQ0FBQ1MsTUFBTSxDQUFDRyxNQUFNLENBQUMsQ0FBQTtBQUN6QyxLQUFBO0FBRUEsSUFBQSxJQUFJLENBQUNMLGdCQUFnQixDQUFDTyxPQUFPLEdBQUdKLGNBQWMsQ0FBQTtBQUM5QyxJQUFBLElBQUlBLGNBQWMsRUFBRTtBQUNoQixNQUFBLElBQUksQ0FBQ0gsZ0JBQWdCLENBQUNFLE1BQU0sQ0FBQ0ksV0FBVyxDQUFDLENBQUE7QUFDN0MsS0FBQTtBQUNKLEdBQUE7QUFFQUUsRUFBQUEsT0FBT0EsR0FBRztBQUNOLElBQUEsSUFBSSxDQUFDZixpQkFBaUIsQ0FBQ2UsT0FBTyxFQUFFLENBQUE7SUFDaEMsSUFBSSxDQUFDZixpQkFBaUIsR0FBRyxJQUFJLENBQUE7QUFDakMsR0FBQTtBQUVBZ0IsRUFBQUEsT0FBT0EsR0FBRztBQUdOLElBQUEsTUFBTUMsU0FBUyxHQUFHQyxHQUFHLEVBQUUsQ0FBQTtJQUd2QixNQUFNO0FBQUV2QixNQUFBQSxRQUFBQTtBQUFTLEtBQUMsR0FBRyxJQUFJLENBQUE7SUFDekIsTUFBTTtBQUFFd0IsTUFBQUEsS0FBQUE7QUFBTSxLQUFDLEdBQUd4QixRQUFRLENBQUE7QUFDMUJBLElBQUFBLFFBQVEsQ0FBQ3lCLHNCQUFzQixDQUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDVixVQUFVLENBQUNzQixZQUFZLEVBQUVGLEtBQUssQ0FBQ0csZUFBZSxFQUFFSCxLQUFLLENBQUNJLFFBQVEsQ0FBQyxDQUFBO0FBRzNHNUIsSUFBQUEsUUFBUSxDQUFDNkIsa0JBQWtCLElBQUlOLEdBQUcsRUFBRSxHQUFHRCxTQUFTLENBQUE7QUFDaER0QixJQUFBQSxRQUFRLENBQUM4QixjQUFjLEdBQUc5QixRQUFRLENBQUN5QixzQkFBc0IsQ0FBQ00sS0FBSyxDQUFBO0FBRW5FLEdBQUE7QUFDSjs7OzsifQ==
