import { RenderPass } from '../../platform/graphics/render-pass.js';

/**
 * A render pass used to render local clustered shadows. This is done inside a single render pass,
 * as all shadows are part of a single render target atlas.
 *
 * @ignore
 */
class RenderPassShadowLocalClustered extends RenderPass {
  constructor(device, shadowRenderer, shadowRendererLocal) {
    super(device);
    this.requiresCubemaps = false;
    this.shadowRenderer = shadowRenderer;
    this.shadowRendererLocal = shadowRendererLocal;
  }
  update(localLights) {
    // prepare render targets / shadow cameras for rendering
    const shadowLights = this.shadowRendererLocal.shadowLights;
    const shadowCamera = this.shadowRendererLocal.prepareLights(shadowLights, localLights);

    // if any shadows need to be rendered
    const count = shadowLights.length;
    this.enabled = count > 0;
    if (count) {
      // setup render pass using any of the cameras, they all have the same pass related properties
      // Note that the render pass is set up to not clear the render target, as individual shadow maps clear it
      this.shadowRenderer.setupRenderPass(this, shadowCamera, false);
    }
  }
  execute() {
    const shadowLights = this.shadowRendererLocal.shadowLights;
    const count = shadowLights.length;
    for (let i = 0; i < count; i++) {
      const light = shadowLights[i];
      for (let face = 0; face < light.numShadowFaces; face++) {
        this.shadowRenderer.renderFace(light, null, face, true);
      }
    }
    shadowLights.length = 0;
  }
}

export { RenderPassShadowLocalClustered };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXBhc3Mtc2hhZG93LWxvY2FsLWNsdXN0ZXJlZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3NjZW5lL3JlbmRlcmVyL3JlbmRlci1wYXNzLXNoYWRvdy1sb2NhbC1jbHVzdGVyZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyUGFzcyB9IGZyb20gXCIuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9yZW5kZXItcGFzcy5qc1wiO1xuXG4vKipcbiAqIEEgcmVuZGVyIHBhc3MgdXNlZCB0byByZW5kZXIgbG9jYWwgY2x1c3RlcmVkIHNoYWRvd3MuIFRoaXMgaXMgZG9uZSBpbnNpZGUgYSBzaW5nbGUgcmVuZGVyIHBhc3MsXG4gKiBhcyBhbGwgc2hhZG93cyBhcmUgcGFydCBvZiBhIHNpbmdsZSByZW5kZXIgdGFyZ2V0IGF0bGFzLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgUmVuZGVyUGFzc1NoYWRvd0xvY2FsQ2x1c3RlcmVkIGV4dGVuZHMgUmVuZGVyUGFzcyB7XG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBzaGFkb3dSZW5kZXJlciwgc2hhZG93UmVuZGVyZXJMb2NhbCkge1xuICAgICAgICBzdXBlcihkZXZpY2UpO1xuXG4gICAgICAgIHRoaXMucmVxdWlyZXNDdWJlbWFwcyA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuc2hhZG93UmVuZGVyZXIgPSBzaGFkb3dSZW5kZXJlcjtcbiAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJlckxvY2FsID0gc2hhZG93UmVuZGVyZXJMb2NhbDtcbiAgICB9XG5cbiAgICB1cGRhdGUobG9jYWxMaWdodHMpIHtcblxuICAgICAgICAvLyBwcmVwYXJlIHJlbmRlciB0YXJnZXRzIC8gc2hhZG93IGNhbWVyYXMgZm9yIHJlbmRlcmluZ1xuICAgICAgICBjb25zdCBzaGFkb3dMaWdodHMgPSB0aGlzLnNoYWRvd1JlbmRlcmVyTG9jYWwuc2hhZG93TGlnaHRzO1xuICAgICAgICBjb25zdCBzaGFkb3dDYW1lcmEgPSB0aGlzLnNoYWRvd1JlbmRlcmVyTG9jYWwucHJlcGFyZUxpZ2h0cyhzaGFkb3dMaWdodHMsIGxvY2FsTGlnaHRzKTtcblxuICAgICAgICAvLyBpZiBhbnkgc2hhZG93cyBuZWVkIHRvIGJlIHJlbmRlcmVkXG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2hhZG93TGlnaHRzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gY291bnQgPiAwO1xuXG4gICAgICAgIGlmIChjb3VudCkge1xuXG4gICAgICAgICAgICAvLyBzZXR1cCByZW5kZXIgcGFzcyB1c2luZyBhbnkgb2YgdGhlIGNhbWVyYXMsIHRoZXkgYWxsIGhhdmUgdGhlIHNhbWUgcGFzcyByZWxhdGVkIHByb3BlcnRpZXNcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgcmVuZGVyIHBhc3MgaXMgc2V0IHVwIHRvIG5vdCBjbGVhciB0aGUgcmVuZGVyIHRhcmdldCwgYXMgaW5kaXZpZHVhbCBzaGFkb3cgbWFwcyBjbGVhciBpdFxuICAgICAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJlci5zZXR1cFJlbmRlclBhc3ModGhpcywgc2hhZG93Q2FtZXJhLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleGVjdXRlKCkge1xuXG4gICAgICAgIGNvbnN0IHNoYWRvd0xpZ2h0cyA9IHRoaXMuc2hhZG93UmVuZGVyZXJMb2NhbC5zaGFkb3dMaWdodHM7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2hhZG93TGlnaHRzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaWdodCA9IHNoYWRvd0xpZ2h0c1tpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGZhY2UgPSAwOyBmYWNlIDwgbGlnaHQubnVtU2hhZG93RmFjZXM7IGZhY2UrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZG93UmVuZGVyZXIucmVuZGVyRmFjZShsaWdodCwgbnVsbCwgZmFjZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFkb3dMaWdodHMubGVuZ3RoID0gMDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFJlbmRlclBhc3NTaGFkb3dMb2NhbENsdXN0ZXJlZCB9O1xuIl0sIm5hbWVzIjpbIlJlbmRlclBhc3NTaGFkb3dMb2NhbENsdXN0ZXJlZCIsIlJlbmRlclBhc3MiLCJjb25zdHJ1Y3RvciIsImRldmljZSIsInNoYWRvd1JlbmRlcmVyIiwic2hhZG93UmVuZGVyZXJMb2NhbCIsInJlcXVpcmVzQ3ViZW1hcHMiLCJ1cGRhdGUiLCJsb2NhbExpZ2h0cyIsInNoYWRvd0xpZ2h0cyIsInNoYWRvd0NhbWVyYSIsInByZXBhcmVMaWdodHMiLCJjb3VudCIsImxlbmd0aCIsImVuYWJsZWQiLCJzZXR1cFJlbmRlclBhc3MiLCJleGVjdXRlIiwiaSIsImxpZ2h0IiwiZmFjZSIsIm51bVNoYWRvd0ZhY2VzIiwicmVuZGVyRmFjZSJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSw4QkFBOEIsU0FBU0MsVUFBVSxDQUFDO0FBQ3BEQyxFQUFBQSxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLGNBQWMsRUFBRUMsbUJBQW1CLEVBQUU7SUFDckQsS0FBSyxDQUFDRixNQUFNLENBQUMsQ0FBQTtJQUViLElBQUksQ0FBQ0csZ0JBQWdCLEdBQUcsS0FBSyxDQUFBO0lBRTdCLElBQUksQ0FBQ0YsY0FBYyxHQUFHQSxjQUFjLENBQUE7SUFDcEMsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR0EsbUJBQW1CLENBQUE7QUFDbEQsR0FBQTtFQUVBRSxNQUFNQSxDQUFDQyxXQUFXLEVBQUU7QUFFaEI7QUFDQSxJQUFBLE1BQU1DLFlBQVksR0FBRyxJQUFJLENBQUNKLG1CQUFtQixDQUFDSSxZQUFZLENBQUE7SUFDMUQsTUFBTUMsWUFBWSxHQUFHLElBQUksQ0FBQ0wsbUJBQW1CLENBQUNNLGFBQWEsQ0FBQ0YsWUFBWSxFQUFFRCxXQUFXLENBQUMsQ0FBQTs7QUFFdEY7QUFDQSxJQUFBLE1BQU1JLEtBQUssR0FBR0gsWUFBWSxDQUFDSSxNQUFNLENBQUE7QUFDakMsSUFBQSxJQUFJLENBQUNDLE9BQU8sR0FBR0YsS0FBSyxHQUFHLENBQUMsQ0FBQTtBQUV4QixJQUFBLElBQUlBLEtBQUssRUFBRTtBQUVQO0FBQ0E7TUFDQSxJQUFJLENBQUNSLGNBQWMsQ0FBQ1csZUFBZSxDQUFDLElBQUksRUFBRUwsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ2xFLEtBQUE7QUFDSixHQUFBO0FBRUFNLEVBQUFBLE9BQU9BLEdBQUc7QUFFTixJQUFBLE1BQU1QLFlBQVksR0FBRyxJQUFJLENBQUNKLG1CQUFtQixDQUFDSSxZQUFZLENBQUE7QUFDMUQsSUFBQSxNQUFNRyxLQUFLLEdBQUdILFlBQVksQ0FBQ0ksTUFBTSxDQUFBO0lBQ2pDLEtBQUssSUFBSUksQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTCxLQUFLLEVBQUVLLENBQUMsRUFBRSxFQUFFO0FBQzVCLE1BQUEsTUFBTUMsS0FBSyxHQUFHVCxZQUFZLENBQUNRLENBQUMsQ0FBQyxDQUFBO0FBQzdCLE1BQUEsS0FBSyxJQUFJRSxJQUFJLEdBQUcsQ0FBQyxFQUFFQSxJQUFJLEdBQUdELEtBQUssQ0FBQ0UsY0FBYyxFQUFFRCxJQUFJLEVBQUUsRUFBRTtBQUNwRCxRQUFBLElBQUksQ0FBQ2YsY0FBYyxDQUFDaUIsVUFBVSxDQUFDSCxLQUFLLEVBQUUsSUFBSSxFQUFFQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDM0QsT0FBQTtBQUNKLEtBQUE7SUFFQVYsWUFBWSxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxDQUFBO0FBQzNCLEdBQUE7QUFDSjs7OzsifQ==
