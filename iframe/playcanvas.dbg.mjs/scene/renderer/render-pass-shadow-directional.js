import { DebugHelper } from '../../core/debug.js';
import { RenderPass } from '../../platform/graphics/render-pass.js';
import { SHADOWUPDATE_NONE, SHADOWUPDATE_THISFRAME } from '../constants.js';

/**
 * A render pass used to render directional shadows.
 *
 * @ignore
 */
class RenderPassShadowDirectional extends RenderPass {
  constructor(device, shadowRenderer, light, camera, allCascadesRendering) {
    super(device);
    DebugHelper.setName(this, `${this.name}-${light._node.name}`);
    this.shadowRenderer = shadowRenderer;
    this.light = light;
    this.camera = camera;
    this.allCascadesRendering = allCascadesRendering;
  }
  execute() {
    const {
      light,
      camera,
      shadowRenderer,
      allCascadesRendering
    } = this;
    const faceCount = light.numShadowFaces;
    const shadowUpdateOverrides = light.shadowUpdateOverrides;

    // render all faces
    for (let face = 0; face < faceCount; face++) {
      if ((shadowUpdateOverrides == null ? void 0 : shadowUpdateOverrides[face]) !== SHADOWUPDATE_NONE) {
        shadowRenderer.renderFace(light, camera, face, !allCascadesRendering);
      }
      if ((shadowUpdateOverrides == null ? void 0 : shadowUpdateOverrides[face]) === SHADOWUPDATE_THISFRAME) {
        shadowUpdateOverrides[face] = SHADOWUPDATE_NONE;
      }
    }
  }
  after() {
    // apply VSM blur if needed
    this.shadowRenderer.renderVsm(this.light, this.camera);
  }
}

export { RenderPassShadowDirectional };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXBhc3Mtc2hhZG93LWRpcmVjdGlvbmFsLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvcmVuZGVyZXIvcmVuZGVyLXBhc3Mtc2hhZG93LWRpcmVjdGlvbmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnSGVscGVyIH0gZnJvbSBcIi4uLy4uL2NvcmUvZGVidWcuanNcIjtcbmltcG9ydCB7IFJlbmRlclBhc3MgfSBmcm9tIFwiLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3MvcmVuZGVyLXBhc3MuanNcIjtcbmltcG9ydCB7IFNIQURPV1VQREFURV9OT05FLCBTSEFET1dVUERBVEVfVEhJU0ZSQU1FIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuXG4vKipcbiAqIEEgcmVuZGVyIHBhc3MgdXNlZCB0byByZW5kZXIgZGlyZWN0aW9uYWwgc2hhZG93cy5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFJlbmRlclBhc3NTaGFkb3dEaXJlY3Rpb25hbCBleHRlbmRzIFJlbmRlclBhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgc2hhZG93UmVuZGVyZXIsIGxpZ2h0LCBjYW1lcmEsIGFsbENhc2NhZGVzUmVuZGVyaW5nKSB7XG4gICAgICAgIHN1cGVyKGRldmljZSk7XG4gICAgICAgIERlYnVnSGVscGVyLnNldE5hbWUodGhpcywgYCR7dGhpcy5uYW1lfS0ke2xpZ2h0Ll9ub2RlLm5hbWV9YCk7XG5cbiAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJlciA9IHNoYWRvd1JlbmRlcmVyO1xuICAgICAgICB0aGlzLmxpZ2h0ID0gbGlnaHQ7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgICAgICB0aGlzLmFsbENhc2NhZGVzUmVuZGVyaW5nID0gYWxsQ2FzY2FkZXNSZW5kZXJpbmc7XG4gICAgfVxuXG4gICAgZXhlY3V0ZSgpIHtcblxuICAgICAgICBjb25zdCB7IGxpZ2h0LCBjYW1lcmEsIHNoYWRvd1JlbmRlcmVyLCBhbGxDYXNjYWRlc1JlbmRlcmluZyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZmFjZUNvdW50ID0gbGlnaHQubnVtU2hhZG93RmFjZXM7XG4gICAgICAgIGNvbnN0IHNoYWRvd1VwZGF0ZU92ZXJyaWRlcyA9IGxpZ2h0LnNoYWRvd1VwZGF0ZU92ZXJyaWRlcztcblxuICAgICAgICAvLyByZW5kZXIgYWxsIGZhY2VzXG4gICAgICAgIGZvciAobGV0IGZhY2UgPSAwOyBmYWNlIDwgZmFjZUNvdW50OyBmYWNlKyspIHtcblxuICAgICAgICAgICAgaWYgKHNoYWRvd1VwZGF0ZU92ZXJyaWRlcz8uW2ZhY2VdICE9PSBTSEFET1dVUERBVEVfTk9ORSkge1xuICAgICAgICAgICAgICAgIHNoYWRvd1JlbmRlcmVyLnJlbmRlckZhY2UobGlnaHQsIGNhbWVyYSwgZmFjZSwgIWFsbENhc2NhZGVzUmVuZGVyaW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNoYWRvd1VwZGF0ZU92ZXJyaWRlcz8uW2ZhY2VdID09PSBTSEFET1dVUERBVEVfVEhJU0ZSQU1FKSB7XG4gICAgICAgICAgICAgICAgc2hhZG93VXBkYXRlT3ZlcnJpZGVzW2ZhY2VdID0gU0hBRE9XVVBEQVRFX05PTkU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZnRlcigpIHtcbiAgICAgICAgLy8gYXBwbHkgVlNNIGJsdXIgaWYgbmVlZGVkXG4gICAgICAgIHRoaXMuc2hhZG93UmVuZGVyZXIucmVuZGVyVnNtKHRoaXMubGlnaHQsIHRoaXMuY2FtZXJhKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFJlbmRlclBhc3NTaGFkb3dEaXJlY3Rpb25hbCB9O1xuIl0sIm5hbWVzIjpbIlJlbmRlclBhc3NTaGFkb3dEaXJlY3Rpb25hbCIsIlJlbmRlclBhc3MiLCJjb25zdHJ1Y3RvciIsImRldmljZSIsInNoYWRvd1JlbmRlcmVyIiwibGlnaHQiLCJjYW1lcmEiLCJhbGxDYXNjYWRlc1JlbmRlcmluZyIsIkRlYnVnSGVscGVyIiwic2V0TmFtZSIsIm5hbWUiLCJfbm9kZSIsImV4ZWN1dGUiLCJmYWNlQ291bnQiLCJudW1TaGFkb3dGYWNlcyIsInNoYWRvd1VwZGF0ZU92ZXJyaWRlcyIsImZhY2UiLCJTSEFET1dVUERBVEVfTk9ORSIsInJlbmRlckZhY2UiLCJTSEFET1dVUERBVEVfVEhJU0ZSQU1FIiwiYWZ0ZXIiLCJyZW5kZXJWc20iXSwibWFwcGluZ3MiOiI7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsMkJBQTJCLFNBQVNDLFVBQVUsQ0FBQztFQUNqREMsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxjQUFjLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxvQkFBb0IsRUFBRTtJQUNyRSxLQUFLLENBQUNKLE1BQU0sQ0FBQyxDQUFBO0FBQ2JLLElBQUFBLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLElBQUksRUFBRyxHQUFFLElBQUksQ0FBQ0MsSUFBSyxDQUFBLENBQUEsRUFBR0wsS0FBSyxDQUFDTSxLQUFLLENBQUNELElBQUssRUFBQyxDQUFDLENBQUE7SUFFN0QsSUFBSSxDQUFDTixjQUFjLEdBQUdBLGNBQWMsQ0FBQTtJQUNwQyxJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSyxDQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNLENBQUE7SUFDcEIsSUFBSSxDQUFDQyxvQkFBb0IsR0FBR0Esb0JBQW9CLENBQUE7QUFDcEQsR0FBQTtBQUVBSyxFQUFBQSxPQUFPQSxHQUFHO0lBRU4sTUFBTTtNQUFFUCxLQUFLO01BQUVDLE1BQU07TUFBRUYsY0FBYztBQUFFRyxNQUFBQSxvQkFBQUE7QUFBcUIsS0FBQyxHQUFHLElBQUksQ0FBQTtBQUNwRSxJQUFBLE1BQU1NLFNBQVMsR0FBR1IsS0FBSyxDQUFDUyxjQUFjLENBQUE7QUFDdEMsSUFBQSxNQUFNQyxxQkFBcUIsR0FBR1YsS0FBSyxDQUFDVSxxQkFBcUIsQ0FBQTs7QUFFekQ7SUFDQSxLQUFLLElBQUlDLElBQUksR0FBRyxDQUFDLEVBQUVBLElBQUksR0FBR0gsU0FBUyxFQUFFRyxJQUFJLEVBQUUsRUFBRTtNQUV6QyxJQUFJLENBQUFELHFCQUFxQixJQUFyQkEsSUFBQUEsR0FBQUEsS0FBQUEsQ0FBQUEsR0FBQUEscUJBQXFCLENBQUdDLElBQUksQ0FBQyxNQUFLQyxpQkFBaUIsRUFBRTtRQUNyRGIsY0FBYyxDQUFDYyxVQUFVLENBQUNiLEtBQUssRUFBRUMsTUFBTSxFQUFFVSxJQUFJLEVBQUUsQ0FBQ1Qsb0JBQW9CLENBQUMsQ0FBQTtBQUN6RSxPQUFBO01BRUEsSUFBSSxDQUFBUSxxQkFBcUIsSUFBckJBLElBQUFBLEdBQUFBLEtBQUFBLENBQUFBLEdBQUFBLHFCQUFxQixDQUFHQyxJQUFJLENBQUMsTUFBS0csc0JBQXNCLEVBQUU7QUFDMURKLFFBQUFBLHFCQUFxQixDQUFDQyxJQUFJLENBQUMsR0FBR0MsaUJBQWlCLENBQUE7QUFDbkQsT0FBQTtBQUNKLEtBQUE7QUFDSixHQUFBO0FBRUFHLEVBQUFBLEtBQUtBLEdBQUc7QUFDSjtBQUNBLElBQUEsSUFBSSxDQUFDaEIsY0FBYyxDQUFDaUIsU0FBUyxDQUFDLElBQUksQ0FBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFBO0FBQzFELEdBQUE7QUFDSjs7OzsifQ==
