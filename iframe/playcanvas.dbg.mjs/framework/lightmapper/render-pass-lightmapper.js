import { DebugGraphics } from '../../platform/graphics/debug-graphics.js';
import { RenderPass } from '../../platform/graphics/render-pass.js';
import { SHADER_FORWARDHDR } from '../../scene/constants.js';

/**
 * A render pass implementing rendering of mesh instance receivers for light-mapper.
 *
 * @ignore
 */
class RenderPassLightmapper extends RenderPass {
  constructor(device, renderer, camera, worldClusters, receivers, lightArray) {
    super(device);
    /** @type {import('../../platform/graphics/bind-group.js').BindGroup[]} */
    this.viewBindGroups = [];
    this.renderer = renderer;
    this.camera = camera;
    this.worldClusters = worldClusters;
    this.receivers = receivers;
    this.lightArray = lightArray;
  }
  destroy() {
    this.viewBindGroups.forEach(bg => {
      bg.defaultUniformBuffer.destroy();
      bg.destroy();
    });
    this.viewBindGroups.length = 0;
  }
  execute() {
    const device = this.device;
    DebugGraphics.pushGpuMarker(device, 'Lightmapper');
    const {
      renderer,
      camera,
      receivers,
      renderTarget,
      worldClusters,
      lightArray
    } = this;
    renderer.renderForwardLayer(camera, renderTarget, null, undefined, SHADER_FORWARDHDR, this.viewBindGroups, {
      meshInstances: receivers,
      splitLights: lightArray,
      lightClusters: worldClusters
    });
    DebugGraphics.popGpuMarker(device);
  }
}

export { RenderPassLightmapper };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXBhc3MtbGlnaHRtYXBwZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvbGlnaHRtYXBwZXIvcmVuZGVyLXBhc3MtbGlnaHRtYXBwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWdHcmFwaGljcyB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL2RlYnVnLWdyYXBoaWNzLmpzJztcbmltcG9ydCB7IFJlbmRlclBhc3MgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9yZW5kZXItcGFzcy5qcyc7XG5pbXBvcnQgeyBTSEFERVJfRk9SV0FSREhEUiB9IGZyb20gJy4uLy4uL3NjZW5lL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogQSByZW5kZXIgcGFzcyBpbXBsZW1lbnRpbmcgcmVuZGVyaW5nIG9mIG1lc2ggaW5zdGFuY2UgcmVjZWl2ZXJzIGZvciBsaWdodC1tYXBwZXIuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBSZW5kZXJQYXNzTGlnaHRtYXBwZXIgZXh0ZW5kcyBSZW5kZXJQYXNzIHtcbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3MvYmluZC1ncm91cC5qcycpLkJpbmRHcm91cFtdfSAqL1xuICAgIHZpZXdCaW5kR3JvdXBzID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIHJlbmRlcmVyLCBjYW1lcmEsIHdvcmxkQ2x1c3RlcnMsIHJlY2VpdmVycywgbGlnaHRBcnJheSkge1xuICAgICAgICBzdXBlcihkZXZpY2UpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgICAgICB0aGlzLndvcmxkQ2x1c3RlcnMgPSB3b3JsZENsdXN0ZXJzO1xuICAgICAgICB0aGlzLnJlY2VpdmVycyA9IHJlY2VpdmVycztcbiAgICAgICAgdGhpcy5saWdodEFycmF5ID0gbGlnaHRBcnJheTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnZpZXdCaW5kR3JvdXBzLmZvckVhY2goKGJnKSA9PiB7XG4gICAgICAgICAgICBiZy5kZWZhdWx0VW5pZm9ybUJ1ZmZlci5kZXN0cm95KCk7XG4gICAgICAgICAgICBiZy5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZpZXdCaW5kR3JvdXBzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZXhlY3V0ZSgpIHtcbiAgICAgICAgY29uc3QgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG4gICAgICAgIERlYnVnR3JhcGhpY3MucHVzaEdwdU1hcmtlcihkZXZpY2UsICdMaWdodG1hcHBlcicpO1xuXG4gICAgICAgIGNvbnN0IHsgcmVuZGVyZXIsIGNhbWVyYSwgcmVjZWl2ZXJzLCByZW5kZXJUYXJnZXQsIHdvcmxkQ2x1c3RlcnMsIGxpZ2h0QXJyYXkgfSA9IHRoaXM7XG5cbiAgICAgICAgcmVuZGVyZXIucmVuZGVyRm9yd2FyZExheWVyKGNhbWVyYSwgcmVuZGVyVGFyZ2V0LCBudWxsLCB1bmRlZmluZWQsIFNIQURFUl9GT1JXQVJESERSLCB0aGlzLnZpZXdCaW5kR3JvdXBzLCB7XG4gICAgICAgICAgICBtZXNoSW5zdGFuY2VzOiByZWNlaXZlcnMsXG4gICAgICAgICAgICBzcGxpdExpZ2h0czogbGlnaHRBcnJheSxcbiAgICAgICAgICAgIGxpZ2h0Q2x1c3RlcnM6IHdvcmxkQ2x1c3RlcnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgRGVidWdHcmFwaGljcy5wb3BHcHVNYXJrZXIoZGV2aWNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFJlbmRlclBhc3NMaWdodG1hcHBlciB9O1xuIl0sIm5hbWVzIjpbIlJlbmRlclBhc3NMaWdodG1hcHBlciIsIlJlbmRlclBhc3MiLCJjb25zdHJ1Y3RvciIsImRldmljZSIsInJlbmRlcmVyIiwiY2FtZXJhIiwid29ybGRDbHVzdGVycyIsInJlY2VpdmVycyIsImxpZ2h0QXJyYXkiLCJ2aWV3QmluZEdyb3VwcyIsImRlc3Ryb3kiLCJmb3JFYWNoIiwiYmciLCJkZWZhdWx0VW5pZm9ybUJ1ZmZlciIsImxlbmd0aCIsImV4ZWN1dGUiLCJEZWJ1Z0dyYXBoaWNzIiwicHVzaEdwdU1hcmtlciIsInJlbmRlclRhcmdldCIsInJlbmRlckZvcndhcmRMYXllciIsInVuZGVmaW5lZCIsIlNIQURFUl9GT1JXQVJESERSIiwibWVzaEluc3RhbmNlcyIsInNwbGl0TGlnaHRzIiwibGlnaHRDbHVzdGVycyIsInBvcEdwdU1hcmtlciJdLCJtYXBwaW5ncyI6Ijs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxxQkFBcUIsU0FBU0MsVUFBVSxDQUFDO0FBSTNDQyxFQUFBQSxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLFNBQVMsRUFBRUMsVUFBVSxFQUFFO0lBQ3hFLEtBQUssQ0FBQ0wsTUFBTSxDQUFDLENBQUE7QUFKakI7SUFBQSxJQUNBTSxDQUFBQSxjQUFjLEdBQUcsRUFBRSxDQUFBO0lBSWYsSUFBSSxDQUFDTCxRQUFRLEdBQUdBLFFBQVEsQ0FBQTtJQUN4QixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTSxDQUFBO0lBQ3BCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQSxhQUFhLENBQUE7SUFDbEMsSUFBSSxDQUFDQyxTQUFTLEdBQUdBLFNBQVMsQ0FBQTtJQUMxQixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVSxDQUFBO0FBQ2hDLEdBQUE7QUFFQUUsRUFBQUEsT0FBT0EsR0FBRztBQUNOLElBQUEsSUFBSSxDQUFDRCxjQUFjLENBQUNFLE9BQU8sQ0FBRUMsRUFBRSxJQUFLO0FBQ2hDQSxNQUFBQSxFQUFFLENBQUNDLG9CQUFvQixDQUFDSCxPQUFPLEVBQUUsQ0FBQTtNQUNqQ0UsRUFBRSxDQUFDRixPQUFPLEVBQUUsQ0FBQTtBQUNoQixLQUFDLENBQUMsQ0FBQTtBQUNGLElBQUEsSUFBSSxDQUFDRCxjQUFjLENBQUNLLE1BQU0sR0FBRyxDQUFDLENBQUE7QUFDbEMsR0FBQTtBQUVBQyxFQUFBQSxPQUFPQSxHQUFHO0FBQ04sSUFBQSxNQUFNWixNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNLENBQUE7QUFDMUJhLElBQUFBLGFBQWEsQ0FBQ0MsYUFBYSxDQUFDZCxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFbEQsTUFBTTtNQUFFQyxRQUFRO01BQUVDLE1BQU07TUFBRUUsU0FBUztNQUFFVyxZQUFZO01BQUVaLGFBQWE7QUFBRUUsTUFBQUEsVUFBQUE7QUFBVyxLQUFDLEdBQUcsSUFBSSxDQUFBO0FBRXJGSixJQUFBQSxRQUFRLENBQUNlLGtCQUFrQixDQUFDZCxNQUFNLEVBQUVhLFlBQVksRUFBRSxJQUFJLEVBQUVFLFNBQVMsRUFBRUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDWixjQUFjLEVBQUU7QUFDdkdhLE1BQUFBLGFBQWEsRUFBRWYsU0FBUztBQUN4QmdCLE1BQUFBLFdBQVcsRUFBRWYsVUFBVTtBQUN2QmdCLE1BQUFBLGFBQWEsRUFBRWxCLGFBQUFBO0FBQ25CLEtBQUMsQ0FBQyxDQUFBO0FBRUZVLElBQUFBLGFBQWEsQ0FBQ1MsWUFBWSxDQUFDdEIsTUFBTSxDQUFDLENBQUE7QUFDdEMsR0FBQTtBQUNKOzs7OyJ9
