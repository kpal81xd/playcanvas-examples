import { EventHandler } from '../../core/event-handler.js';
import { Quat } from '../../core/math/quat.js';
import { Vec3 } from '../../core/math/vec3.js';

/**
 * @type {Vec3[]}
 * @ignore
 */
const poolVec3 = [];

/**
 * @type {Quat[]}
 * @ignore
 */
const poolQuat = [];

/**
 * Represents XR hit test source, which provides access to hit results of real world geometry from
 * AR session.
 *
 * ```javascript
 * // start a hit test from a viewer origin forward
 * app.xr.hitTest.start({
 *     spaceType: pc.XRSPACE_VIEWER,
 *     callback: function (err, hitTestSource) {
 *         if (err) return;
 *         // subscribe to hit test results
 *         hitTestSource.on('result', function (position, rotation, inputSource, hitTestResult) {
 *             // position and rotation of hit test result
 *         });
 *     }
 * });
 * ```
 * @augments EventHandler
 * @category XR
 */
class XrHitTestSource extends EventHandler {
  /**
   * Create a new XrHitTestSource instance.
   *
   * @param {import('./xr-manager.js').XrManager} manager - WebXR Manager.
   * @param {*} xrHitTestSource - XRHitTestSource object that is created by WebXR API.
   * @param {boolean} transient - True if XRHitTestSource created for input source profile.
   * @param {null|import('./xr-input-source.js').XrInputSource} inputSource - Input Source for which hit test is created for, or null.
   * @hideconstructor
   */
  constructor(manager, xrHitTestSource, transient, inputSource = null) {
    super();
    /**
     * @type {import('./xr-manager.js').XrManager}
     * @private
     */
    this.manager = void 0;
    /**
     * @type {XRHitTestSource}
     * @private
     */
    this._xrHitTestSource = void 0;
    /**
     * @type {boolean}
     * @private
     */
    this._transient = void 0;
    /**
     * @type {null|import('./xr-input-source.js').XrInputSource}
     * @private
     */
    this._inputSource = void 0;
    this.manager = manager;
    this._xrHitTestSource = xrHitTestSource;
    this._transient = transient;
    this._inputSource = inputSource;
  }

  /**
   * Stop and remove hit test source.
   */
  remove() {
    if (!this._xrHitTestSource) return;
    const sources = this.manager.hitTest.sources;
    const ind = sources.indexOf(this);
    if (ind !== -1) sources.splice(ind, 1);
    this.onStop();
  }

  /** @ignore */
  onStop() {
    this._xrHitTestSource.cancel();
    this._xrHitTestSource = null;
    this.fire('remove');
    this.manager.hitTest.fire('remove', this);
  }

  /**
   * @param {*} frame - XRFrame from requestAnimationFrame callback.
   * @ignore
   */
  update(frame) {
    if (this._transient) {
      const transientResults = frame.getHitTestResultsForTransientInput(this._xrHitTestSource);
      for (let i = 0; i < transientResults.length; i++) {
        const transientResult = transientResults[i];
        if (!transientResult.results.length) continue;
        let inputSource;
        if (transientResult.inputSource) inputSource = this.manager.input._getByInputSource(transientResult.inputSource);
        this.updateHitResults(transientResult.results, inputSource);
      }
    } else {
      const results = frame.getHitTestResults(this._xrHitTestSource);
      if (!results.length) return;
      this.updateHitResults(results);
    }
  }

  /**
   * @param {XRTransientInputHitTestResult[]} results - Hit test results.
   * @param {null|import('./xr-input-source.js').XrInputSource} inputSource - Input source.
   * @private
   */
  updateHitResults(results, inputSource) {
    var _poolVec3$pop, _poolVec3$pop2, _poolQuat$pop;
    if (this._inputSource && this._inputSource !== inputSource) return;
    const origin = (_poolVec3$pop = poolVec3.pop()) != null ? _poolVec3$pop : new Vec3();
    if (inputSource) {
      origin.copy(inputSource.getOrigin());
    } else {
      origin.copy(this.manager.camera.getPosition());
    }
    let candidateDistance = Infinity;
    let candidateHitTestResult = null;
    const position = (_poolVec3$pop2 = poolVec3.pop()) != null ? _poolVec3$pop2 : new Vec3();
    const rotation = (_poolQuat$pop = poolQuat.pop()) != null ? _poolQuat$pop : new Quat();
    for (let i = 0; i < results.length; i++) {
      const pose = results[i].getPose(this.manager._referenceSpace);
      const distance = origin.distance(pose.transform.position);
      if (distance >= candidateDistance) continue;
      candidateDistance = distance;
      candidateHitTestResult = results[i];
      position.copy(pose.transform.position);
      rotation.copy(pose.transform.orientation);
    }
    this.fire('result', position, rotation, inputSource || this._inputSource, candidateHitTestResult);
    this.manager.hitTest.fire('result', this, position, rotation, inputSource || this._inputSource, candidateHitTestResult);
    poolVec3.push(origin);
    poolVec3.push(position);
    poolQuat.push(rotation);
  }
}
/**
 * Fired when {@link XrHitTestSource} is removed.
 *
 * @event
 * @example
 * hitTestSource.once('remove', () => {
 *     // hit test source has been removed
 * });
 */
XrHitTestSource.EVENT_REMOVE = 'remove';
/**
 * Fired when the hit test source receives new results. It provides transform information that
 * tries to match real world geometry. Callback provides the {@link Vec3} position, the
 * {@link Quat} rotation, the {@link XrInputSource} (if it is a transient hit test source)
 * and the {@link XRHitTestResult} object that is created by WebXR API.
 *
 * @event
 * @example
 * hitTestSource.on('result', (position, rotation, inputSource, hitTestReult) => {
 *     target.setPosition(position);
 *     target.setRotation(rotation);
 * });
 */
XrHitTestSource.EVENT_RESULT = 'result';

export { XrHitTestSource };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHItaGl0LXRlc3Qtc291cmNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL3hyL3hyLWhpdC10ZXN0LXNvdXJjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEhhbmRsZXIgfSBmcm9tICcuLi8uLi9jb3JlL2V2ZW50LWhhbmRsZXIuanMnO1xuaW1wb3J0IHsgUXVhdCB9IGZyb20gJy4uLy4uL2NvcmUvbWF0aC9xdWF0LmpzJztcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi8uLi9jb3JlL21hdGgvdmVjMy5qcyc7XG5cbi8qKlxuICogQHR5cGUge1ZlYzNbXX1cbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgcG9vbFZlYzMgPSBbXTtcblxuLyoqXG4gKiBAdHlwZSB7UXVhdFtdfVxuICogQGlnbm9yZVxuICovXG5jb25zdCBwb29sUXVhdCA9IFtdO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgWFIgaGl0IHRlc3Qgc291cmNlLCB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gaGl0IHJlc3VsdHMgb2YgcmVhbCB3b3JsZCBnZW9tZXRyeSBmcm9tXG4gKiBBUiBzZXNzaW9uLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIHN0YXJ0IGEgaGl0IHRlc3QgZnJvbSBhIHZpZXdlciBvcmlnaW4gZm9yd2FyZFxuICogYXBwLnhyLmhpdFRlc3Quc3RhcnQoe1xuICogICAgIHNwYWNlVHlwZTogcGMuWFJTUEFDRV9WSUVXRVIsXG4gKiAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChlcnIsIGhpdFRlc3RTb3VyY2UpIHtcbiAqICAgICAgICAgaWYgKGVycikgcmV0dXJuO1xuICogICAgICAgICAvLyBzdWJzY3JpYmUgdG8gaGl0IHRlc3QgcmVzdWx0c1xuICogICAgICAgICBoaXRUZXN0U291cmNlLm9uKCdyZXN1bHQnLCBmdW5jdGlvbiAocG9zaXRpb24sIHJvdGF0aW9uLCBpbnB1dFNvdXJjZSwgaGl0VGVzdFJlc3VsdCkge1xuICogICAgICAgICAgICAgLy8gcG9zaXRpb24gYW5kIHJvdGF0aW9uIG9mIGhpdCB0ZXN0IHJlc3VsdFxuICogICAgICAgICB9KTtcbiAqICAgICB9XG4gKiB9KTtcbiAqIGBgYFxuICogQGF1Z21lbnRzIEV2ZW50SGFuZGxlclxuICogQGNhdGVnb3J5IFhSXG4gKi9cbmNsYXNzIFhySGl0VGVzdFNvdXJjZSBleHRlbmRzIEV2ZW50SGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB7QGxpbmsgWHJIaXRUZXN0U291cmNlfSBpcyByZW1vdmVkLlxuICAgICAqXG4gICAgICogQGV2ZW50XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBoaXRUZXN0U291cmNlLm9uY2UoJ3JlbW92ZScsICgpID0+IHtcbiAgICAgKiAgICAgLy8gaGl0IHRlc3Qgc291cmNlIGhhcyBiZWVuIHJlbW92ZWRcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBzdGF0aWMgRVZFTlRfUkVNT1ZFID0gJ3JlbW92ZSc7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBoaXQgdGVzdCBzb3VyY2UgcmVjZWl2ZXMgbmV3IHJlc3VsdHMuIEl0IHByb3ZpZGVzIHRyYW5zZm9ybSBpbmZvcm1hdGlvbiB0aGF0XG4gICAgICogdHJpZXMgdG8gbWF0Y2ggcmVhbCB3b3JsZCBnZW9tZXRyeS4gQ2FsbGJhY2sgcHJvdmlkZXMgdGhlIHtAbGluayBWZWMzfSBwb3NpdGlvbiwgdGhlXG4gICAgICoge0BsaW5rIFF1YXR9IHJvdGF0aW9uLCB0aGUge0BsaW5rIFhySW5wdXRTb3VyY2V9IChpZiBpdCBpcyBhIHRyYW5zaWVudCBoaXQgdGVzdCBzb3VyY2UpXG4gICAgICogYW5kIHRoZSB7QGxpbmsgWFJIaXRUZXN0UmVzdWx0fSBvYmplY3QgdGhhdCBpcyBjcmVhdGVkIGJ5IFdlYlhSIEFQSS5cbiAgICAgKlxuICAgICAqIEBldmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogaGl0VGVzdFNvdXJjZS5vbigncmVzdWx0JywgKHBvc2l0aW9uLCByb3RhdGlvbiwgaW5wdXRTb3VyY2UsIGhpdFRlc3RSZXVsdCkgPT4ge1xuICAgICAqICAgICB0YXJnZXQuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAqICAgICB0YXJnZXQuc2V0Um90YXRpb24ocm90YXRpb24pO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHN0YXRpYyBFVkVOVF9SRVNVTFQgPSAncmVzdWx0JztcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtpbXBvcnQoJy4veHItbWFuYWdlci5qcycpLlhyTWFuYWdlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG1hbmFnZXI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7WFJIaXRUZXN0U291cmNlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3hySGl0VGVzdFNvdXJjZTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3RyYW5zaWVudDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsfGltcG9ydCgnLi94ci1pbnB1dC1zb3VyY2UuanMnKS5YcklucHV0U291cmNlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2lucHV0U291cmNlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFhySGl0VGVzdFNvdXJjZSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuL3hyLW1hbmFnZXIuanMnKS5Yck1hbmFnZXJ9IG1hbmFnZXIgLSBXZWJYUiBNYW5hZ2VyLlxuICAgICAqIEBwYXJhbSB7Kn0geHJIaXRUZXN0U291cmNlIC0gWFJIaXRUZXN0U291cmNlIG9iamVjdCB0aGF0IGlzIGNyZWF0ZWQgYnkgV2ViWFIgQVBJLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdHJhbnNpZW50IC0gVHJ1ZSBpZiBYUkhpdFRlc3RTb3VyY2UgY3JlYXRlZCBmb3IgaW5wdXQgc291cmNlIHByb2ZpbGUuXG4gICAgICogQHBhcmFtIHtudWxsfGltcG9ydCgnLi94ci1pbnB1dC1zb3VyY2UuanMnKS5YcklucHV0U291cmNlfSBpbnB1dFNvdXJjZSAtIElucHV0IFNvdXJjZSBmb3Igd2hpY2ggaGl0IHRlc3QgaXMgY3JlYXRlZCBmb3IsIG9yIG51bGwuXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1hbmFnZXIsIHhySGl0VGVzdFNvdXJjZSwgdHJhbnNpZW50LCBpbnB1dFNvdXJjZSA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgICAgICB0aGlzLl94ckhpdFRlc3RTb3VyY2UgPSB4ckhpdFRlc3RTb3VyY2U7XG4gICAgICAgIHRoaXMuX3RyYW5zaWVudCA9IHRyYW5zaWVudDtcbiAgICAgICAgdGhpcy5faW5wdXRTb3VyY2UgPSBpbnB1dFNvdXJjZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIGFuZCByZW1vdmUgaGl0IHRlc3Qgc291cmNlLlxuICAgICAqL1xuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl94ckhpdFRlc3RTb3VyY2UpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc291cmNlcyA9IHRoaXMubWFuYWdlci5oaXRUZXN0LnNvdXJjZXM7XG4gICAgICAgIGNvbnN0IGluZCA9IHNvdXJjZXMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgaWYgKGluZCAhPT0gLTEpIHNvdXJjZXMuc3BsaWNlKGluZCwgMSk7XG5cbiAgICAgICAgdGhpcy5vblN0b3AoKTtcbiAgICB9XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIG9uU3RvcCgpIHtcbiAgICAgICAgdGhpcy5feHJIaXRUZXN0U291cmNlLmNhbmNlbCgpO1xuICAgICAgICB0aGlzLl94ckhpdFRlc3RTb3VyY2UgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZmlyZSgncmVtb3ZlJyk7XG4gICAgICAgIHRoaXMubWFuYWdlci5oaXRUZXN0LmZpcmUoJ3JlbW92ZScsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Kn0gZnJhbWUgLSBYUkZyYW1lIGZyb20gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGNhbGxiYWNrLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB1cGRhdGUoZnJhbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zaWVudCkge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNpZW50UmVzdWx0cyA9IGZyYW1lLmdldEhpdFRlc3RSZXN1bHRzRm9yVHJhbnNpZW50SW5wdXQodGhpcy5feHJIaXRUZXN0U291cmNlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNpZW50UmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zaWVudFJlc3VsdCA9IHRyYW5zaWVudFJlc3VsdHNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zaWVudFJlc3VsdC5yZXN1bHRzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRTb3VyY2U7XG5cbiAgICAgICAgICAgICAgICBpZiAodHJhbnNpZW50UmVzdWx0LmlucHV0U291cmNlKVxuICAgICAgICAgICAgICAgICAgICBpbnB1dFNvdXJjZSA9IHRoaXMubWFuYWdlci5pbnB1dC5fZ2V0QnlJbnB1dFNvdXJjZSh0cmFuc2llbnRSZXN1bHQuaW5wdXRTb3VyY2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIaXRSZXN1bHRzKHRyYW5zaWVudFJlc3VsdC5yZXN1bHRzLCBpbnB1dFNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gZnJhbWUuZ2V0SGl0VGVzdFJlc3VsdHModGhpcy5feHJIaXRUZXN0U291cmNlKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0cy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhpdFJlc3VsdHMocmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1hSVHJhbnNpZW50SW5wdXRIaXRUZXN0UmVzdWx0W119IHJlc3VsdHMgLSBIaXQgdGVzdCByZXN1bHRzLlxuICAgICAqIEBwYXJhbSB7bnVsbHxpbXBvcnQoJy4veHItaW5wdXQtc291cmNlLmpzJykuWHJJbnB1dFNvdXJjZX0gaW5wdXRTb3VyY2UgLSBJbnB1dCBzb3VyY2UuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVIaXRSZXN1bHRzKHJlc3VsdHMsIGlucHV0U291cmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnB1dFNvdXJjZSAmJiB0aGlzLl9pbnB1dFNvdXJjZSAhPT0gaW5wdXRTb3VyY2UpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgb3JpZ2luID0gcG9vbFZlYzMucG9wKCkgPz8gbmV3IFZlYzMoKTtcblxuICAgICAgICBpZiAoaW5wdXRTb3VyY2UpIHtcbiAgICAgICAgICAgIG9yaWdpbi5jb3B5KGlucHV0U291cmNlLmdldE9yaWdpbigpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9yaWdpbi5jb3B5KHRoaXMubWFuYWdlci5jYW1lcmEuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2FuZGlkYXRlRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZUhpdFRlc3RSZXN1bHQgPSBudWxsO1xuXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9vbFZlYzMucG9wKCkgPz8gbmV3IFZlYzMoKTtcbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBwb29sUXVhdC5wb3AoKSA/PyBuZXcgUXVhdCgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcG9zZSA9IHJlc3VsdHNbaV0uZ2V0UG9zZSh0aGlzLm1hbmFnZXIuX3JlZmVyZW5jZVNwYWNlKTtcblxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBvcmlnaW4uZGlzdGFuY2UocG9zZS50cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKGRpc3RhbmNlID49IGNhbmRpZGF0ZURpc3RhbmNlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjYW5kaWRhdGVEaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgY2FuZGlkYXRlSGl0VGVzdFJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgICAgICBwb3NpdGlvbi5jb3B5KHBvc2UudHJhbnNmb3JtLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIHJvdGF0aW9uLmNvcHkocG9zZS50cmFuc2Zvcm0ub3JpZW50YXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maXJlKCdyZXN1bHQnLCBwb3NpdGlvbiwgcm90YXRpb24sIGlucHV0U291cmNlIHx8IHRoaXMuX2lucHV0U291cmNlLCBjYW5kaWRhdGVIaXRUZXN0UmVzdWx0KTtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmhpdFRlc3QuZmlyZSgncmVzdWx0JywgdGhpcywgcG9zaXRpb24sIHJvdGF0aW9uLCBpbnB1dFNvdXJjZSB8fCB0aGlzLl9pbnB1dFNvdXJjZSwgY2FuZGlkYXRlSGl0VGVzdFJlc3VsdCk7XG5cbiAgICAgICAgcG9vbFZlYzMucHVzaChvcmlnaW4pO1xuICAgICAgICBwb29sVmVjMy5wdXNoKHBvc2l0aW9uKTtcbiAgICAgICAgcG9vbFF1YXQucHVzaChyb3RhdGlvbik7XG4gICAgfVxufVxuXG5leHBvcnQgeyBYckhpdFRlc3RTb3VyY2UgfTtcbiJdLCJuYW1lcyI6WyJwb29sVmVjMyIsInBvb2xRdWF0IiwiWHJIaXRUZXN0U291cmNlIiwiRXZlbnRIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJtYW5hZ2VyIiwieHJIaXRUZXN0U291cmNlIiwidHJhbnNpZW50IiwiaW5wdXRTb3VyY2UiLCJfeHJIaXRUZXN0U291cmNlIiwiX3RyYW5zaWVudCIsIl9pbnB1dFNvdXJjZSIsInJlbW92ZSIsInNvdXJjZXMiLCJoaXRUZXN0IiwiaW5kIiwiaW5kZXhPZiIsInNwbGljZSIsIm9uU3RvcCIsImNhbmNlbCIsImZpcmUiLCJ1cGRhdGUiLCJmcmFtZSIsInRyYW5zaWVudFJlc3VsdHMiLCJnZXRIaXRUZXN0UmVzdWx0c0ZvclRyYW5zaWVudElucHV0IiwiaSIsImxlbmd0aCIsInRyYW5zaWVudFJlc3VsdCIsInJlc3VsdHMiLCJpbnB1dCIsIl9nZXRCeUlucHV0U291cmNlIiwidXBkYXRlSGl0UmVzdWx0cyIsImdldEhpdFRlc3RSZXN1bHRzIiwiX3Bvb2xWZWMzJHBvcCIsIl9wb29sVmVjMyRwb3AyIiwiX3Bvb2xRdWF0JHBvcCIsIm9yaWdpbiIsInBvcCIsIlZlYzMiLCJjb3B5IiwiZ2V0T3JpZ2luIiwiY2FtZXJhIiwiZ2V0UG9zaXRpb24iLCJjYW5kaWRhdGVEaXN0YW5jZSIsIkluZmluaXR5IiwiY2FuZGlkYXRlSGl0VGVzdFJlc3VsdCIsInBvc2l0aW9uIiwicm90YXRpb24iLCJRdWF0IiwicG9zZSIsImdldFBvc2UiLCJfcmVmZXJlbmNlU3BhY2UiLCJkaXN0YW5jZSIsInRyYW5zZm9ybSIsIm9yaWVudGF0aW9uIiwicHVzaCIsIkVWRU5UX1JFTU9WRSIsIkVWRU5UX1JFU1VMVCJdLCJtYXBwaW5ncyI6Ijs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsUUFBUSxHQUFHLEVBQUUsQ0FBQTs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxRQUFRLEdBQUcsRUFBRSxDQUFB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
