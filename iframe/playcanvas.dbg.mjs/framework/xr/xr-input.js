import { EventHandler } from '../../core/event-handler.js';
import { platform } from '../../core/platform.js';
import { XrInputSource } from './xr-input-source.js';

/**
 * Provides access to input sources for WebXR.
 *
 * Input sources represent:
 *
 * - hand held controllers - and their optional capabilities: gamepad and vibration
 * - hands - with their individual joints
 * - transient sources - such as touch screen taps and voice commands
 *
 * @augments EventHandler
 * @category XR
 */
class XrInput extends EventHandler {
  /**
   * Create a new XrInput instance.
   *
   * @param {import('./xr-manager.js').XrManager} manager - WebXR Manager.
   * @hideconstructor
   */
  constructor(manager) {
    var _window$XRPose;
    super();
    /**
     * @type {import('./xr-manager.js').XrManager}
     * @private
     */
    this.manager = void 0;
    /**
     * @type {XrInputSource[]}
     * @private
     */
    this._inputSources = [];
    /**
     * @type {Function}
     * @private
     */
    this._onInputSourcesChangeEvt = void 0;
    /**
     * @type {boolean}
     * @ignore
     */
    this.velocitiesSupported = false;
    this.manager = manager;
    this.velocitiesSupported = !!(platform.browser && (_window$XRPose = window.XRPose) != null && (_window$XRPose = _window$XRPose.prototype) != null && _window$XRPose.hasOwnProperty('linearVelocity'));
    this._onInputSourcesChangeEvt = evt => {
      this._onInputSourcesChange(evt);
    };
    this.manager.on('start', this._onSessionStart, this);
    this.manager.on('end', this._onSessionEnd, this);
  }

  /** @private */
  _onSessionStart() {
    const session = this.manager.session;
    session.addEventListener('inputsourceschange', this._onInputSourcesChangeEvt);
    session.addEventListener('select', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);
      inputSource.update(evt.frame);
      inputSource.fire('select', evt);
      this.fire('select', inputSource, evt);
    });
    session.addEventListener('selectstart', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);
      inputSource.update(evt.frame);
      inputSource._selecting = true;
      inputSource.fire('selectstart', evt);
      this.fire('selectstart', inputSource, evt);
    });
    session.addEventListener('selectend', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);
      inputSource.update(evt.frame);
      inputSource._selecting = false;
      inputSource.fire('selectend', evt);
      this.fire('selectend', inputSource, evt);
    });
    session.addEventListener('squeeze', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);
      inputSource.update(evt.frame);
      inputSource.fire('squeeze', evt);
      this.fire('squeeze', inputSource, evt);
    });
    session.addEventListener('squeezestart', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);
      inputSource.update(evt.frame);
      inputSource._squeezing = true;
      inputSource.fire('squeezestart', evt);
      this.fire('squeezestart', inputSource, evt);
    });
    session.addEventListener('squeezeend', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);
      inputSource.update(evt.frame);
      inputSource._squeezing = false;
      inputSource.fire('squeezeend', evt);
      this.fire('squeezeend', inputSource, evt);
    });

    // add input sources
    const inputSources = session.inputSources;
    for (let i = 0; i < inputSources.length; i++) {
      this._addInputSource(inputSources[i]);
    }
  }

  /** @private */
  _onSessionEnd() {
    let i = this._inputSources.length;
    while (i--) {
      const inputSource = this._inputSources[i];
      this._inputSources.splice(i, 1);
      inputSource.fire('remove');
      this.fire('remove', inputSource);
    }
    const session = this.manager.session;
    session.removeEventListener('inputsourceschange', this._onInputSourcesChangeEvt);
  }

  /**
   * @param {XRInputSourcesChangeEvent} evt - WebXR input sources change event.
   * @private
   */
  _onInputSourcesChange(evt) {
    // remove
    for (let i = 0; i < evt.removed.length; i++) {
      this._removeInputSource(evt.removed[i]);
    }

    // add
    for (let i = 0; i < evt.added.length; i++) {
      this._addInputSource(evt.added[i]);
    }
  }

  /**
   * @param {XRInputSource} xrInputSource - Input source to search for.
   * @returns {XrInputSource|null} The input source that matches the given WebXR input source or
   * null if no match is found.
   * @private
   */
  _getByInputSource(xrInputSource) {
    for (let i = 0; i < this._inputSources.length; i++) {
      if (this._inputSources[i].inputSource === xrInputSource) {
        return this._inputSources[i];
      }
    }
    return null;
  }

  /**
   * @param {XRInputSource} xrInputSource - Input source to add.
   * @private
   */
  _addInputSource(xrInputSource) {
    if (this._getByInputSource(xrInputSource)) return;
    const inputSource = new XrInputSource(this.manager, xrInputSource);
    this._inputSources.push(inputSource);
    this.fire('add', inputSource);
  }

  /**
   * @param {XRInputSource} xrInputSource - Input source to remove.
   * @private
   */
  _removeInputSource(xrInputSource) {
    for (let i = 0; i < this._inputSources.length; i++) {
      if (this._inputSources[i].inputSource !== xrInputSource) continue;
      const inputSource = this._inputSources[i];
      this._inputSources.splice(i, 1);
      let h = inputSource.hitTestSources.length;
      while (h--) {
        inputSource.hitTestSources[h].remove();
      }
      inputSource.fire('remove');
      this.fire('remove', inputSource);
      return;
    }
  }

  /**
   * @param {*} frame - XRFrame from requestAnimationFrame callback.
   * @ignore
   */
  update(frame) {
    for (let i = 0; i < this._inputSources.length; i++) {
      this._inputSources[i].update(frame);
    }
  }

  /**
   * List of active {@link XrInputSource} instances.
   *
   * @type {XrInputSource[]}
   */
  get inputSources() {
    return this._inputSources;
  }
}
/**
 * Fired when a new {@link XrInputSource} is added to the list. The handler is passed the
 * {@link XrInputSource} that has been added.
 *
 * @event
 * @example
 * app.xr.input.on('add', (inputSource) => {
 *     // new input source is added
 * });
 */
XrInput.EVENT_ADD = 'add';
/**
 * Fired when an {@link XrInputSource} is removed from the list. The handler is passed the
 * {@link XrInputSource} that has been removed.
 *
 * @event
 * @example
 * app.xr.input.on('remove', (inputSource) => {
 *     // input source is removed
 * });
 */
XrInput.EVENT_REMOVE = 'remove';
/**
 * Fired when {@link XrInputSource} has triggered primary action. This could be pressing a
 * trigger button, or touching a screen. The handler is passed the {@link XrInputSource} that
 * triggered the select event and the XRInputSourceEvent event from the WebXR API.
 *
 * @event
 * @example
 * const ray = new pc.Ray();
 * app.xr.input.on('select', (inputSource, evt) => {
 *     ray.set(inputSource.getOrigin(), inputSource.getDirection());
 *     if (obj.intersectsRay(ray)) {
 *         // selected an object with input source
 *     }
 * });
 */
XrInput.EVENT_SELECT = 'select';
/**
 * Fired when {@link XrInputSource} has started to trigger primary action. The handler is
 * passed the {@link XrInputSource} that triggered the selectstart event and the
 * XRInputSourceEvent event from the WebXR API.
 *
 * @event
 * @example
 * app.xr.input.on('selectstart', (inputSource, evt) => {
 *     console.log('Select started');
 * });
 */
XrInput.EVENT_SELECTSTART = 'selectstart';
/**
 * Fired when {@link XrInputSource} has ended triggering primary action. The handler is passed
 * the {@link XrInputSource} that triggered the selectend event and the XRInputSourceEvent
 * event from the WebXR API.
 *
 * @event
 * @example
 * app.xr.input.on('selectend', (inputSource, evt) => {
 *     console.log('Select ended');
 * });
 */
XrInput.EVENT_SELECTEND = 'selectend';
/**
 * Fired when {@link XrInputSource} has triggered squeeze action. This is associated with
 * "grabbing" action on the controllers. The handler is passed the {@link XrInputSource} that
 * triggered the squeeze event and the XRInputSourceEvent event from the WebXR API.
 *
 * @event
 * @example
 * app.xr.input.on('squeeze', (inputSource, evt) => {
 *     console.log('Squeeze');
 * });
 */
XrInput.EVENT_SQUEEZE = 'squeeze';
/**
 * Fired when {@link XrInputSource} has started to trigger sqeeze action. The handler is
 * passed the {@link XrInputSource} that triggered the squeezestart event and the
 * XRInputSourceEvent event from the WebXR API.
 *
 * @event
 * @example
 * app.xr.input.on('squeezestart', (inputSource, evt) => {
 *     if (obj.containsPoint(inputSource.getPosition())) {
 *         // grabbed an object
 *     }
 * });
 */
XrInput.EVENT_SQUEEZESTART = 'squeezestart';
/**
 * Fired when {@link XrInputSource} has ended triggering sqeeze action. The handler is passed
 * the {@link XrInputSource} that triggered the squeezeend event and the XRInputSourceEvent
 * event from the WebXR API.
 *
 * @event
 * @example
 * app.xr.input.on('squeezeend', (inputSource, evt) => {
 *     console.log('Squeeze ended');
 * });
 */
XrInput.EVENT_SQUEEZEEND = 'squeezeend';

export { XrInput };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHItaW5wdXQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsveHIveHItaW5wdXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vY29yZS9ldmVudC1oYW5kbGVyLmpzJztcbmltcG9ydCB7IHBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vY29yZS9wbGF0Zm9ybS5qcyc7XG5pbXBvcnQgeyBYcklucHV0U291cmNlIH0gZnJvbSAnLi94ci1pbnB1dC1zb3VyY2UuanMnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byBpbnB1dCBzb3VyY2VzIGZvciBXZWJYUi5cbiAqXG4gKiBJbnB1dCBzb3VyY2VzIHJlcHJlc2VudDpcbiAqXG4gKiAtIGhhbmQgaGVsZCBjb250cm9sbGVycyAtIGFuZCB0aGVpciBvcHRpb25hbCBjYXBhYmlsaXRpZXM6IGdhbWVwYWQgYW5kIHZpYnJhdGlvblxuICogLSBoYW5kcyAtIHdpdGggdGhlaXIgaW5kaXZpZHVhbCBqb2ludHNcbiAqIC0gdHJhbnNpZW50IHNvdXJjZXMgLSBzdWNoIGFzIHRvdWNoIHNjcmVlbiB0YXBzIGFuZCB2b2ljZSBjb21tYW5kc1xuICpcbiAqIEBhdWdtZW50cyBFdmVudEhhbmRsZXJcbiAqIEBjYXRlZ29yeSBYUlxuICovXG5jbGFzcyBYcklucHV0IGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgbmV3IHtAbGluayBYcklucHV0U291cmNlfSBpcyBhZGRlZCB0byB0aGUgbGlzdC4gVGhlIGhhbmRsZXIgaXMgcGFzc2VkIHRoZVxuICAgICAqIHtAbGluayBYcklucHV0U291cmNlfSB0aGF0IGhhcyBiZWVuIGFkZGVkLlxuICAgICAqXG4gICAgICogQGV2ZW50XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhcHAueHIuaW5wdXQub24oJ2FkZCcsIChpbnB1dFNvdXJjZSkgPT4ge1xuICAgICAqICAgICAvLyBuZXcgaW5wdXQgc291cmNlIGlzIGFkZGVkXG4gICAgICogfSk7XG4gICAgICovXG4gICAgc3RhdGljIEVWRU5UX0FERCA9ICdhZGQnO1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhbiB7QGxpbmsgWHJJbnB1dFNvdXJjZX0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LiBUaGUgaGFuZGxlciBpcyBwYXNzZWQgdGhlXG4gICAgICoge0BsaW5rIFhySW5wdXRTb3VyY2V9IHRoYXQgaGFzIGJlZW4gcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIEBldmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogYXBwLnhyLmlucHV0Lm9uKCdyZW1vdmUnLCAoaW5wdXRTb3VyY2UpID0+IHtcbiAgICAgKiAgICAgLy8gaW5wdXQgc291cmNlIGlzIHJlbW92ZWRcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBzdGF0aWMgRVZFTlRfUkVNT1ZFID0gJ3JlbW92ZSc7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHtAbGluayBYcklucHV0U291cmNlfSBoYXMgdHJpZ2dlcmVkIHByaW1hcnkgYWN0aW9uLiBUaGlzIGNvdWxkIGJlIHByZXNzaW5nIGFcbiAgICAgKiB0cmlnZ2VyIGJ1dHRvbiwgb3IgdG91Y2hpbmcgYSBzY3JlZW4uIFRoZSBoYW5kbGVyIGlzIHBhc3NlZCB0aGUge0BsaW5rIFhySW5wdXRTb3VyY2V9IHRoYXRcbiAgICAgKiB0cmlnZ2VyZWQgdGhlIHNlbGVjdCBldmVudCBhbmQgdGhlIFhSSW5wdXRTb3VyY2VFdmVudCBldmVudCBmcm9tIHRoZSBXZWJYUiBBUEkuXG4gICAgICpcbiAgICAgKiBAZXZlbnRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHJheSA9IG5ldyBwYy5SYXkoKTtcbiAgICAgKiBhcHAueHIuaW5wdXQub24oJ3NlbGVjdCcsIChpbnB1dFNvdXJjZSwgZXZ0KSA9PiB7XG4gICAgICogICAgIHJheS5zZXQoaW5wdXRTb3VyY2UuZ2V0T3JpZ2luKCksIGlucHV0U291cmNlLmdldERpcmVjdGlvbigpKTtcbiAgICAgKiAgICAgaWYgKG9iai5pbnRlcnNlY3RzUmF5KHJheSkpIHtcbiAgICAgKiAgICAgICAgIC8vIHNlbGVjdGVkIGFuIG9iamVjdCB3aXRoIGlucHV0IHNvdXJjZVxuICAgICAqICAgICB9XG4gICAgICogfSk7XG4gICAgICovXG4gICAgc3RhdGljIEVWRU5UX1NFTEVDVCA9ICdzZWxlY3QnO1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB7QGxpbmsgWHJJbnB1dFNvdXJjZX0gaGFzIHN0YXJ0ZWQgdG8gdHJpZ2dlciBwcmltYXJ5IGFjdGlvbi4gVGhlIGhhbmRsZXIgaXNcbiAgICAgKiBwYXNzZWQgdGhlIHtAbGluayBYcklucHV0U291cmNlfSB0aGF0IHRyaWdnZXJlZCB0aGUgc2VsZWN0c3RhcnQgZXZlbnQgYW5kIHRoZVxuICAgICAqIFhSSW5wdXRTb3VyY2VFdmVudCBldmVudCBmcm9tIHRoZSBXZWJYUiBBUEkuXG4gICAgICpcbiAgICAgKiBAZXZlbnRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGFwcC54ci5pbnB1dC5vbignc2VsZWN0c3RhcnQnLCAoaW5wdXRTb3VyY2UsIGV2dCkgPT4ge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnU2VsZWN0IHN0YXJ0ZWQnKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBzdGF0aWMgRVZFTlRfU0VMRUNUU1RBUlQgPSAnc2VsZWN0c3RhcnQnO1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB7QGxpbmsgWHJJbnB1dFNvdXJjZX0gaGFzIGVuZGVkIHRyaWdnZXJpbmcgcHJpbWFyeSBhY3Rpb24uIFRoZSBoYW5kbGVyIGlzIHBhc3NlZFxuICAgICAqIHRoZSB7QGxpbmsgWHJJbnB1dFNvdXJjZX0gdGhhdCB0cmlnZ2VyZWQgdGhlIHNlbGVjdGVuZCBldmVudCBhbmQgdGhlIFhSSW5wdXRTb3VyY2VFdmVudFxuICAgICAqIGV2ZW50IGZyb20gdGhlIFdlYlhSIEFQSS5cbiAgICAgKlxuICAgICAqIEBldmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogYXBwLnhyLmlucHV0Lm9uKCdzZWxlY3RlbmQnLCAoaW5wdXRTb3VyY2UsIGV2dCkgPT4ge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnU2VsZWN0IGVuZGVkJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgc3RhdGljIEVWRU5UX1NFTEVDVEVORCA9ICdzZWxlY3RlbmQnO1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB7QGxpbmsgWHJJbnB1dFNvdXJjZX0gaGFzIHRyaWdnZXJlZCBzcXVlZXplIGFjdGlvbi4gVGhpcyBpcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiBcImdyYWJiaW5nXCIgYWN0aW9uIG9uIHRoZSBjb250cm9sbGVycy4gVGhlIGhhbmRsZXIgaXMgcGFzc2VkIHRoZSB7QGxpbmsgWHJJbnB1dFNvdXJjZX0gdGhhdFxuICAgICAqIHRyaWdnZXJlZCB0aGUgc3F1ZWV6ZSBldmVudCBhbmQgdGhlIFhSSW5wdXRTb3VyY2VFdmVudCBldmVudCBmcm9tIHRoZSBXZWJYUiBBUEkuXG4gICAgICpcbiAgICAgKiBAZXZlbnRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGFwcC54ci5pbnB1dC5vbignc3F1ZWV6ZScsIChpbnB1dFNvdXJjZSwgZXZ0KSA9PiB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdTcXVlZXplJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgc3RhdGljIEVWRU5UX1NRVUVFWkUgPSAnc3F1ZWV6ZSc7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHtAbGluayBYcklucHV0U291cmNlfSBoYXMgc3RhcnRlZCB0byB0cmlnZ2VyIHNxZWV6ZSBhY3Rpb24uIFRoZSBoYW5kbGVyIGlzXG4gICAgICogcGFzc2VkIHRoZSB7QGxpbmsgWHJJbnB1dFNvdXJjZX0gdGhhdCB0cmlnZ2VyZWQgdGhlIHNxdWVlemVzdGFydCBldmVudCBhbmQgdGhlXG4gICAgICogWFJJbnB1dFNvdXJjZUV2ZW50IGV2ZW50IGZyb20gdGhlIFdlYlhSIEFQSS5cbiAgICAgKlxuICAgICAqIEBldmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogYXBwLnhyLmlucHV0Lm9uKCdzcXVlZXplc3RhcnQnLCAoaW5wdXRTb3VyY2UsIGV2dCkgPT4ge1xuICAgICAqICAgICBpZiAob2JqLmNvbnRhaW5zUG9pbnQoaW5wdXRTb3VyY2UuZ2V0UG9zaXRpb24oKSkpIHtcbiAgICAgKiAgICAgICAgIC8vIGdyYWJiZWQgYW4gb2JqZWN0XG4gICAgICogICAgIH1cbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBzdGF0aWMgRVZFTlRfU1FVRUVaRVNUQVJUID0gJ3NxdWVlemVzdGFydCc7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHtAbGluayBYcklucHV0U291cmNlfSBoYXMgZW5kZWQgdHJpZ2dlcmluZyBzcWVlemUgYWN0aW9uLiBUaGUgaGFuZGxlciBpcyBwYXNzZWRcbiAgICAgKiB0aGUge0BsaW5rIFhySW5wdXRTb3VyY2V9IHRoYXQgdHJpZ2dlcmVkIHRoZSBzcXVlZXplZW5kIGV2ZW50IGFuZCB0aGUgWFJJbnB1dFNvdXJjZUV2ZW50XG4gICAgICogZXZlbnQgZnJvbSB0aGUgV2ViWFIgQVBJLlxuICAgICAqXG4gICAgICogQGV2ZW50XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhcHAueHIuaW5wdXQub24oJ3NxdWVlemVlbmQnLCAoaW5wdXRTb3VyY2UsIGV2dCkgPT4ge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnU3F1ZWV6ZSBlbmRlZCcpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHN0YXRpYyBFVkVOVF9TUVVFRVpFRU5EID0gJ3NxdWVlemVlbmQnO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2ltcG9ydCgnLi94ci1tYW5hZ2VyLmpzJykuWHJNYW5hZ2VyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbWFuYWdlcjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtYcklucHV0U291cmNlW119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5wdXRTb3VyY2VzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfb25JbnB1dFNvdXJjZXNDaGFuZ2VFdnQ7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdmVsb2NpdGllc1N1cHBvcnRlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFhySW5wdXQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi94ci1tYW5hZ2VyLmpzJykuWHJNYW5hZ2VyfSBtYW5hZ2VyIC0gV2ViWFIgTWFuYWdlci5cbiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWFuYWdlcikge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG4gICAgICAgIHRoaXMudmVsb2NpdGllc1N1cHBvcnRlZCA9ICEhKHBsYXRmb3JtLmJyb3dzZXIgJiYgd2luZG93LlhSUG9zZT8ucHJvdG90eXBlPy5oYXNPd25Qcm9wZXJ0eSgnbGluZWFyVmVsb2NpdHknKSk7XG5cbiAgICAgICAgdGhpcy5fb25JbnB1dFNvdXJjZXNDaGFuZ2VFdnQgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbklucHV0U291cmNlc0NoYW5nZShldnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubWFuYWdlci5vbignc3RhcnQnLCB0aGlzLl9vblNlc3Npb25TdGFydCwgdGhpcyk7XG4gICAgICAgIHRoaXMubWFuYWdlci5vbignZW5kJywgdGhpcy5fb25TZXNzaW9uRW5kLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBfb25TZXNzaW9uU3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLm1hbmFnZXIuc2Vzc2lvbjtcbiAgICAgICAgc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdpbnB1dHNvdXJjZXNjaGFuZ2UnLCB0aGlzLl9vbklucHV0U291cmNlc0NoYW5nZUV2dCk7XG5cbiAgICAgICAgc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3QnLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFNvdXJjZSA9IHRoaXMuX2dldEJ5SW5wdXRTb3VyY2UoZXZ0LmlucHV0U291cmNlKTtcbiAgICAgICAgICAgIGlucHV0U291cmNlLnVwZGF0ZShldnQuZnJhbWUpO1xuICAgICAgICAgICAgaW5wdXRTb3VyY2UuZmlyZSgnc2VsZWN0JywgZXZ0KTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnc2VsZWN0JywgaW5wdXRTb3VyY2UsIGV2dCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5wdXRTb3VyY2UgPSB0aGlzLl9nZXRCeUlucHV0U291cmNlKGV2dC5pbnB1dFNvdXJjZSk7XG4gICAgICAgICAgICBpbnB1dFNvdXJjZS51cGRhdGUoZXZ0LmZyYW1lKTtcbiAgICAgICAgICAgIGlucHV0U291cmNlLl9zZWxlY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgaW5wdXRTb3VyY2UuZmlyZSgnc2VsZWN0c3RhcnQnLCBldnQpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdzZWxlY3RzdGFydCcsIGlucHV0U291cmNlLCBldnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RlbmQnLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFNvdXJjZSA9IHRoaXMuX2dldEJ5SW5wdXRTb3VyY2UoZXZ0LmlucHV0U291cmNlKTtcbiAgICAgICAgICAgIGlucHV0U291cmNlLnVwZGF0ZShldnQuZnJhbWUpO1xuICAgICAgICAgICAgaW5wdXRTb3VyY2UuX3NlbGVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgaW5wdXRTb3VyY2UuZmlyZSgnc2VsZWN0ZW5kJywgZXZ0KTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnc2VsZWN0ZW5kJywgaW5wdXRTb3VyY2UsIGV2dCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcignc3F1ZWV6ZScsIChldnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0U291cmNlID0gdGhpcy5fZ2V0QnlJbnB1dFNvdXJjZShldnQuaW5wdXRTb3VyY2UpO1xuICAgICAgICAgICAgaW5wdXRTb3VyY2UudXBkYXRlKGV2dC5mcmFtZSk7XG4gICAgICAgICAgICBpbnB1dFNvdXJjZS5maXJlKCdzcXVlZXplJywgZXZ0KTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnc3F1ZWV6ZScsIGlucHV0U291cmNlLCBldnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdzcXVlZXplc3RhcnQnLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFNvdXJjZSA9IHRoaXMuX2dldEJ5SW5wdXRTb3VyY2UoZXZ0LmlucHV0U291cmNlKTtcbiAgICAgICAgICAgIGlucHV0U291cmNlLnVwZGF0ZShldnQuZnJhbWUpO1xuICAgICAgICAgICAgaW5wdXRTb3VyY2UuX3NxdWVlemluZyA9IHRydWU7XG4gICAgICAgICAgICBpbnB1dFNvdXJjZS5maXJlKCdzcXVlZXplc3RhcnQnLCBldnQpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdzcXVlZXplc3RhcnQnLCBpbnB1dFNvdXJjZSwgZXZ0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcignc3F1ZWV6ZWVuZCcsIChldnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0U291cmNlID0gdGhpcy5fZ2V0QnlJbnB1dFNvdXJjZShldnQuaW5wdXRTb3VyY2UpO1xuICAgICAgICAgICAgaW5wdXRTb3VyY2UudXBkYXRlKGV2dC5mcmFtZSk7XG4gICAgICAgICAgICBpbnB1dFNvdXJjZS5fc3F1ZWV6aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpbnB1dFNvdXJjZS5maXJlKCdzcXVlZXplZW5kJywgZXZ0KTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnc3F1ZWV6ZWVuZCcsIGlucHV0U291cmNlLCBldnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgaW5wdXQgc291cmNlc1xuICAgICAgICBjb25zdCBpbnB1dFNvdXJjZXMgPSBzZXNzaW9uLmlucHV0U291cmNlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dFNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZElucHV0U291cmNlKGlucHV0U291cmNlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBfb25TZXNzaW9uRW5kKCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMuX2lucHV0U291cmNlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0U291cmNlID0gdGhpcy5faW5wdXRTb3VyY2VzW2ldO1xuICAgICAgICAgICAgdGhpcy5faW5wdXRTb3VyY2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGlucHV0U291cmNlLmZpcmUoJ3JlbW92ZScpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdyZW1vdmUnLCBpbnB1dFNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5tYW5hZ2VyLnNlc3Npb247XG4gICAgICAgIHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXRzb3VyY2VzY2hhbmdlJywgdGhpcy5fb25JbnB1dFNvdXJjZXNDaGFuZ2VFdnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7WFJJbnB1dFNvdXJjZXNDaGFuZ2VFdmVudH0gZXZ0IC0gV2ViWFIgaW5wdXQgc291cmNlcyBjaGFuZ2UgZXZlbnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfb25JbnB1dFNvdXJjZXNDaGFuZ2UoZXZ0KSB7XG4gICAgICAgIC8vIHJlbW92ZVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2dC5yZW1vdmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVJbnB1dFNvdXJjZShldnQucmVtb3ZlZFtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldnQuYWRkZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZElucHV0U291cmNlKGV2dC5hZGRlZFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1hSSW5wdXRTb3VyY2V9IHhySW5wdXRTb3VyY2UgLSBJbnB1dCBzb3VyY2UgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7WHJJbnB1dFNvdXJjZXxudWxsfSBUaGUgaW5wdXQgc291cmNlIHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gV2ViWFIgaW5wdXQgc291cmNlIG9yXG4gICAgICogbnVsbCBpZiBubyBtYXRjaCBpcyBmb3VuZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRCeUlucHV0U291cmNlKHhySW5wdXRTb3VyY2UpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pbnB1dFNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dFNvdXJjZXNbaV0uaW5wdXRTb3VyY2UgPT09IHhySW5wdXRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRTb3VyY2VzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtYUklucHV0U291cmNlfSB4cklucHV0U291cmNlIC0gSW5wdXQgc291cmNlIHRvIGFkZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hZGRJbnB1dFNvdXJjZSh4cklucHV0U291cmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9nZXRCeUlucHV0U291cmNlKHhySW5wdXRTb3VyY2UpKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGlucHV0U291cmNlID0gbmV3IFhySW5wdXRTb3VyY2UodGhpcy5tYW5hZ2VyLCB4cklucHV0U291cmNlKTtcbiAgICAgICAgdGhpcy5faW5wdXRTb3VyY2VzLnB1c2goaW5wdXRTb3VyY2UpO1xuICAgICAgICB0aGlzLmZpcmUoJ2FkZCcsIGlucHV0U291cmNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1hSSW5wdXRTb3VyY2V9IHhySW5wdXRTb3VyY2UgLSBJbnB1dCBzb3VyY2UgdG8gcmVtb3ZlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbW92ZUlucHV0U291cmNlKHhySW5wdXRTb3VyY2UpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pbnB1dFNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dFNvdXJjZXNbaV0uaW5wdXRTb3VyY2UgIT09IHhySW5wdXRTb3VyY2UpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IGlucHV0U291cmNlID0gdGhpcy5faW5wdXRTb3VyY2VzW2ldO1xuICAgICAgICAgICAgdGhpcy5faW5wdXRTb3VyY2VzLnNwbGljZShpLCAxKTtcblxuICAgICAgICAgICAgbGV0IGggPSBpbnB1dFNvdXJjZS5oaXRUZXN0U291cmNlcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaC0tKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTb3VyY2UuaGl0VGVzdFNvdXJjZXNbaF0ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlucHV0U291cmNlLmZpcmUoJ3JlbW92ZScpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdyZW1vdmUnLCBpbnB1dFNvdXJjZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IGZyYW1lIC0gWFJGcmFtZSBmcm9tIHJlcXVlc3RBbmltYXRpb25GcmFtZSBjYWxsYmFjay5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdXBkYXRlKGZyYW1lKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faW5wdXRTb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dFNvdXJjZXNbaV0udXBkYXRlKGZyYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgYWN0aXZlIHtAbGluayBYcklucHV0U291cmNlfSBpbnN0YW5jZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7WHJJbnB1dFNvdXJjZVtdfVxuICAgICAqL1xuICAgIGdldCBpbnB1dFNvdXJjZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dFNvdXJjZXM7XG4gICAgfVxufVxuXG5leHBvcnQgeyBYcklucHV0IH07XG4iXSwibmFtZXMiOlsiWHJJbnB1dCIsIkV2ZW50SGFuZGxlciIsImNvbnN0cnVjdG9yIiwibWFuYWdlciIsIl93aW5kb3ckWFJQb3NlIiwiX2lucHV0U291cmNlcyIsIl9vbklucHV0U291cmNlc0NoYW5nZUV2dCIsInZlbG9jaXRpZXNTdXBwb3J0ZWQiLCJwbGF0Zm9ybSIsImJyb3dzZXIiLCJ3aW5kb3ciLCJYUlBvc2UiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImV2dCIsIl9vbklucHV0U291cmNlc0NoYW5nZSIsIm9uIiwiX29uU2Vzc2lvblN0YXJ0IiwiX29uU2Vzc2lvbkVuZCIsInNlc3Npb24iLCJhZGRFdmVudExpc3RlbmVyIiwiaW5wdXRTb3VyY2UiLCJfZ2V0QnlJbnB1dFNvdXJjZSIsInVwZGF0ZSIsImZyYW1lIiwiZmlyZSIsIl9zZWxlY3RpbmciLCJfc3F1ZWV6aW5nIiwiaW5wdXRTb3VyY2VzIiwiaSIsImxlbmd0aCIsIl9hZGRJbnB1dFNvdXJjZSIsInNwbGljZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVkIiwiX3JlbW92ZUlucHV0U291cmNlIiwiYWRkZWQiLCJ4cklucHV0U291cmNlIiwiWHJJbnB1dFNvdXJjZSIsInB1c2giLCJoIiwiaGl0VGVzdFNvdXJjZXMiLCJyZW1vdmUiLCJFVkVOVF9BREQiLCJFVkVOVF9SRU1PVkUiLCJFVkVOVF9TRUxFQ1QiLCJFVkVOVF9TRUxFQ1RTVEFSVCIsIkVWRU5UX1NFTEVDVEVORCIsIkVWRU5UX1NRVUVFWkUiLCJFVkVOVF9TUVVFRVpFU1RBUlQiLCJFVkVOVF9TUVVFRVpFRU5EIl0sIm1hcHBpbmdzIjoiOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsT0FBTyxTQUFTQyxZQUFZLENBQUM7QUFxSS9CO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXQSxDQUFDQyxPQUFPLEVBQUU7QUFBQSxJQUFBLElBQUFDLGNBQUEsQ0FBQTtBQUNqQixJQUFBLEtBQUssRUFBRSxDQUFBO0FBL0JYO0FBQ0o7QUFDQTtBQUNBO0FBSEksSUFBQSxJQUFBLENBSUFELE9BQU8s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
