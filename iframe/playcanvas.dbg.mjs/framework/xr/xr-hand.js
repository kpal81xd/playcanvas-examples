import { EventHandler } from '../../core/event-handler.js';
import { platform } from '../../core/platform.js';
import { Vec3 } from '../../core/math/vec3.js';
import { XRHAND_LEFT } from './constants.js';
import { XrFinger } from './xr-finger.js';
import { XrJoint } from './xr-joint.js';

/**
 * @type {string[][]}
 * @ignore
 */
let fingerJointIds = [];
const vecA = new Vec3();
const vecB = new Vec3();
const vecC = new Vec3();
if (platform.browser && window.XRHand) {
  fingerJointIds = [['thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip'], ['index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip'], ['middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip'], ['ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip'], ['pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip']];
}

/**
 * Represents a hand with fingers and joints.
 *
 * @augments EventHandler
 * @category XR
 */
class XrHand extends EventHandler {
  /**
   * Represents a hand with fingers and joints.
   *
   * @param {import('./xr-input-source.js').XrInputSource} inputSource - Input Source that hand
   * is related to.
   * @hideconstructor
   */
  constructor(inputSource) {
    super();
    /**
     * @type {import('./xr-manager.js').XrManager}
     * @private
     */
    this._manager = void 0;
    /**
     * @type {import('./xr-input-source.js').XrInputSource}
     * @private
     */
    this._inputSource = void 0;
    /**
     * @type {boolean}
     * @private
     */
    this._tracking = false;
    /**
     * @type {XrFinger[]}
     * @private
     */
    this._fingers = [];
    /**
     * @type {XrJoint[]}
     * @private
     */
    this._joints = [];
    /**
     * @type {Object<string, XrJoint>}
     * @private
     */
    this._jointsById = {};
    /**
     * @type {XrJoint[]}
     * @private
     */
    this._tips = [];
    /**
     * @type {XrJoint|null}
     * @private
     */
    this._wrist = null;
    const xrHand = inputSource._xrInputSource.hand;
    this._manager = inputSource._manager;
    this._inputSource = inputSource;
    if (xrHand.get('wrist')) {
      const joint = new XrJoint(0, 'wrist', this, null);
      this._wrist = joint;
      this._joints.push(joint);
      this._jointsById.wrist = joint;
    }
    for (let f = 0; f < fingerJointIds.length; f++) {
      const finger = new XrFinger(f, this);
      for (let j = 0; j < fingerJointIds[f].length; j++) {
        const jointId = fingerJointIds[f][j];
        if (!xrHand.get(jointId)) continue;
        const joint = new XrJoint(j, jointId, this, finger);
        this._joints.push(joint);
        this._jointsById[jointId] = joint;
        if (joint.tip) {
          this._tips.push(joint);
          finger._tip = joint;
        }
        finger._joints.push(joint);
      }
    }
  }

  /**
   * @param {*} frame - XRFrame from requestAnimationFrame callback.
   * @ignore
   */
  update(frame) {
    const xrInputSource = this._inputSource._xrInputSource;

    // joints
    for (let j = 0; j < this._joints.length; j++) {
      const joint = this._joints[j];
      const jointSpace = xrInputSource.hand.get(joint._id);
      if (jointSpace) {
        let pose;
        if (frame.session.visibilityState !== 'hidden') pose = frame.getJointPose(jointSpace, this._manager._referenceSpace);
        if (pose) {
          joint.update(pose);
          if (joint.wrist && !this._tracking) {
            this._tracking = true;
            this.fire('tracking');
          }
        } else if (joint.wrist) {
          // lost tracking

          if (this._tracking) {
            this._tracking = false;
            this.fire('trackinglost');
          }
          break;
        }
      }
    }
    const j1 = this._jointsById['thumb-metacarpal'];
    const j4 = this._jointsById['thumb-tip'];
    const j6 = this._jointsById['index-finger-phalanx-proximal'];
    const j9 = this._jointsById['index-finger-tip'];
    const j16 = this._jointsById['ring-finger-phalanx-proximal'];
    const j21 = this._jointsById['pinky-finger-phalanx-proximal'];

    // ray
    if (j1 && j4 && j6 && j9 && j16 && j21) {
      this._inputSource._dirtyRay = true;

      // ray origin
      // get point between thumb tip and index tip
      this._inputSource._rayLocal.origin.lerp(j4._localPosition, j9._localPosition, 0.5);

      // ray direction
      let jointL = j1;
      let jointR = j21;
      if (this._inputSource.handedness === XRHAND_LEFT) {
        const t = jointL;
        jointL = jointR;
        jointR = t;
      }

      // (A) calculate normal vector between 3 joints: wrist, thumb metacarpal, little phalanx proximal
      vecA.sub2(jointL._localPosition, this._wrist._localPosition);
      vecB.sub2(jointR._localPosition, this._wrist._localPosition);
      vecC.cross(vecA, vecB).normalize();

      // get point between: index phalanx proximal and right phalanx proximal
      vecA.lerp(j6._localPosition, j16._localPosition, 0.5);
      // (B) get vector between that point and a wrist
      vecA.sub(this._wrist._localPosition).normalize();

      // mix normal vector (A) with hand directional vector (B)
      this._inputSource._rayLocal.direction.lerp(vecC, vecA, 0.5).normalize();
    }

    // emulate squeeze events by folding all 4 fingers
    const squeezing = this._fingerIsClosed(1) && this._fingerIsClosed(2) && this._fingerIsClosed(3) && this._fingerIsClosed(4);
    if (squeezing) {
      if (!this._inputSource._squeezing) {
        this._inputSource._squeezing = true;
        this._inputSource.fire('squeezestart');
        this._manager.input.fire('squeezestart', this._inputSource);
      }
    } else {
      if (this._inputSource._squeezing) {
        this._inputSource._squeezing = false;
        this._inputSource.fire('squeeze');
        this._manager.input.fire('squeeze', this._inputSource);
        this._inputSource.fire('squeezeend');
        this._manager.input.fire('squeezeend', this._inputSource);
      }
    }
  }

  /**
   * @param {number} index - Finger index.
   * @returns {boolean} True if finger is closed and false otherwise.
   * @private
   */
  _fingerIsClosed(index) {
    const finger = this._fingers[index];
    vecA.sub2(finger.joints[0]._localPosition, finger.joints[1]._localPosition).normalize();
    vecB.sub2(finger.joints[2]._localPosition, finger.joints[3]._localPosition).normalize();
    return vecA.dot(vecB) < -0.8;
  }

  /**
   * Returns joint by its XRHand id.
   *
   * @param {string} id - Id of a joint based on specs ID's in XRHand: https://immersive-web.github.io/webxr-hand-input/#skeleton-joints-section.
   * @returns {XrJoint|null} Joint or null if not available.
   */
  getJointById(id) {
    return this._jointsById[id] || null;
  }

  /**
   * List of fingers of a hand.
   *
   * @type {XrFinger[]}
   */
  get fingers() {
    return this._fingers;
  }

  /**
   * List of joints of hand.
   *
   * @type {XrJoint[]}
   */
  get joints() {
    return this._joints;
  }

  /**
   * List of joints that are fingertips.
   *
   * @type {XrJoint[]}
   */
  get tips() {
    return this._tips;
  }

  /**
   * Wrist of a hand, or null if it is not available by WebXR underlying system.
   *
   * @type {XrJoint|null}
   */
  get wrist() {
    return this._wrist;
  }

  /**
   * True if tracking is available, otherwise tracking might be lost.
   *
   * @type {boolean}
   */
  get tracking() {
    return this._tracking;
  }
}
/**
 * Fired when tracking becomes available.
 *
 * @event
 * @example
 * hand.on('tracking', () => {
 *     console.log('Hand tracking is available');
 * });
 */
XrHand.EVENT_TRACKING = 'tracking';
/**
 * Fired when tracking is lost.
 *
 * @event
 * @example
 * hand.on('trackinglost', () => {
 *     console.log('Hand tracking is lost');
 * });
 */
XrHand.EVENT_TRACKINGLOST = 'trackinglost';

export { XrHand };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHItaGFuZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2ZyYW1ld29yay94ci94ci1oYW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gJy4uLy4uL2NvcmUvZXZlbnQtaGFuZGxlci5qcyc7XG5pbXBvcnQgeyBwbGF0Zm9ybSB9IGZyb20gJy4uLy4uL2NvcmUvcGxhdGZvcm0uanMnO1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uLy4uL2NvcmUvbWF0aC92ZWMzLmpzJztcblxuaW1wb3J0IHsgWFJIQU5EX0xFRlQgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBYckZpbmdlciB9IGZyb20gJy4veHItZmluZ2VyLmpzJztcbmltcG9ydCB7IFhySm9pbnQgfSBmcm9tICcuL3hyLWpvaW50LmpzJztcblxuXG4vKipcbiAqIEB0eXBlIHtzdHJpbmdbXVtdfVxuICogQGlnbm9yZVxuICovXG5sZXQgZmluZ2VySm9pbnRJZHMgPSBbXTtcblxuY29uc3QgdmVjQSA9IG5ldyBWZWMzKCk7XG5jb25zdCB2ZWNCID0gbmV3IFZlYzMoKTtcbmNvbnN0IHZlY0MgPSBuZXcgVmVjMygpO1xuXG5pZiAocGxhdGZvcm0uYnJvd3NlciAmJiB3aW5kb3cuWFJIYW5kKSB7XG4gICAgZmluZ2VySm9pbnRJZHMgPSBbXG4gICAgICAgIFsndGh1bWItbWV0YWNhcnBhbCcsICd0aHVtYi1waGFsYW54LXByb3hpbWFsJywgJ3RodW1iLXBoYWxhbngtZGlzdGFsJywgJ3RodW1iLXRpcCddLFxuICAgICAgICBbJ2luZGV4LWZpbmdlci1tZXRhY2FycGFsJywgJ2luZGV4LWZpbmdlci1waGFsYW54LXByb3hpbWFsJywgJ2luZGV4LWZpbmdlci1waGFsYW54LWludGVybWVkaWF0ZScsICdpbmRleC1maW5nZXItcGhhbGFueC1kaXN0YWwnLCAnaW5kZXgtZmluZ2VyLXRpcCddLFxuICAgICAgICBbJ21pZGRsZS1maW5nZXItbWV0YWNhcnBhbCcsICdtaWRkbGUtZmluZ2VyLXBoYWxhbngtcHJveGltYWwnLCAnbWlkZGxlLWZpbmdlci1waGFsYW54LWludGVybWVkaWF0ZScsICdtaWRkbGUtZmluZ2VyLXBoYWxhbngtZGlzdGFsJywgJ21pZGRsZS1maW5nZXItdGlwJ10sXG4gICAgICAgIFsncmluZy1maW5nZXItbWV0YWNhcnBhbCcsICdyaW5nLWZpbmdlci1waGFsYW54LXByb3hpbWFsJywgJ3JpbmctZmluZ2VyLXBoYWxhbngtaW50ZXJtZWRpYXRlJywgJ3JpbmctZmluZ2VyLXBoYWxhbngtZGlzdGFsJywgJ3JpbmctZmluZ2VyLXRpcCddLFxuICAgICAgICBbJ3Bpbmt5LWZpbmdlci1tZXRhY2FycGFsJywgJ3Bpbmt5LWZpbmdlci1waGFsYW54LXByb3hpbWFsJywgJ3Bpbmt5LWZpbmdlci1waGFsYW54LWludGVybWVkaWF0ZScsICdwaW5reS1maW5nZXItcGhhbGFueC1kaXN0YWwnLCAncGlua3ktZmluZ2VyLXRpcCddXG4gICAgXTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgaGFuZCB3aXRoIGZpbmdlcnMgYW5kIGpvaW50cy5cbiAqXG4gKiBAYXVnbWVudHMgRXZlbnRIYW5kbGVyXG4gKiBAY2F0ZWdvcnkgWFJcbiAqL1xuY2xhc3MgWHJIYW5kIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRyYWNraW5nIGJlY29tZXMgYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogQGV2ZW50XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBoYW5kLm9uKCd0cmFja2luZycsICgpID0+IHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ0hhbmQgdHJhY2tpbmcgaXMgYXZhaWxhYmxlJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgc3RhdGljIEVWRU5UX1RSQUNLSU5HID0gJ3RyYWNraW5nJztcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdHJhY2tpbmcgaXMgbG9zdC5cbiAgICAgKlxuICAgICAqIEBldmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogaGFuZC5vbigndHJhY2tpbmdsb3N0JywgKCkgPT4ge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnSGFuZCB0cmFja2luZyBpcyBsb3N0Jyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgc3RhdGljIEVWRU5UX1RSQUNLSU5HTE9TVCA9ICd0cmFja2luZ2xvc3QnO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2ltcG9ydCgnLi94ci1tYW5hZ2VyLmpzJykuWHJNYW5hZ2VyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21hbmFnZXI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7aW1wb3J0KCcuL3hyLWlucHV0LXNvdXJjZS5qcycpLlhySW5wdXRTb3VyY2V9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5wdXRTb3VyY2U7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF90cmFja2luZyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1hyRmluZ2VyW119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmluZ2VycyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1hySm9pbnRbXX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9qb2ludHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBYckpvaW50Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9qb2ludHNCeUlkID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7WHJKb2ludFtdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3RpcHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtYckpvaW50fG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfd3Jpc3QgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIGhhbmQgd2l0aCBmaW5nZXJzIGFuZCBqb2ludHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi94ci1pbnB1dC1zb3VyY2UuanMnKS5YcklucHV0U291cmNlfSBpbnB1dFNvdXJjZSAtIElucHV0IFNvdXJjZSB0aGF0IGhhbmRcbiAgICAgKiBpcyByZWxhdGVkIHRvLlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpbnB1dFNvdXJjZSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGNvbnN0IHhySGFuZCA9IGlucHV0U291cmNlLl94cklucHV0U291cmNlLmhhbmQ7XG5cbiAgICAgICAgdGhpcy5fbWFuYWdlciA9IGlucHV0U291cmNlLl9tYW5hZ2VyO1xuICAgICAgICB0aGlzLl9pbnB1dFNvdXJjZSA9IGlucHV0U291cmNlO1xuXG4gICAgICAgIGlmICh4ckhhbmQuZ2V0KCd3cmlzdCcpKSB7XG4gICAgICAgICAgICBjb25zdCBqb2ludCA9IG5ldyBYckpvaW50KDAsICd3cmlzdCcsIHRoaXMsIG51bGwpO1xuICAgICAgICAgICAgdGhpcy5fd3Jpc3QgPSBqb2ludDtcbiAgICAgICAgICAgIHRoaXMuX2pvaW50cy5wdXNoKGpvaW50KTtcbiAgICAgICAgICAgIHRoaXMuX2pvaW50c0J5SWQud3Jpc3QgPSBqb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGYgPSAwOyBmIDwgZmluZ2VySm9pbnRJZHMubGVuZ3RoOyBmKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbmdlciA9IG5ldyBYckZpbmdlcihmLCB0aGlzKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmaW5nZXJKb2ludElkc1tmXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGpvaW50SWQgPSBmaW5nZXJKb2ludElkc1tmXVtqXTtcbiAgICAgICAgICAgICAgICBpZiAoIXhySGFuZC5nZXQoam9pbnRJZCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgam9pbnQgPSBuZXcgWHJKb2ludChqLCBqb2ludElkLCB0aGlzLCBmaW5nZXIpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fam9pbnRzLnB1c2goam9pbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2pvaW50c0J5SWRbam9pbnRJZF0gPSBqb2ludDtcbiAgICAgICAgICAgICAgICBpZiAoam9pbnQudGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpcHMucHVzaChqb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIGZpbmdlci5fdGlwID0gam9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZmluZ2VyLl9qb2ludHMucHVzaChqb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IGZyYW1lIC0gWFJGcmFtZSBmcm9tIHJlcXVlc3RBbmltYXRpb25GcmFtZSBjYWxsYmFjay5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdXBkYXRlKGZyYW1lKSB7XG4gICAgICAgIGNvbnN0IHhySW5wdXRTb3VyY2UgPSB0aGlzLl9pbnB1dFNvdXJjZS5feHJJbnB1dFNvdXJjZTtcblxuICAgICAgICAvLyBqb2ludHNcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9qb2ludHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGpvaW50ID0gdGhpcy5fam9pbnRzW2pdO1xuICAgICAgICAgICAgY29uc3Qgam9pbnRTcGFjZSA9IHhySW5wdXRTb3VyY2UuaGFuZC5nZXQoam9pbnQuX2lkKTtcbiAgICAgICAgICAgIGlmIChqb2ludFNwYWNlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBvc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoZnJhbWUuc2Vzc2lvbi52aXNpYmlsaXR5U3RhdGUgIT09ICdoaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICBwb3NlID0gZnJhbWUuZ2V0Sm9pbnRQb3NlKGpvaW50U3BhY2UsIHRoaXMuX21hbmFnZXIuX3JlZmVyZW5jZVNwYWNlKTtcblxuICAgICAgICAgICAgICAgIGlmIChwb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW50LnVwZGF0ZShwb3NlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoam9pbnQud3Jpc3QgJiYgIXRoaXMuX3RyYWNraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFja2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoJ3RyYWNraW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGpvaW50LndyaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxvc3QgdHJhY2tpbmdcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHJhY2tpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoJ3RyYWNraW5nbG9zdCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGoxID0gdGhpcy5fam9pbnRzQnlJZFsndGh1bWItbWV0YWNhcnBhbCddO1xuICAgICAgICBjb25zdCBqNCA9IHRoaXMuX2pvaW50c0J5SWRbJ3RodW1iLXRpcCddO1xuICAgICAgICBjb25zdCBqNiA9IHRoaXMuX2pvaW50c0J5SWRbJ2luZGV4LWZpbmdlci1waGFsYW54LXByb3hpbWFsJ107XG4gICAgICAgIGNvbnN0IGo5ID0gdGhpcy5fam9pbnRzQnlJZFsnaW5kZXgtZmluZ2VyLXRpcCddO1xuICAgICAgICBjb25zdCBqMTYgPSB0aGlzLl9qb2ludHNCeUlkWydyaW5nLWZpbmdlci1waGFsYW54LXByb3hpbWFsJ107XG4gICAgICAgIGNvbnN0IGoyMSA9IHRoaXMuX2pvaW50c0J5SWRbJ3Bpbmt5LWZpbmdlci1waGFsYW54LXByb3hpbWFsJ107XG5cbiAgICAgICAgLy8gcmF5XG4gICAgICAgIGlmIChqMSAmJiBqNCAmJiBqNiAmJiBqOSAmJiBqMTYgJiYgajIxKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dFNvdXJjZS5fZGlydHlSYXkgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyByYXkgb3JpZ2luXG4gICAgICAgICAgICAvLyBnZXQgcG9pbnQgYmV0d2VlbiB0aHVtYiB0aXAgYW5kIGluZGV4IHRpcFxuICAgICAgICAgICAgdGhpcy5faW5wdXRTb3VyY2UuX3JheUxvY2FsLm9yaWdpbi5sZXJwKGo0Ll9sb2NhbFBvc2l0aW9uLCBqOS5fbG9jYWxQb3NpdGlvbiwgMC41KTtcblxuICAgICAgICAgICAgLy8gcmF5IGRpcmVjdGlvblxuICAgICAgICAgICAgbGV0IGpvaW50TCA9IGoxO1xuICAgICAgICAgICAgbGV0IGpvaW50UiA9IGoyMTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0U291cmNlLmhhbmRlZG5lc3MgPT09IFhSSEFORF9MRUZUKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGpvaW50TDtcbiAgICAgICAgICAgICAgICBqb2ludEwgPSBqb2ludFI7XG4gICAgICAgICAgICAgICAgam9pbnRSID0gdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gKEEpIGNhbGN1bGF0ZSBub3JtYWwgdmVjdG9yIGJldHdlZW4gMyBqb2ludHM6IHdyaXN0LCB0aHVtYiBtZXRhY2FycGFsLCBsaXR0bGUgcGhhbGFueCBwcm94aW1hbFxuICAgICAgICAgICAgdmVjQS5zdWIyKGpvaW50TC5fbG9jYWxQb3NpdGlvbiwgdGhpcy5fd3Jpc3QuX2xvY2FsUG9zaXRpb24pO1xuICAgICAgICAgICAgdmVjQi5zdWIyKGpvaW50Ui5fbG9jYWxQb3NpdGlvbiwgdGhpcy5fd3Jpc3QuX2xvY2FsUG9zaXRpb24pO1xuICAgICAgICAgICAgdmVjQy5jcm9zcyh2ZWNBLCB2ZWNCKS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgLy8gZ2V0IHBvaW50IGJldHdlZW46IGluZGV4IHBoYWxhbnggcHJveGltYWwgYW5kIHJpZ2h0IHBoYWxhbnggcHJveGltYWxcbiAgICAgICAgICAgIHZlY0EubGVycChqNi5fbG9jYWxQb3NpdGlvbiwgajE2Ll9sb2NhbFBvc2l0aW9uLCAwLjUpO1xuICAgICAgICAgICAgLy8gKEIpIGdldCB2ZWN0b3IgYmV0d2VlbiB0aGF0IHBvaW50IGFuZCBhIHdyaXN0XG4gICAgICAgICAgICB2ZWNBLnN1Yih0aGlzLl93cmlzdC5fbG9jYWxQb3NpdGlvbikubm9ybWFsaXplKCk7XG5cbiAgICAgICAgICAgIC8vIG1peCBub3JtYWwgdmVjdG9yIChBKSB3aXRoIGhhbmQgZGlyZWN0aW9uYWwgdmVjdG9yIChCKVxuICAgICAgICAgICAgdGhpcy5faW5wdXRTb3VyY2UuX3JheUxvY2FsLmRpcmVjdGlvbi5sZXJwKHZlY0MsIHZlY0EsIDAuNSkubm9ybWFsaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbXVsYXRlIHNxdWVlemUgZXZlbnRzIGJ5IGZvbGRpbmcgYWxsIDQgZmluZ2Vyc1xuICAgICAgICBjb25zdCBzcXVlZXppbmcgPSB0aGlzLl9maW5nZXJJc0Nsb3NlZCgxKSAmJiB0aGlzLl9maW5nZXJJc0Nsb3NlZCgyKSAmJiB0aGlzLl9maW5nZXJJc0Nsb3NlZCgzKSAmJiB0aGlzLl9maW5nZXJJc0Nsb3NlZCg0KTtcblxuICAgICAgICBpZiAoc3F1ZWV6aW5nKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lucHV0U291cmNlLl9zcXVlZXppbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dFNvdXJjZS5fc3F1ZWV6aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dFNvdXJjZS5maXJlKCdzcXVlZXplc3RhcnQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VyLmlucHV0LmZpcmUoJ3NxdWVlemVzdGFydCcsIHRoaXMuX2lucHV0U291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dFNvdXJjZS5fc3F1ZWV6aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXRTb3VyY2UuX3NxdWVlemluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXRTb3VyY2UuZmlyZSgnc3F1ZWV6ZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21hbmFnZXIuaW5wdXQuZmlyZSgnc3F1ZWV6ZScsIHRoaXMuX2lucHV0U291cmNlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0U291cmNlLmZpcmUoJ3NxdWVlemVlbmQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VyLmlucHV0LmZpcmUoJ3NxdWVlemVlbmQnLCB0aGlzLl9pbnB1dFNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBGaW5nZXIgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgZmluZ2VyIGlzIGNsb3NlZCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZpbmdlcklzQ2xvc2VkKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGZpbmdlciA9IHRoaXMuX2ZpbmdlcnNbaW5kZXhdO1xuICAgICAgICB2ZWNBLnN1YjIoZmluZ2VyLmpvaW50c1swXS5fbG9jYWxQb3NpdGlvbiwgZmluZ2VyLmpvaW50c1sxXS5fbG9jYWxQb3NpdGlvbikubm9ybWFsaXplKCk7XG4gICAgICAgIHZlY0Iuc3ViMihmaW5nZXIuam9pbnRzWzJdLl9sb2NhbFBvc2l0aW9uLCBmaW5nZXIuam9pbnRzWzNdLl9sb2NhbFBvc2l0aW9uKS5ub3JtYWxpemUoKTtcbiAgICAgICAgcmV0dXJuIHZlY0EuZG90KHZlY0IpIDwgLTAuODtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGpvaW50IGJ5IGl0cyBYUkhhbmQgaWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBJZCBvZiBhIGpvaW50IGJhc2VkIG9uIHNwZWNzIElEJ3MgaW4gWFJIYW5kOiBodHRwczovL2ltbWVyc2l2ZS13ZWIuZ2l0aHViLmlvL3dlYnhyLWhhbmQtaW5wdXQvI3NrZWxldG9uLWpvaW50cy1zZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtYckpvaW50fG51bGx9IEpvaW50IG9yIG51bGwgaWYgbm90IGF2YWlsYWJsZS5cbiAgICAgKi9cbiAgICBnZXRKb2ludEJ5SWQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2pvaW50c0J5SWRbaWRdIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBmaW5nZXJzIG9mIGEgaGFuZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtYckZpbmdlcltdfVxuICAgICAqL1xuICAgIGdldCBmaW5nZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmluZ2VycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGpvaW50cyBvZiBoYW5kLlxuICAgICAqXG4gICAgICogQHR5cGUge1hySm9pbnRbXX1cbiAgICAgKi9cbiAgICBnZXQgam9pbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fam9pbnRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygam9pbnRzIHRoYXQgYXJlIGZpbmdlcnRpcHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7WHJKb2ludFtdfVxuICAgICAqL1xuICAgIGdldCB0aXBzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGlwcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcmlzdCBvZiBhIGhhbmQsIG9yIG51bGwgaWYgaXQgaXMgbm90IGF2YWlsYWJsZSBieSBXZWJYUiB1bmRlcmx5aW5nIHN5c3RlbS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtYckpvaW50fG51bGx9XG4gICAgICovXG4gICAgZ2V0IHdyaXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3Jpc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0cmFja2luZyBpcyBhdmFpbGFibGUsIG90aGVyd2lzZSB0cmFja2luZyBtaWdodCBiZSBsb3N0LlxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IHRyYWNraW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhY2tpbmc7XG4gICAgfVxufVxuXG5leHBvcnQgeyBYckhhbmQgfTtcbiJdLCJuYW1lcyI6WyJmaW5nZXJKb2ludElkcyIsInZlY0EiLCJWZWMzIiwidmVjQiIsInZlY0MiLCJwbGF0Zm9ybSIsImJyb3dzZXIiLCJ3aW5kb3ciLCJYUkhhbmQiLCJYckhhbmQiLCJFdmVudEhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImlucHV0U291cmNlIiwiX21hbmFnZXIiLCJfaW5wdXRTb3VyY2UiLCJfdHJhY2tpbmciLCJfZmluZ2VycyIsIl9qb2ludHMiLCJfam9pbnRzQnlJZCIsIl90aXBzIiwiX3dyaXN0IiwieHJIYW5kIiwiX3hySW5wdXRTb3VyY2UiLCJoYW5kIiwiZ2V0Iiwiam9pbnQiLCJYckpvaW50IiwicHVzaCIsIndyaXN0IiwiZiIsImxlbmd0aCIsImZpbmdlciIsIlhyRmluZ2VyIiwiaiIsImpvaW50SWQiLCJ0aXAiLCJfdGlwIiwidXBkYXRlIiwiZnJhbWUiLCJ4cklucHV0U291cmNlIiwiam9pbnRTcGFjZSIsIl9pZCIsInBvc2UiLCJzZXNzaW9uIiwidmlzaWJpbGl0eVN0YXRlIiwiZ2V0Sm9pbnRQb3NlIiwiX3JlZmVyZW5jZVNwYWNlIiwiZmlyZSIsImoxIiwiajQiLCJqNiIsImo5IiwiajE2IiwiajIxIiwiX2RpcnR5UmF5IiwiX3JheUxvY2FsIiwib3JpZ2luIiwibGVycCIsIl9sb2NhbFBvc2l0aW9uIiwiam9pbnRMIiwiam9pbnRSIiwiaGFuZGVkbmVzcyIsIlhSSEFORF9MRUZUIiwidCIsInN1YjIiLCJjcm9zcyIsIm5vcm1hbGl6ZSIsInN1YiIsImRpcmVjdGlvbiIsInNxdWVlemluZyIsIl9maW5nZXJJc0Nsb3NlZCIsIl9zcXVlZXppbmciLCJpbnB1dCIsImluZGV4Iiwiam9pbnRzIiwiZG90IiwiZ2V0Sm9pbnRCeUlkIiwiaWQiLCJmaW5nZXJzIiwidGlwcyIsInRyYWNraW5nIiwiRVZFTlRfVFJBQ0tJTkciLCJFVkVOVF9UUkFDS0lOR0xPU1QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLGNBQWMsR0FBRyxFQUFFLENBQUE7QUFFdkIsTUFBTUMsSUFBSSxHQUFHLElBQUlDLElBQUksRUFBRSxDQUFBO0FBQ3ZCLE1BQU1DLElBQUksR0FBRyxJQUFJRCxJQUFJLEVBQUUsQ0FBQTtBQUN2QixNQUFNRSxJQUFJLEdBQUcsSUFBSUYsSUFBSSxFQUFFLENBQUE7QUFFdkIsSUFBSUcsUUFBUSxDQUFDQyxPQUFPLElBQUlDLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFO0VBQ25DUixjQUFjLEdBQUcsQ0FDYixDQUFDLGtCQUFrQixFQUFFLHdCQUF3QixFQUFFLHNCQUFzQixFQUFFLFdBQVcsQ0FBQyxFQUNuRixDQUFDLHlCQUF5QixFQUFFLCtCQUErQixFQUFFLG1DQUFtQyxFQUFFLDZCQUE2QixFQUFFLGtCQUFrQixDQUFDLEVBQ3BKLENB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
