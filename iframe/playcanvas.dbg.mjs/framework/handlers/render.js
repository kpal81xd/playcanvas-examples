import { Render } from '../../scene/render.js';
import { ResourceHandler } from './handler.js';

// The scope of this function is the render asset
function onContainerAssetLoaded(containerAsset) {
  const renderAsset = this;
  if (!renderAsset.resource) return;
  const containerResource = containerAsset.resource;
  const render = containerResource.renders && containerResource.renders[renderAsset.data.renderIndex];
  if (render) {
    renderAsset.resource.meshes = render.resource.meshes;
  }
}

// The scope of this function is the render asset
function onContainerAssetAdded(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.on('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.off('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  renderAsset.registry.once('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  if (!containerAsset.resource) {
    renderAsset.registry.load(containerAsset);
  } else {
    onContainerAssetLoaded.call(renderAsset, containerAsset);
  }
}
function onContainerAssetRemoved(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  if (renderAsset.resource) {
    renderAsset.resource.destroy();
  }
}

/**
 * Resource handler used for loading {@link Render} resources.
 *
 * @category Graphics
 */
class RenderHandler extends ResourceHandler {
  /**
   * Create a new RenderHandler instance.
   *
   * @param {import('../app-base.js').AppBase} app - The running {@link AppBase}.
   * @ignore
   */
  constructor(app) {
    super(app, 'render');
    this._registry = app.assets;
  }
  open(url, data) {
    return new Render();
  }
  patch(asset, registry) {
    if (!asset.data.containerAsset) return;
    const containerAsset = registry.get(asset.data.containerAsset);
    if (!containerAsset) {
      registry.once('add:' + asset.data.containerAsset, onContainerAssetAdded, asset);
      return;
    }
    onContainerAssetAdded.call(asset, containerAsset);
  }
}

export { RenderHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL3JlbmRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXIgfSBmcm9tICcuLi8uLi9zY2VuZS9yZW5kZXIuanMnO1xuXG5pbXBvcnQgeyBSZXNvdXJjZUhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXIuanMnO1xuXG4vLyBUaGUgc2NvcGUgb2YgdGhpcyBmdW5jdGlvbiBpcyB0aGUgcmVuZGVyIGFzc2V0XG5mdW5jdGlvbiBvbkNvbnRhaW5lckFzc2V0TG9hZGVkKGNvbnRhaW5lckFzc2V0KSB7XG4gICAgY29uc3QgcmVuZGVyQXNzZXQgPSB0aGlzO1xuICAgIGlmICghcmVuZGVyQXNzZXQucmVzb3VyY2UpIHJldHVybjtcblxuICAgIGNvbnN0IGNvbnRhaW5lclJlc291cmNlID0gY29udGFpbmVyQXNzZXQucmVzb3VyY2U7XG5cbiAgICBjb25zdCByZW5kZXIgPSBjb250YWluZXJSZXNvdXJjZS5yZW5kZXJzICYmIGNvbnRhaW5lclJlc291cmNlLnJlbmRlcnNbcmVuZGVyQXNzZXQuZGF0YS5yZW5kZXJJbmRleF07XG4gICAgaWYgKHJlbmRlcikge1xuICAgICAgICByZW5kZXJBc3NldC5yZXNvdXJjZS5tZXNoZXMgPSByZW5kZXIucmVzb3VyY2UubWVzaGVzO1xuICAgIH1cbn1cblxuLy8gVGhlIHNjb3BlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdGhlIHJlbmRlciBhc3NldFxuZnVuY3Rpb24gb25Db250YWluZXJBc3NldEFkZGVkKGNvbnRhaW5lckFzc2V0KSB7XG4gICAgY29uc3QgcmVuZGVyQXNzZXQgPSB0aGlzO1xuXG4gICAgcmVuZGVyQXNzZXQucmVnaXN0cnkub2ZmKCdsb2FkOicgKyBjb250YWluZXJBc3NldC5pZCwgb25Db250YWluZXJBc3NldExvYWRlZCwgcmVuZGVyQXNzZXQpO1xuICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5Lm9uKCdsb2FkOicgKyBjb250YWluZXJBc3NldC5pZCwgb25Db250YWluZXJBc3NldExvYWRlZCwgcmVuZGVyQXNzZXQpO1xuICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5Lm9mZigncmVtb3ZlOicgKyBjb250YWluZXJBc3NldC5pZCwgb25Db250YWluZXJBc3NldFJlbW92ZWQsIHJlbmRlckFzc2V0KTtcbiAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5vbmNlKCdyZW1vdmU6JyArIGNvbnRhaW5lckFzc2V0LmlkLCBvbkNvbnRhaW5lckFzc2V0UmVtb3ZlZCwgcmVuZGVyQXNzZXQpO1xuXG4gICAgaWYgKCFjb250YWluZXJBc3NldC5yZXNvdXJjZSkge1xuICAgICAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5sb2FkKGNvbnRhaW5lckFzc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvbkNvbnRhaW5lckFzc2V0TG9hZGVkLmNhbGwocmVuZGVyQXNzZXQsIGNvbnRhaW5lckFzc2V0KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG9uQ29udGFpbmVyQXNzZXRSZW1vdmVkKGNvbnRhaW5lckFzc2V0KSB7XG4gICAgY29uc3QgcmVuZGVyQXNzZXQgPSB0aGlzO1xuXG4gICAgcmVuZGVyQXNzZXQucmVnaXN0cnkub2ZmKCdsb2FkOicgKyBjb250YWluZXJBc3NldC5pZCwgb25Db250YWluZXJBc3NldExvYWRlZCwgcmVuZGVyQXNzZXQpO1xuXG4gICAgaWYgKHJlbmRlckFzc2V0LnJlc291cmNlKSB7XG4gICAgICAgIHJlbmRlckFzc2V0LnJlc291cmNlLmRlc3Ryb3koKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVzb3VyY2UgaGFuZGxlciB1c2VkIGZvciBsb2FkaW5nIHtAbGluayBSZW5kZXJ9IHJlc291cmNlcy5cbiAqXG4gKiBAY2F0ZWdvcnkgR3JhcGhpY3NcbiAqL1xuY2xhc3MgUmVuZGVySGFuZGxlciBleHRlbmRzIFJlc291cmNlSGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFJlbmRlckhhbmRsZXIgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYXBwLWJhc2UuanMnKS5BcHBCYXNlfSBhcHAgLSBUaGUgcnVubmluZyB7QGxpbmsgQXBwQmFzZX0uXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHAsICdyZW5kZXInKTtcblxuICAgICAgICB0aGlzLl9yZWdpc3RyeSA9IGFwcC5hc3NldHM7XG4gICAgfVxuXG4gICAgb3Blbih1cmwsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBwYXRjaChhc3NldCwgcmVnaXN0cnkpIHtcbiAgICAgICAgaWYgKCFhc3NldC5kYXRhLmNvbnRhaW5lckFzc2V0KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckFzc2V0ID0gcmVnaXN0cnkuZ2V0KGFzc2V0LmRhdGEuY29udGFpbmVyQXNzZXQpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lckFzc2V0KSB7XG4gICAgICAgICAgICByZWdpc3RyeS5vbmNlKCdhZGQ6JyArIGFzc2V0LmRhdGEuY29udGFpbmVyQXNzZXQsIG9uQ29udGFpbmVyQXNzZXRBZGRlZCwgYXNzZXQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb25Db250YWluZXJBc3NldEFkZGVkLmNhbGwoYXNzZXQsIGNvbnRhaW5lckFzc2V0KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFJlbmRlckhhbmRsZXIgfTtcbiJdLCJuYW1lcyI6WyJvbkNvbnRhaW5lckFzc2V0TG9hZGVkIiwiY29udGFpbmVyQXNzZXQiLCJyZW5kZXJBc3NldCIsInJlc291cmNlIiwiY29udGFpbmVyUmVzb3VyY2UiLCJyZW5kZXIiLCJyZW5kZXJzIiwiZGF0YSIsInJlbmRlckluZGV4IiwibWVzaGVzIiwib25Db250YWluZXJBc3NldEFkZGVkIiwicmVnaXN0cnkiLCJvZmYiLCJpZCIsIm9uIiwib25Db250YWluZXJBc3NldFJlbW92ZWQiLCJvbmNlIiwibG9hZCIsImNhbGwiLCJkZXN0cm95IiwiUmVuZGVySGFuZGxlciIsIlJlc291cmNlSGFuZGxlciIsImNvbnN0cnVjdG9yIiwiYXBwIiwiX3JlZ2lzdHJ5IiwiYXNzZXRzIiwib3BlbiIsInVybCIsIlJlbmRlciIsInBhdGNoIiwiYXNzZXQiLCJnZXQiXSwibWFwcGluZ3MiOiI7OztBQUlBO0FBQ0EsU0FBU0Esc0JBQXNCQSxDQUFDQyxjQUFjLEVBQUU7RUFDNUMsTUFBTUMsV0FBVyxHQUFHLElBQUksQ0FBQTtBQUN4QixFQUFBLElBQUksQ0FBQ0EsV0FBVyxDQUFDQyxRQUFRLEVBQUUsT0FBQTtBQUUzQixFQUFBLE1BQU1DLGlCQUFpQixHQUFHSCxjQUFjLENBQUNFLFFBQVEsQ0FBQTtBQUVqRCxFQUFBLE1BQU1FLE1BQU0sR0FBR0QsaUJBQWlCLENBQUNFLE9BQU8sSUFBSUYsaUJBQWlCLENBQUNFLE9BQU8sQ0FBQ0osV0FBVyxDQUFDSyxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFBO0FBQ25HLEVBQUEsSUFBSUgsTUFBTSxFQUFFO0lBQ1JILFdBQVcsQ0FBQ0MsUUFBUSxDQUFDTSxNQUFNLEdBQUdKLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDTSxNQUFNLENBQUE7QUFDeEQsR0FBQTtBQUNKLENBQUE7O0FBRUE7QUFDQSxTQUFTQyxxQkFBcUJBLENBQUNULGNBQWMsRUFBRTtFQUMzQyxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFBO0FBRXhCQSxFQUFBQSxXQUFXLENBQUNTLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDLE9BQU8sR0FBR1gsY0FBYyxDQUFDWSxFQUFFLEVBQUViLHNCQUFzQixFQUFFRSxXQUFXLENBQUMsQ0FBQTtBQUMxRkEsRUFBQUEsV0FBVyxDQUFDUyxRQUFRLENBQUNHLEVBQUUsQ0FBQyxPQUFPLEdBQUdiLGNBQWMsQ0FBQ1ksRUFBRSxFQUFFYixzQkFBc0IsRUFBRUUsV0FBVyxDQUFDLENBQUE7QUFDekZBLEVBQUFBLFdBQVcsQ0FBQ1MsUUFBUSxDQUFDQyxHQUFHLENBQUMsU0FBUyxHQUFHWCxjQUFjLENBQUNZLEVBQUUsRUFBRUUsdUJBQXVCLEVBQUViLFdBQVcsQ0FBQyxDQUFBO0FBQzdGQSxFQUFBQSxXQUFXLENBQUNTLFFBQVEsQ0FBQ0ssSUFBSSxDQUFDLFNBQVMsR0FBR2YsY0FBYyxDQUFDWSxFQUFFLEVBQUVFLHVCQUF1QixFQUFFYixXQUFXLENBQUMsQ0FBQTtBQUU5RixFQUFBLElBQUksQ0FBQ0QsY0FBYyxDQUFDRSxRQUFRLEVBQUU7QUFDMUJELElBQUFBLFdBQVcsQ0FBQ1MsUUFBUSxDQUFDTSxJQUFJLENBQUNoQixjQUFjLENBQUMsQ0FBQTtBQUM3QyxHQUFDLE1BQU07QUFDSEQsSUFBQUEsc0JBQXNCLENBQUNrQixJQUFJLENBQUNoQixXQUFXLEVBQUVELGNBQWMsQ0FBQyxDQUFBO0FBQzVELEdBQUE7QUFDSixDQUFBO0FBRUEsU0FBU2MsdUJBQXVCQSxDQUFDZCxjQUFjLEVBQUU7RUFDN0MsTUFBTUMsV0FBVyxHQUFHLElBQUksQ0FBQTtBQUV4QkEsRUFBQUEsV0FBVyxDQUFDUyxRQUFRLENBQUNDLEdBQUcsQ0FBQyxPQUFPLEdBQUdYLGNBQWMsQ0FBQ1ksRUFBRSxFQUFFYixzQkFBc0IsRUFBRUUsV0FBVyxDQUFDLENBQUE7RUFFMUYsSUFBSUEsV0FBVyxDQUFDQyxRQUFRLEVBQUU7QUFDdEJELElBQUFBLFdBQVcsQ0FBQ0MsUUFBUSxDQUFDZ0IsT0FBTyxFQUFFLENBQUE7QUFDbEMsR0FBQTtBQUNKLENBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGFBQWEsU0FBU0MsZUFBZSxDQUFDO0FBQ3hDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXQSxDQUFDQyxHQUFHLEVBQUU7QUFDYixJQUFBLEtBQUssQ0FBQ0EsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBRXBCLElBQUEsSUFBSSxDQUFDQyxTQUFTLEdBQUdELEdBQUcsQ0FBQ0UsTUFBTSxDQUFBO0FBQy9CLEdBQUE7QUFFQUMsRUFBQUEsSUFBSUEsQ0FBQ0MsR0FBRyxFQUFFcEIsSUFBSSxFQUFFO0lBQ1osT0FBTyxJQUFJcUIsTUFBTSxFQUFFLENBQUE7QUFDdkIsR0FBQTtBQUVBQyxFQUFBQSxLQUFLQSxDQUFDQyxLQUFLLEVBQUVuQixRQUFRLEVBQUU7QUFDbkIsSUFBQSxJQUFJLENBQUNtQixLQUFLLENBQUN2QixJQUFJLENBQUNOLGNBQWMsRUFDMUIsT0FBQTtJQUVKLE1BQU1BLGNBQWMsR0FBR1UsUUFBUSxDQUFDb0IsR0FBRyxDQUFDRCxLQUFLLENBQUN2QixJQUFJLENBQUNOLGNBQWMsQ0FBQyxDQUFBO0lBQzlELElBQUksQ0FBQ0EsY0FBYyxFQUFFO0FBQ2pCVSxNQUFBQSxRQUFRLENBQUNLLElBQUksQ0FBQyxNQUFNLEdBQUdjLEtBQUssQ0FBQ3ZCLElBQUksQ0FBQ04sY0FBYyxFQUFFUyxxQkFBcUIsRUFBRW9CLEtBQUssQ0FBQyxDQUFBO0FBQy9FLE1BQUEsT0FBQTtBQUNKLEtBQUE7QUFFQXBCLElBQUFBLHFCQUFxQixDQUFDUSxJQUFJLENBQUNZLEtBQUssRUFBRTdCLGNBQWMsQ0FBQyxDQUFBO0FBQ3JELEdBQUE7QUFDSjs7OzsifQ==
