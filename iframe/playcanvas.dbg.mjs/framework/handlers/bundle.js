import { platform } from '../../core/platform.js';
import { http, Http } from '../../platform/net/http.js';
import { Bundle } from '../bundle/bundle.js';
import { UntarWorker, Untar } from './untar.js';
import { ResourceHandler } from './handler.js';

/**
 * Loads Bundle Assets.
 *
 * @ignore
 */
class BundleHandler extends ResourceHandler {
  /**
   * Create a new BundleHandler instance.
   *
   * @param {import('../app-base.js').AppBase} app - The running {@link AppBase}.
   */
  constructor(app) {
    super(app, 'bundle');
    this._assets = app.assets;
    this._worker = null;
  }
  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }
    const self = this;
    http.get(url.load, {
      responseType: Http.ResponseType.ARRAY_BUFFER,
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        try {
          self._untar(response, callback);
        } catch (ex) {
          callback('Error loading bundle resource ' + url.original + ': ' + ex);
        }
      } else {
        callback('Error loading bundle resource ' + url.original + ': ' + err);
      }
    });
  }
  _untar(response, callback) {
    const self = this;

    // use web workers if available otherwise
    // fallback to untar'ing in the main thread
    if (platform.workers) {
      // create web worker if necessary
      if (!self._worker) {
        self._worker = new UntarWorker(self._assets.prefix);
      }
      self._worker.untar(response, function (err, files) {
        callback(err, files);

        // if we have no more requests for this worker then
        // destroy it
        if (!self._worker.hasPendingRequests()) {
          self._worker.destroy();
          self._worker = null;
        }
      });
    } else {
      const archive = new Untar(response);
      const files = archive.untar(self._assets.prefix);
      callback(null, files);
    }
  }
  open(url, data) {
    return new Bundle(data);
  }
}

export { BundleHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL2J1bmRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwbGF0Zm9ybSB9IGZyb20gJy4uLy4uL2NvcmUvcGxhdGZvcm0uanMnO1xuXG5pbXBvcnQgeyBodHRwLCBIdHRwIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vbmV0L2h0dHAuanMnO1xuXG5pbXBvcnQgeyBCdW5kbGUgfSBmcm9tICcuLi9idW5kbGUvYnVuZGxlLmpzJztcbmltcG9ydCB7IFVudGFyLCBVbnRhcldvcmtlciB9IGZyb20gJy4vdW50YXIuanMnO1xuXG5pbXBvcnQgeyBSZXNvdXJjZUhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXIuanMnO1xuXG4vKipcbiAqIExvYWRzIEJ1bmRsZSBBc3NldHMuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBCdW5kbGVIYW5kbGVyIGV4dGVuZHMgUmVzb3VyY2VIYW5kbGVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQnVuZGxlSGFuZGxlciBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAtYmFzZS5qcycpLkFwcEJhc2V9IGFwcCAtIFRoZSBydW5uaW5nIHtAbGluayBBcHBCYXNlfS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICAgICAgc3VwZXIoYXBwLCAnYnVuZGxlJyk7XG5cbiAgICAgICAgdGhpcy5fYXNzZXRzID0gYXBwLmFzc2V0cztcbiAgICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICB9XG5cbiAgICBsb2FkKHVybCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB1cmwgPSB7XG4gICAgICAgICAgICAgICAgbG9hZDogdXJsLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsOiB1cmxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICBodHRwLmdldCh1cmwubG9hZCwge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiBIdHRwLlJlc3BvbnNlVHlwZS5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgICByZXRyeTogdGhpcy5tYXhSZXRyaWVzID4gMCxcbiAgICAgICAgICAgIG1heFJldHJpZXM6IHRoaXMubWF4UmV0cmllc1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl91bnRhcihyZXNwb25zZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdFcnJvciBsb2FkaW5nIGJ1bmRsZSByZXNvdXJjZSAnICsgdXJsLm9yaWdpbmFsICsgJzogJyArIGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdFcnJvciBsb2FkaW5nIGJ1bmRsZSByZXNvdXJjZSAnICsgdXJsLm9yaWdpbmFsICsgJzogJyArIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF91bnRhcihyZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gdXNlIHdlYiB3b3JrZXJzIGlmIGF2YWlsYWJsZSBvdGhlcndpc2VcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gdW50YXInaW5nIGluIHRoZSBtYWluIHRocmVhZFxuICAgICAgICBpZiAocGxhdGZvcm0ud29ya2Vycykge1xuICAgICAgICAgICAgLy8gY3JlYXRlIHdlYiB3b3JrZXIgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAoIXNlbGYuX3dvcmtlcikge1xuICAgICAgICAgICAgICAgIHNlbGYuX3dvcmtlciA9IG5ldyBVbnRhcldvcmtlcihzZWxmLl9hc3NldHMucHJlZml4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5fd29ya2VyLnVudGFyKHJlc3BvbnNlLCBmdW5jdGlvbiAoZXJyLCBmaWxlcykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgZmlsZXMpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBtb3JlIHJlcXVlc3RzIGZvciB0aGlzIHdvcmtlciB0aGVuXG4gICAgICAgICAgICAgICAgLy8gZGVzdHJveSBpdFxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5fd29ya2VyLmhhc1BlbmRpbmdSZXF1ZXN0cygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3dvcmtlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3dvcmtlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhcmNoaXZlID0gbmV3IFVudGFyKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gYXJjaGl2ZS51bnRhcihzZWxmLl9hc3NldHMucHJlZml4KTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGZpbGVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4odXJsLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVuZGxlKGRhdGEpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQnVuZGxlSGFuZGxlciB9O1xuIl0sIm5hbWVzIjpbIkJ1bmRsZUhhbmRsZXIiLCJSZXNvdXJjZUhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImFwcCIsIl9hc3NldHMiLCJhc3NldHMiLCJfd29ya2VyIiwibG9hZCIsInVybCIsImNhbGxiYWNrIiwib3JpZ2luYWwiLCJzZWxmIiwiaHR0cCIsImdldCIsInJlc3BvbnNlVHlwZSIsIkh0dHAiLCJSZXNwb25zZVR5cGUiLCJBUlJBWV9CVUZGRVIiLCJyZXRyeSIsIm1heFJldHJpZXMiLCJlcnIiLCJyZXNwb25zZSIsIl91bnRhciIsImV4IiwicGxhdGZvcm0iLCJ3b3JrZXJzIiwiVW50YXJXb3JrZXIiLCJwcmVmaXgiLCJ1bnRhciIsImZpbGVzIiwiaGFzUGVuZGluZ1JlcXVlc3RzIiwiZGVzdHJveSIsImFyY2hpdmUiLCJVbnRhciIsIm9wZW4iLCJkYXRhIiwiQnVuZGxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsYUFBYSxTQUFTQyxlQUFlLENBQUM7QUFDeEM7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXQSxDQUFDQyxHQUFHLEVBQUU7QUFDYixJQUFBLEtBQUssQ0FBQ0EsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBRXBCLElBQUEsSUFBSSxDQUFDQyxPQUFPLEdBQUdELEdBQUcsQ0FBQ0UsTUFBTSxDQUFBO0lBQ3pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUksQ0FBQTtBQUN2QixHQUFBO0FBRUFDLEVBQUFBLElBQUlBLENBQUNDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0FBQ2hCLElBQUEsSUFBSSxPQUFPRCxHQUFHLEtBQUssUUFBUSxFQUFFO0FBQ3pCQSxNQUFBQSxHQUFHLEdBQUc7QUFDRkQsUUFBQUEsSUFBSSxFQUFFQyxHQUFHO0FBQ1RFLFFBQUFBLFFBQVEsRUFBRUYsR0FBQUE7T0FDYixDQUFBO0FBQ0wsS0FBQTtJQUVBLE1BQU1HLElBQUksR0FBRyxJQUFJLENBQUE7QUFFakJDLElBQUFBLElBQUksQ0FBQ0MsR0FBRyxDQUFDTCxHQUFHLENBQUNELElBQUksRUFBRTtBQUNmTyxNQUFBQSxZQUFZLEVBQUVDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxZQUFZO0FBQzVDQyxNQUFBQSxLQUFLLEVBQUUsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQztNQUMxQkEsVUFBVSxFQUFFLElBQUksQ0FBQ0EsVUFBQUE7QUFDckIsS0FBQyxFQUFFLFVBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO01BQ3hCLElBQUksQ0FBQ0QsR0FBRyxFQUFFO1FBQ04sSUFBSTtBQUNBVCxVQUFBQSxJQUFJLENBQUNXLE1BQU0sQ0FBQ0QsUUFBUSxFQUFFWixRQUFRLENBQUMsQ0FBQTtTQUNsQyxDQUFDLE9BQU9jLEVBQUUsRUFBRTtVQUNUZCxRQUFRLENBQUMsZ0NBQWdDLEdBQUdELEdBQUcsQ0FBQ0UsUUFBUSxHQUFHLElBQUksR0FBR2EsRUFBRSxDQUFDLENBQUE7QUFDekUsU0FBQTtBQUNKLE9BQUMsTUFBTTtRQUNIZCxRQUFRLENBQUMsZ0NBQWdDLEdBQUdELEdBQUcsQ0FBQ0UsUUFBUSxHQUFHLElBQUksR0FBR1UsR0FBRyxDQUFDLENBQUE7QUFDMUUsT0FBQTtBQUNKLEtBQUMsQ0FBQyxDQUFBO0FBQ04sR0FBQTtBQUVBRSxFQUFBQSxNQUFNQSxDQUFDRCxRQUFRLEVBQUVaLFFBQVEsRUFBRTtJQUN2QixNQUFNRSxJQUFJLEdBQUcsSUFBSSxDQUFBOztBQUVqQjtBQUNBO0lBQ0EsSUFBSWEsUUFBUSxDQUFDQyxPQUFPLEVBQUU7QUFDbEI7QUFDQSxNQUFBLElBQUksQ0FBQ2QsSUFBSSxDQUFDTCxPQUFPLEVBQUU7UUFDZkssSUFBSSxDQUFDTCxPQUFPLEdBQUcsSUFBSW9CLFdBQVcsQ0FBQ2YsSUFBSSxDQUFDUCxPQUFPLENBQUN1QixNQUFNLENBQUMsQ0FBQTtBQUN2RCxPQUFBO01BRUFoQixJQUFJLENBQUNMLE9BQU8sQ0FBQ3NCLEtBQUssQ0FBQ1AsUUFBUSxFQUFFLFVBQVVELEdBQUcsRUFBRVMsS0FBSyxFQUFFO0FBQy9DcEIsUUFBQUEsUUFBUSxDQUFDVyxHQUFHLEVBQUVTLEtBQUssQ0FBQyxDQUFBOztBQUVwQjtBQUNBO1FBQ0EsSUFBSSxDQUFDbEIsSUFBSSxDQUFDTCxPQUFPLENBQUN3QixrQkFBa0IsRUFBRSxFQUFFO0FBQ3BDbkIsVUFBQUEsSUFBSSxDQUFDTCxPQUFPLENBQUN5QixPQUFPLEVBQUUsQ0FBQTtVQUN0QnBCLElBQUksQ0FBQ0wsT0FBTyxHQUFHLElBQUksQ0FBQTtBQUN2QixTQUFBO0FBQ0osT0FBQyxDQUFDLENBQUE7QUFDTixLQUFDLE1BQU07QUFDSCxNQUFBLE1BQU0wQixPQUFPLEdBQUcsSUFBSUMsS0FBSyxDQUFDWixRQUFRLENBQUMsQ0FBQTtNQUNuQyxNQUFNUSxLQUFLLEdBQUdHLE9BQU8sQ0FBQ0osS0FBSyxDQUFDakIsSUFBSSxDQUFDUCxPQUFPLENBQUN1QixNQUFNLENBQUMsQ0FBQTtBQUNoRGxCLE1BQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUVvQixLQUFLLENBQUMsQ0FBQTtBQUN6QixLQUFBO0FBQ0osR0FBQTtBQUVBSyxFQUFBQSxJQUFJQSxDQUFDMUIsR0FBRyxFQUFFMkIsSUFBSSxFQUFFO0FBQ1osSUFBQSxPQUFPLElBQUlDLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDLENBQUE7QUFDM0IsR0FBQTtBQUNKOzs7OyJ9
