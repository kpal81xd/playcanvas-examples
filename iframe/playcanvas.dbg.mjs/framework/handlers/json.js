import { Http, http } from '../../platform/net/http.js';
import { ResourceHandler } from './handler.js';

class JsonHandler extends ResourceHandler {
  constructor(app) {
    super(app, 'json');
  }
  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    // if this a blob URL we need to set the response type as json
    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };
    if (url.load.startsWith('blob:')) {
      options.responseType = Http.ResponseType.JSON;
    }
    http.get(url.load, options, function (err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading JSON resource: ${url.original} [${err}]`);
      }
    });
  }
}

export { JsonHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2ZyYW1ld29yay9oYW5kbGVycy9qc29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGh0dHAsIEh0dHAgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9uZXQvaHR0cC5qcyc7XG5cbmltcG9ydCB7IFJlc291cmNlSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlci5qcyc7XG5cbmNsYXNzIEpzb25IYW5kbGVyIGV4dGVuZHMgUmVzb3VyY2VIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICAgICAgc3VwZXIoYXBwLCAnanNvbicpO1xuICAgIH1cblxuICAgIGxvYWQodXJsLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHVybCA9IHtcbiAgICAgICAgICAgICAgICBsb2FkOiB1cmwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWw6IHVybFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoaXMgYSBibG9iIFVSTCB3ZSBuZWVkIHRvIHNldCB0aGUgcmVzcG9uc2UgdHlwZSBhcyBqc29uXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICByZXRyeTogdGhpcy5tYXhSZXRyaWVzID4gMCxcbiAgICAgICAgICAgIG1heFJldHJpZXM6IHRoaXMubWF4UmV0cmllc1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1cmwubG9hZC5zdGFydHNXaXRoKCdibG9iOicpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJlc3BvbnNlVHlwZSA9IEh0dHAuUmVzcG9uc2VUeXBlLkpTT047XG4gICAgICAgIH1cblxuICAgICAgICBodHRwLmdldCh1cmwubG9hZCwgb3B0aW9ucywgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhgRXJyb3IgbG9hZGluZyBKU09OIHJlc291cmNlOiAke3VybC5vcmlnaW5hbH0gWyR7ZXJyfV1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBKc29uSGFuZGxlciB9O1xuIl0sIm5hbWVzIjpbIkpzb25IYW5kbGVyIiwiUmVzb3VyY2VIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJhcHAiLCJsb2FkIiwidXJsIiwiY2FsbGJhY2siLCJvcmlnaW5hbCIsIm9wdGlvbnMiLCJyZXRyeSIsIm1heFJldHJpZXMiLCJzdGFydHNXaXRoIiwicmVzcG9uc2VUeXBlIiwiSHR0cCIsIlJlc3BvbnNlVHlwZSIsIkpTT04iLCJodHRwIiwiZ2V0IiwiZXJyIiwicmVzcG9uc2UiXSwibWFwcGluZ3MiOiI7OztBQUlBLE1BQU1BLFdBQVcsU0FBU0MsZUFBZSxDQUFDO0VBQ3RDQyxXQUFXQSxDQUFDQyxHQUFHLEVBQUU7QUFDYixJQUFBLEtBQUssQ0FBQ0EsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ3RCLEdBQUE7QUFFQUMsRUFBQUEsSUFBSUEsQ0FBQ0MsR0FBRyxFQUFFQyxRQUFRLEVBQUU7QUFDaEIsSUFBQSxJQUFJLE9BQU9ELEdBQUcsS0FBSyxRQUFRLEVBQUU7QUFDekJBLE1BQUFBLEdBQUcsR0FBRztBQUNGRCxRQUFBQSxJQUFJLEVBQUVDLEdBQUc7QUFDVEUsUUFBQUEsUUFBUSxFQUFFRixHQUFBQTtPQUNiLENBQUE7QUFDTCxLQUFBOztBQUVBO0FBQ0EsSUFBQSxNQUFNRyxPQUFPLEdBQUc7QUFDWkMsTUFBQUEsS0FBSyxFQUFFLElBQUksQ0FBQ0MsVUFBVSxHQUFHLENBQUM7TUFDMUJBLFVBQVUsRUFBRSxJQUFJLENBQUNBLFVBQUFBO0tBQ3BCLENBQUE7SUFFRCxJQUFJTCxHQUFHLENBQUNELElBQUksQ0FBQ08sVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzlCSCxNQUFBQSxPQUFPLENBQUNJLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxZQUFZLENBQUNDLElBQUksQ0FBQTtBQUNqRCxLQUFBO0FBRUFDLElBQUFBLElBQUksQ0FBQ0MsR0FBRyxDQUFDWixHQUFHLENBQUNELElBQUksRUFBRUksT0FBTyxFQUFFLFVBQVVVLEdBQUcsRUFBRUMsUUFBUSxFQUFFO01BQ2pELElBQUksQ0FBQ0QsR0FBRyxFQUFFO0FBQ05aLFFBQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUVhLFFBQVEsQ0FBQyxDQUFBO0FBQzVCLE9BQUMsTUFBTTtRQUNIYixRQUFRLENBQUUsZ0NBQStCRCxHQUFHLENBQUNFLFFBQVMsQ0FBSVcsRUFBQUEsRUFBQUEsR0FBSSxHQUFFLENBQUMsQ0FBQTtBQUNyRSxPQUFBO0FBQ0osS0FBQyxDQUFDLENBQUE7QUFDTixHQUFBO0FBQ0o7Ozs7In0=
