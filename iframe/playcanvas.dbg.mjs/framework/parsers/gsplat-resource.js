import { BoundingBox } from '../../core/shape/bounding-box.js';
import { Entity } from '../entity.js';
import { GSplatInstance } from '../../scene/gsplat/gsplat-instance.js';
import { GSplat } from '../../scene/gsplat/gsplat.js';

/**
 * The resource for the gsplat asset type.
 *
 * @category Graphics
 */
class GSplatResource {
  /**
   * @param {import('../../platform/graphics/graphics-device.js').GraphicsDevice} device - The graphics device.
   * @param {import('../../scene/gsplat/gsplat-data.js').GSplatData} splatData - The splat data.
   * @hideconstructor
   */
  constructor(device, splatData) {
    /**
     * @type {import('../../platform/graphics/graphics-device.js').GraphicsDevice}
     * @ignore
     */
    this.device = void 0;
    /**
     * @type {import('../../scene/gsplat/gsplat-data.js').GSplatData}
     * @ignore
     */
    this.splatData = void 0;
    /**
     * @type {GSplat | null}
     * @ignore
     */
    this.splat = null;
    this.device = device;
    this.splatData = splatData.isCompressed ? splatData.decompress() : splatData;
  }
  destroy() {
    var _this$splat;
    this.device = null;
    this.splatData = null;
    (_this$splat = this.splat) == null || _this$splat.destroy();
    this.splat = null;
  }
  createSplat() {
    if (!this.splat) {
      const splatData = this.splatData;
      const aabb = new BoundingBox();
      this.splatData.calcAabb(aabb);
      const splat = new GSplat(this.device, splatData.numSplats, aabb);
      this.splat = splat;

      // texture data
      splat.updateColorData(splatData.getProp('f_dc_0'), splatData.getProp('f_dc_1'), splatData.getProp('f_dc_2'), splatData.getProp('opacity'));
      splat.updateScaleData(splatData.getProp('scale_0'), splatData.getProp('scale_1'), splatData.getProp('scale_2'));
      splat.updateRotationData(splatData.getProp('rot_0'), splatData.getProp('rot_1'), splatData.getProp('rot_2'), splatData.getProp('rot_3'));
      splat.updateCenterData(splatData.getProp('x'), splatData.getProp('y'), splatData.getProp('z'));

      // centers - constant buffer that is sent to the worker
      const x = splatData.getProp('x');
      const y = splatData.getProp('y');
      const z = splatData.getProp('z');
      const centers = new Float32Array(this.splatData.numSplats * 3);
      for (let i = 0; i < this.splatData.numSplats; ++i) {
        centers[i * 3 + 0] = x[i];
        centers[i * 3 + 1] = y[i];
        centers[i * 3 + 2] = z[i];
      }
      splat.centers = centers;
    }
    return this.splat;
  }

  /**
   * Instantiates an entity with a {@link GSplatComponent}.
   *
   * @param {import('../../scene/gsplat/gsplat-material.js').SplatMaterialOptions} [options] - The options.
   * @returns {Entity} The entity with {@link GSplatComponent}.
   */
  instantiate(options = {}) {
    const splatInstance = this.createInstance(options);
    const entity = new Entity();
    const component = entity.addComponent('gsplat', {
      instance: splatInstance
    });

    // set custom aabb
    component.customAabb = splatInstance.splat.aabb.clone();
    return entity;
  }
  createInstance(options = {}) {
    // shared splat between instances
    const splat = this.createSplat();
    return new GSplatInstance(splat, options);
  }
}

export { GSplatResource };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3NwbGF0LXJlc291cmNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL3BhcnNlcnMvZ3NwbGF0LXJlc291cmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvdW5kaW5nQm94IH0gZnJvbSAnLi4vLi4vY29yZS9zaGFwZS9ib3VuZGluZy1ib3guanMnO1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5LmpzJztcbmltcG9ydCB7IEdTcGxhdEluc3RhbmNlIH0gZnJvbSAnLi4vLi4vc2NlbmUvZ3NwbGF0L2dzcGxhdC1pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBHU3BsYXQgfSBmcm9tICcuLi8uLi9zY2VuZS9nc3BsYXQvZ3NwbGF0LmpzJztcblxuLyoqXG4gKiBUaGUgcmVzb3VyY2UgZm9yIHRoZSBnc3BsYXQgYXNzZXQgdHlwZS5cbiAqXG4gKiBAY2F0ZWdvcnkgR3JhcGhpY3NcbiAqL1xuY2xhc3MgR1NwbGF0UmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtpbXBvcnQoJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL2dyYXBoaWNzLWRldmljZS5qcycpLkdyYXBoaWNzRGV2aWNlfVxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBkZXZpY2U7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7aW1wb3J0KCcuLi8uLi9zY2VuZS9nc3BsYXQvZ3NwbGF0LWRhdGEuanMnKS5HU3BsYXREYXRhfVxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzcGxhdERhdGE7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7R1NwbGF0IHwgbnVsbH1cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgc3BsYXQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL2dyYXBoaWNzLWRldmljZS5qcycpLkdyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBUaGUgZ3JhcGhpY3MgZGV2aWNlLlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi9zY2VuZS9nc3BsYXQvZ3NwbGF0LWRhdGEuanMnKS5HU3BsYXREYXRhfSBzcGxhdERhdGEgLSBUaGUgc3BsYXQgZGF0YS5cbiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBzcGxhdERhdGEpIHtcbiAgICAgICAgdGhpcy5kZXZpY2UgPSBkZXZpY2U7XG4gICAgICAgIHRoaXMuc3BsYXREYXRhID0gc3BsYXREYXRhLmlzQ29tcHJlc3NlZCA/IHNwbGF0RGF0YS5kZWNvbXByZXNzKCkgOiBzcGxhdERhdGE7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXZpY2UgPSBudWxsO1xuICAgICAgICB0aGlzLnNwbGF0RGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3BsYXQ/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5zcGxhdCA9IG51bGw7XG4gICAgfVxuXG4gICAgY3JlYXRlU3BsYXQoKSB7XG4gICAgICAgIGlmICghdGhpcy5zcGxhdCkge1xuXG4gICAgICAgICAgICBjb25zdCBzcGxhdERhdGEgPSB0aGlzLnNwbGF0RGF0YTtcblxuICAgICAgICAgICAgY29uc3QgYWFiYiA9IG5ldyBCb3VuZGluZ0JveCgpO1xuICAgICAgICAgICAgdGhpcy5zcGxhdERhdGEuY2FsY0FhYmIoYWFiYik7XG5cbiAgICAgICAgICAgIGNvbnN0IHNwbGF0ID0gbmV3IEdTcGxhdCh0aGlzLmRldmljZSwgc3BsYXREYXRhLm51bVNwbGF0cywgYWFiYik7XG4gICAgICAgICAgICB0aGlzLnNwbGF0ID0gc3BsYXQ7XG5cbiAgICAgICAgICAgIC8vIHRleHR1cmUgZGF0YVxuICAgICAgICAgICAgc3BsYXQudXBkYXRlQ29sb3JEYXRhKHNwbGF0RGF0YS5nZXRQcm9wKCdmX2RjXzAnKSwgc3BsYXREYXRhLmdldFByb3AoJ2ZfZGNfMScpLCBzcGxhdERhdGEuZ2V0UHJvcCgnZl9kY18yJyksIHNwbGF0RGF0YS5nZXRQcm9wKCdvcGFjaXR5JykpO1xuICAgICAgICAgICAgc3BsYXQudXBkYXRlU2NhbGVEYXRhKHNwbGF0RGF0YS5nZXRQcm9wKCdzY2FsZV8wJyksIHNwbGF0RGF0YS5nZXRQcm9wKCdzY2FsZV8xJyksIHNwbGF0RGF0YS5nZXRQcm9wKCdzY2FsZV8yJykpO1xuICAgICAgICAgICAgc3BsYXQudXBkYXRlUm90YXRpb25EYXRhKHNwbGF0RGF0YS5nZXRQcm9wKCdyb3RfMCcpLCBzcGxhdERhdGEuZ2V0UHJvcCgncm90XzEnKSwgc3BsYXREYXRhLmdldFByb3AoJ3JvdF8yJyksIHNwbGF0RGF0YS5nZXRQcm9wKCdyb3RfMycpKTtcbiAgICAgICAgICAgIHNwbGF0LnVwZGF0ZUNlbnRlckRhdGEoc3BsYXREYXRhLmdldFByb3AoJ3gnKSwgc3BsYXREYXRhLmdldFByb3AoJ3knKSwgc3BsYXREYXRhLmdldFByb3AoJ3onKSk7XG5cbiAgICAgICAgICAgIC8vIGNlbnRlcnMgLSBjb25zdGFudCBidWZmZXIgdGhhdCBpcyBzZW50IHRvIHRoZSB3b3JrZXJcbiAgICAgICAgICAgIGNvbnN0IHggPSBzcGxhdERhdGEuZ2V0UHJvcCgneCcpO1xuICAgICAgICAgICAgY29uc3QgeSA9IHNwbGF0RGF0YS5nZXRQcm9wKCd5Jyk7XG4gICAgICAgICAgICBjb25zdCB6ID0gc3BsYXREYXRhLmdldFByb3AoJ3onKTtcblxuICAgICAgICAgICAgY29uc3QgY2VudGVycyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5zcGxhdERhdGEubnVtU3BsYXRzICogMyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3BsYXREYXRhLm51bVNwbGF0czsgKytpKSB7XG4gICAgICAgICAgICAgICAgY2VudGVyc1tpICogMyArIDBdID0geFtpXTtcbiAgICAgICAgICAgICAgICBjZW50ZXJzW2kgKiAzICsgMV0gPSB5W2ldO1xuICAgICAgICAgICAgICAgIGNlbnRlcnNbaSAqIDMgKyAyXSA9IHpbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGxhdC5jZW50ZXJzID0gY2VudGVycztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNwbGF0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlcyBhbiBlbnRpdHkgd2l0aCBhIHtAbGluayBHU3BsYXRDb21wb25lbnR9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3NjZW5lL2dzcGxhdC9nc3BsYXQtbWF0ZXJpYWwuanMnKS5TcGxhdE1hdGVyaWFsT3B0aW9uc30gW29wdGlvbnNdIC0gVGhlIG9wdGlvbnMuXG4gICAgICogQHJldHVybnMge0VudGl0eX0gVGhlIGVudGl0eSB3aXRoIHtAbGluayBHU3BsYXRDb21wb25lbnR9LlxuICAgICAqL1xuICAgIGluc3RhbnRpYXRlKG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAgIGNvbnN0IHNwbGF0SW5zdGFuY2UgPSB0aGlzLmNyZWF0ZUluc3RhbmNlKG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IG5ldyBFbnRpdHkoKTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZW50aXR5LmFkZENvbXBvbmVudCgnZ3NwbGF0Jywge1xuICAgICAgICAgICAgaW5zdGFuY2U6IHNwbGF0SW5zdGFuY2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2V0IGN1c3RvbSBhYWJiXG4gICAgICAgIGNvbXBvbmVudC5jdXN0b21BYWJiID0gc3BsYXRJbnN0YW5jZS5zcGxhdC5hYWJiLmNsb25lKCk7XG5cbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG5cbiAgICBjcmVhdGVJbnN0YW5jZShvcHRpb25zID0ge30pIHtcblxuICAgICAgICAvLyBzaGFyZWQgc3BsYXQgYmV0d2VlbiBpbnN0YW5jZXNcbiAgICAgICAgY29uc3Qgc3BsYXQgPSB0aGlzLmNyZWF0ZVNwbGF0KCk7XG4gICAgICAgIHJldHVybiBuZXcgR1NwbGF0SW5zdGFuY2Uoc3BsYXQsIG9wdGlvbnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgR1NwbGF0UmVzb3VyY2UgfTtcbiJdLCJuYW1lcyI6WyJHU3BsYXRSZXNvdXJjZSIsImNvbnN0cnVjdG9yIiwiZGV2aWNlIiwic3BsYXREYXRhIiwic3BsYXQiLCJpc0NvbXByZXNzZWQiLCJkZWNvbXByZXNzIiwiZGVzdHJveSIsIl90aGlzJHNwbGF0IiwiY3JlYXRlU3BsYXQiLCJhYWJiIiwiQm91bmRpbmdCb3giLCJjYWxjQWFiYiIsIkdTcGxhdCIsIm51bVNwbGF0cyIsInVwZGF0ZUNvbG9yRGF0YSIsImdldFByb3AiLCJ1cGRhdGVTY2FsZURhdGEiLCJ1cGRhdGVSb3RhdGlvbkRhdGEiLCJ1cGRhdGVDZW50ZXJEYXRhIiwieCIsInkiLCJ6IiwiY2VudGVycyIsIkZsb2F0MzJBcnJheSIsImkiLCJpbnN0YW50aWF0ZSIsIm9wdGlvbnMiLCJzcGxhdEluc3RhbmNlIiwiY3JlYXRlSW5zdGFuY2UiLCJlbnRpdHkiLCJFbnRpdHkiLCJjb21wb25lbnQiLCJhZGRDb21wb25lbnQiLCJpbnN0YW5jZSIsImN1c3RvbUFhYmIiLCJjbG9uZSIsIkdTcGxhdEluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxjQUFjLENBQUM7QUFtQmpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxTQUFTLEVBQUU7QUF2Qi9CO0FBQ0o7QUFDQTtBQUNBO0FBSEksSUFBQSxJQUFBLENBSUFELE1BQU0sR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUVOO0FBQ0o7QUFDQTtBQUNBO0FBSEksSUFBQSxJQUFBLENBSUFDLFNBQVMsR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUVUO0FBQ0o7QUFDQTtBQUNBO0lBSEksSUFJQUMsQ0FBQUEsS0FBSyxHQUFHLElBQUksQ0FBQTtJQVFSLElBQUksQ0FBQ0YsTUFBTSxHQUFHQSxNQUFNLENBQUE7QUFDcEIsSUFBQSxJQUFJLENBQUNDLFNBQVMsR0FBR0EsU0FBUyxDQUFDRSxZQUFZLEdBQUdGLFNBQVMsQ0FBQ0csVUFBVSxFQUFFLEdBQUdILFNBQVMsQ0FBQTtBQUNoRixHQUFBO0FBRUFJLEVBQUFBLE9BQU9BLEdBQUc7QUFBQSxJQUFBLElBQUFDLFdBQUEsQ0FBQTtJQUNOLElBQUksQ0FBQ04sTUFBTSxHQUFHLElBQUksQ0FBQTtJQUNsQixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUE7SUFDckIsQ0FBQUssV0FBQSxPQUFJLENBQUNKLEtBQUssYUFBVkksV0FBQSxDQUFZRCxPQUFPLEVBQUUsQ0FBQTtJQUNyQixJQUFJLENBQUNILEtBQUssR0FBRyxJQUFJLENBQUE7QUFDckIsR0FBQTtBQUVBSyxFQUFBQSxXQUFXQSxHQUFHO0FBQ1YsSUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDTCxLQUFLLEVBQUU7QUFFYixNQUFBLE1BQU1ELFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQTtBQUVoQyxNQUFBLE1BQU1PLElBQUksR0FBRyxJQUFJQyxXQUFXLEVBQUUsQ0FBQTtBQUM5QixNQUFBLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxRQUFRLENBQUNGLElBQUksQ0FBQyxDQUFBO0FBRTdCLE1BQUEsTUFBTU4sS0FBSyxHQUFHLElBQUlTLE1BQU0sQ0FBQyxJQUFJLENBQUNYLE1BQU0sRUFBRUMsU0FBUyxDQUFDVyxTQUFTLEVBQUVKLElBQUksQ0FBQyxDQUFBO01BQ2hFLElBQUksQ0FBQ04sS0FBSyxHQUFHQSxLQUFLLENBQUE7O0FBRWxCO0FBQ0FBLE1BQUFBLEtBQUssQ0FBQ1csZUFBZSxDQUFDWixTQUFTLENBQUNhLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRWIsU0FBUyxDQUFDYSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUViLFNBQVMsQ0FBQ2EsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFYixTQUFTLENBQUNhLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO01BQzFJWixLQUFLLENBQUNhLGVBQWUsQ0FBQ2QsU0FBUyxDQUFDYSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUViLFNBQVMsQ0FBQ2EsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFYixTQUFTLENBQUNhLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0FBQy9HWixNQUFBQSxLQUFLLENBQUNjLGtCQUFrQixDQUFDZixTQUFTLENBQUNhLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRWIsU0FBUyxDQUFDYSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUViLFNBQVMsQ0FBQ2EsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFYixTQUFTLENBQUNhLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO01BQ3hJWixLQUFLLENBQUNlLGdCQUFnQixDQUFDaEIsU0FBUyxDQUFDYSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUViLFNBQVMsQ0FBQ2EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFYixTQUFTLENBQUNhLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBOztBQUU5RjtBQUNBLE1BQUEsTUFBTUksQ0FBQyxHQUFHakIsU0FBUyxDQUFDYSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDaEMsTUFBQSxNQUFNSyxDQUFDLEdBQUdsQixTQUFTLENBQUNhLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNoQyxNQUFBLE1BQU1NLENBQUMsR0FBR25CLFNBQVMsQ0FBQ2EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRWhDLE1BQUEsTUFBTU8sT0FBTyxHQUFHLElBQUlDLFlBQVksQ0FBQyxJQUFJLENBQUNyQixTQUFTLENBQUNXLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUM5RCxNQUFBLEtBQUssSUFBSVcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ3RCLFNBQVMsQ0FBQ1csU0FBUyxFQUFFLEVBQUVXLENBQUMsRUFBRTtRQUMvQ0YsT0FBTyxDQUFDRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHTCxDQUFDLENBQUNLLENBQUMsQ0FBQyxDQUFBO1FBQ3pCRixPQUFPLENBQUNFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdKLENBQUMsQ0FBQ0ksQ0FBQyxDQUFDLENBQUE7UUFDekJGLE9BQU8sQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxDQUFDRyxDQUFDLENBQUMsQ0FBQTtBQUM3QixPQUFBO01BQ0FyQixLQUFLLENBQUNtQixPQUFPLEdBQUdBLE9BQU8sQ0FBQTtBQUMzQixLQUFBO0lBRUEsT0FBTyxJQUFJLENBQUNuQixLQUFLLENBQUE7QUFDckIsR0FBQTs7QUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSXNCLEVBQUFBLFdBQVdBLENBQUNDLE9BQU8sR0FBRyxFQUFFLEVBQUU7QUFFdEIsSUFBQSxNQUFNQyxhQUFhLEdBQUcsSUFBSSxDQUFDQyxjQUFjLENBQUNGLE9BQU8sQ0FBQyxDQUFBO0FBRWxELElBQUEsTUFBTUcsTUFBTSxHQUFHLElBQUlDLE1BQU0sRUFBRSxDQUFBO0FBQzNCLElBQUEsTUFBTUMsU0FBUyxHQUFHRixNQUFNLENBQUNHLFlBQVksQ0FBQyxRQUFRLEVBQUU7QUFDNUNDLE1BQUFBLFFBQVEsRUFBRU4sYUFBQUE7QUFDZCxLQUFDLENBQUMsQ0FBQTs7QUFFRjtJQUNBSSxTQUFTLENBQUNHLFVBQVUsR0FBR1AsYUFBYSxDQUFDeEIsS0FBSyxDQUFDTSxJQUFJLENBQUMwQixLQUFLLEVBQUUsQ0FBQTtBQUV2RCxJQUFBLE9BQU9OLE1BQU0sQ0FBQTtBQUNqQixHQUFBO0FBRUFELEVBQUFBLGNBQWNBLENBQUNGLE9BQU8sR0FBRyxFQUFFLEVBQUU7QUFFekI7QUFDQSxJQUFBLE1BQU12QixLQUFLLEdBQUcsSUFBSSxDQUFDSyxXQUFXLEVBQUUsQ0FBQTtBQUNoQyxJQUFBLE9BQU8sSUFBSTRCLGNBQWMsQ0FBQ2pDLEtBQUssRUFBRXVCLE9BQU8sQ0FBQyxDQUFBO0FBQzdDLEdBQUE7QUFDSjs7OzsifQ==
