import { Vec2 } from '../../../core/math/vec2.js';

/**
 * AnimNodes are used to represent a single animation track in the current state. Each state can
 * contain multiple AnimNodes, in which case they are stored in a BlendTree hierarchy, which will
 * control the weight (contribution to the states final animation) of its child AnimNodes.
 *
 * @ignore
 */
class AnimNode {
  /**
   * Create a new AnimNode instance.
   *
   * @param {import('./anim-state.js').AnimState} state - The AnimState that this BlendTree
   * belongs to.
   * @param {import('./anim-blend-tree.js').AnimBlendTree|null} parent - The parent of the AnimNode.
   * If not null, the AnimNode is stored as part of an {@link AnimBlendTree} hierarchy.
   * @param {string} name - The name of the AnimNode. Used when assigning an {@link AnimTrack} to
   * it.
   * @param {number[]|number} point - The coordinate/vector thats used to determine the weight of
   * this node when it's part of an {@link AnimBlendTree}.
   * @param {number} [speed] - The speed that its {@link AnimTrack} should play at. Defaults to 1.
   */
  constructor(state, parent, name, point, speed = 1) {
    this._state = state;
    this._parent = parent;
    this._name = name;
    if (Array.isArray(point)) {
      this._point = new Vec2(point[0], point[1]);
      this._pointLength = this._point.length();
    } else {
      this._point = point;
      this._pointLength = point;
    }
    this._speed = speed;
    this._weightedSpeed = 1.0;
    this._weight = 1.0;
    this._animTrack = null;
  }
  get parent() {
    return this._parent;
  }
  get name() {
    return this._name;
  }
  get path() {
    return this._parent ? this._parent.path + '.' + this._name : this._name;
  }
  get point() {
    return this._point;
  }
  get pointLength() {
    return this._pointLength;
  }
  set weight(value) {
    this._weight = value;
  }
  get weight() {
    return this._parent ? this._parent.weight * this._weight : this._weight;
  }
  get normalizedWeight() {
    const totalWeight = this._state.totalWeight;
    if (totalWeight === 0.0) return 0.0;
    return this.weight / totalWeight;
  }
  get speed() {
    return this._weightedSpeed * this._speed;
  }
  get absoluteSpeed() {
    return Math.abs(this._speed);
  }
  set weightedSpeed(weightedSpeed) {
    this._weightedSpeed = weightedSpeed;
  }
  get weightedSpeed() {
    return this._weightedSpeed;
  }
  set animTrack(value) {
    this._animTrack = value;
  }
  get animTrack() {
    return this._animTrack;
  }
}

export { AnimNode };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbS1ub2RlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2FuaW0vY29udHJvbGxlci9hbmltLW5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjMiB9IGZyb20gJy4uLy4uLy4uL2NvcmUvbWF0aC92ZWMyLmpzJztcblxuLyoqXG4gKiBBbmltTm9kZXMgYXJlIHVzZWQgdG8gcmVwcmVzZW50IGEgc2luZ2xlIGFuaW1hdGlvbiB0cmFjayBpbiB0aGUgY3VycmVudCBzdGF0ZS4gRWFjaCBzdGF0ZSBjYW5cbiAqIGNvbnRhaW4gbXVsdGlwbGUgQW5pbU5vZGVzLCBpbiB3aGljaCBjYXNlIHRoZXkgYXJlIHN0b3JlZCBpbiBhIEJsZW5kVHJlZSBoaWVyYXJjaHksIHdoaWNoIHdpbGxcbiAqIGNvbnRyb2wgdGhlIHdlaWdodCAoY29udHJpYnV0aW9uIHRvIHRoZSBzdGF0ZXMgZmluYWwgYW5pbWF0aW9uKSBvZiBpdHMgY2hpbGQgQW5pbU5vZGVzLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgQW5pbU5vZGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBbmltTm9kZSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuL2FuaW0tc3RhdGUuanMnKS5BbmltU3RhdGV9IHN0YXRlIC0gVGhlIEFuaW1TdGF0ZSB0aGF0IHRoaXMgQmxlbmRUcmVlXG4gICAgICogYmVsb25ncyB0by5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9hbmltLWJsZW5kLXRyZWUuanMnKS5BbmltQmxlbmRUcmVlfG51bGx9IHBhcmVudCAtIFRoZSBwYXJlbnQgb2YgdGhlIEFuaW1Ob2RlLlxuICAgICAqIElmIG5vdCBudWxsLCB0aGUgQW5pbU5vZGUgaXMgc3RvcmVkIGFzIHBhcnQgb2YgYW4ge0BsaW5rIEFuaW1CbGVuZFRyZWV9IGhpZXJhcmNoeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBBbmltTm9kZS4gVXNlZCB3aGVuIGFzc2lnbmluZyBhbiB7QGxpbmsgQW5pbVRyYWNrfSB0b1xuICAgICAqIGl0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW118bnVtYmVyfSBwb2ludCAtIFRoZSBjb29yZGluYXRlL3ZlY3RvciB0aGF0cyB1c2VkIHRvIGRldGVybWluZSB0aGUgd2VpZ2h0IG9mXG4gICAgICogdGhpcyBub2RlIHdoZW4gaXQncyBwYXJ0IG9mIGFuIHtAbGluayBBbmltQmxlbmRUcmVlfS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NwZWVkXSAtIFRoZSBzcGVlZCB0aGF0IGl0cyB7QGxpbmsgQW5pbVRyYWNrfSBzaG91bGQgcGxheSBhdC4gRGVmYXVsdHMgdG8gMS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSwgcGFyZW50LCBuYW1lLCBwb2ludCwgc3BlZWQgPSAxKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBvaW50KSkge1xuICAgICAgICAgICAgdGhpcy5fcG9pbnQgPSBuZXcgVmVjMihwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgICAgdGhpcy5fcG9pbnRMZW5ndGggPSB0aGlzLl9wb2ludC5sZW5ndGgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgICB0aGlzLl9wb2ludExlbmd0aCA9IHBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3BlZWQgPSBzcGVlZDtcbiAgICAgICAgdGhpcy5fd2VpZ2h0ZWRTcGVlZCA9IDEuMDtcbiAgICAgICAgdGhpcy5fd2VpZ2h0ID0gMS4wO1xuICAgICAgICB0aGlzLl9hbmltVHJhY2sgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cblxuICAgIGdldCBwYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50ID8gdGhpcy5fcGFyZW50LnBhdGggKyAnLicgKyB0aGlzLl9uYW1lIDogdGhpcy5fbmFtZTtcbiAgICB9XG5cbiAgICBnZXQgcG9pbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb2ludDtcbiAgICB9XG5cbiAgICBnZXQgcG9pbnRMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb2ludExlbmd0aDtcbiAgICB9XG5cbiAgICBzZXQgd2VpZ2h0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3dlaWdodCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCB3ZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgPyB0aGlzLl9wYXJlbnQud2VpZ2h0ICogdGhpcy5fd2VpZ2h0IDogdGhpcy5fd2VpZ2h0O1xuICAgIH1cblxuICAgIGdldCBub3JtYWxpemVkV2VpZ2h0KCkge1xuICAgICAgICBjb25zdCB0b3RhbFdlaWdodCA9IHRoaXMuX3N0YXRlLnRvdGFsV2VpZ2h0O1xuICAgICAgICBpZiAodG90YWxXZWlnaHQgPT09IDAuMCkgcmV0dXJuIDAuMDtcbiAgICAgICAgcmV0dXJuIHRoaXMud2VpZ2h0IC8gdG90YWxXZWlnaHQ7XG4gICAgfVxuXG4gICAgZ2V0IHNwZWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2VpZ2h0ZWRTcGVlZCAqIHRoaXMuX3NwZWVkO1xuICAgIH1cblxuICAgIGdldCBhYnNvbHV0ZVNwZWVkKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5fc3BlZWQpO1xuICAgIH1cblxuICAgIHNldCB3ZWlnaHRlZFNwZWVkKHdlaWdodGVkU3BlZWQpIHtcbiAgICAgICAgdGhpcy5fd2VpZ2h0ZWRTcGVlZCA9IHdlaWdodGVkU3BlZWQ7XG4gICAgfVxuXG4gICAgZ2V0IHdlaWdodGVkU3BlZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWlnaHRlZFNwZWVkO1xuICAgIH1cblxuICAgIHNldCBhbmltVHJhY2sodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYW5pbVRyYWNrID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGFuaW1UcmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1UcmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFuaW1Ob2RlIH07XG4iXSwibmFtZXMiOlsiQW5pbU5vZGUiLCJjb25zdHJ1Y3RvciIsInN0YXRlIiwicGFyZW50IiwibmFtZSIsInBvaW50Iiwic3BlZWQiLCJfc3RhdGUiLCJfcGFyZW50IiwiX25hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJfcG9pbnQiLCJWZWMyIiwiX3BvaW50TGVuZ3RoIiwibGVuZ3RoIiwiX3NwZWVkIiwiX3dlaWdodGVkU3BlZWQiLCJfd2VpZ2h0IiwiX2FuaW1UcmFjayIsInBhdGgiLCJwb2ludExlbmd0aCIsIndlaWdodCIsInZhbHVlIiwibm9ybWFsaXplZFdlaWdodCIsInRvdGFsV2VpZ2h0IiwiYWJzb2x1dGVTcGVlZCIsIk1hdGgiLCJhYnMiLCJ3ZWlnaHRlZFNwZWVkIiwiYW5pbVRyYWNrIl0sIm1hcHBpbmdzIjoiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsUUFBUSxDQUFDO0FBQ1g7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0lBQy9DLElBQUksQ0FBQ0MsTUFBTSxHQUFHTCxLQUFLLENB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
