import { Vec3 } from '../../../core/math/vec3.js';
import { BoundingBox } from '../../../core/shape/bounding-box.js';
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { GSplatComponent } from './component.js';
import { GSplatComponentData } from './data.js';

const _schema = ['enabled'];

// order matters here
const _properties = ['instance', 'asset', 'layers'];

/**
 * Allows an Entity to render a gsplat.
 *
 * @augments ComponentSystem
 * @category Graphics
 */
class GSplatComponentSystem extends ComponentSystem {
  /**
   * Create a new GSplatComponentSystem.
   *
   * @param {import('../../app-base.js').AppBase} app - The Application.
   * @hideconstructor
   */
  constructor(app) {
    super(app);
    this.id = 'gsplat';
    this.ComponentType = GSplatComponent;
    this.DataType = GSplatComponentData;
    this.schema = _schema;
    this.on('beforeremove', this.onRemove, this);
  }
  initializeComponentData(component, _data, properties) {
    // duplicate layer list
    if (_data.layers && _data.layers.length) {
      _data.layers = _data.layers.slice(0);
    }
    for (let i = 0; i < _properties.length; i++) {
      if (_data.hasOwnProperty(_properties[i])) {
        component[_properties[i]] = _data[_properties[i]];
      }
    }
    if (_data.aabbCenter && _data.aabbHalfExtents) {
      component.customAabb = new BoundingBox(new Vec3(_data.aabbCenter), new Vec3(_data.aabbHalfExtents));
    }
    super.initializeComponentData(component, _data, _schema);
  }
  cloneComponent(entity, clone) {
    const gSplatComponent = entity.gsplat;

    // copy properties
    const data = {};
    for (let i = 0; i < _properties.length; i++) {
      data[_properties[i]] = gSplatComponent[_properties[i]];
    }
    data.enabled = gSplatComponent.enabled;

    // gsplat instance cannot be used this way, remove it and manually clone it later
    delete data.instance;

    // clone component
    const component = this.addComponent(clone, data);

    // clone gsplat instance
    component.instance = gSplatComponent.instance.clone();
    if (gSplatComponent.customAabb) {
      component.customAabb = gSplatComponent.customAabb.clone();
    }
    return component;
  }
  onRemove(entity, component) {
    component.onRemove();
  }
}
Component._buildAccessors(GSplatComponent.prototype, _schema);

export { GSplatComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvZ3NwbGF0L3N5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9tYXRoL3ZlYzMuanMnO1xuaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tICcuLi8uLi8uLi9jb3JlL3NoYXBlL2JvdW5kaW5nLWJveC5qcyc7XG5cbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBDb21wb25lbnRTeXN0ZW0gfSBmcm9tICcuLi9zeXN0ZW0uanMnO1xuXG5pbXBvcnQgeyBHU3BsYXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBHU3BsYXRDb21wb25lbnREYXRhIH0gZnJvbSAnLi9kYXRhLmpzJztcblxuY29uc3QgX3NjaGVtYSA9IFtcbiAgICAnZW5hYmxlZCdcbl07XG5cbi8vIG9yZGVyIG1hdHRlcnMgaGVyZVxuY29uc3QgX3Byb3BlcnRpZXMgPSBbXG4gICAgJ2luc3RhbmNlJyxcbiAgICAnYXNzZXQnLFxuICAgICdsYXllcnMnXG5dO1xuXG4vKipcbiAqIEFsbG93cyBhbiBFbnRpdHkgdG8gcmVuZGVyIGEgZ3NwbGF0LlxuICpcbiAqIEBhdWdtZW50cyBDb21wb25lbnRTeXN0ZW1cbiAqIEBjYXRlZ29yeSBHcmFwaGljc1xuICovXG5jbGFzcyBHU3BsYXRDb21wb25lbnRTeXN0ZW0gZXh0ZW5kcyBDb21wb25lbnRTeXN0ZW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBHU3BsYXRDb21wb25lbnRTeXN0ZW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vYXBwLWJhc2UuanMnKS5BcHBCYXNlfSBhcHAgLSBUaGUgQXBwbGljYXRpb24uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuXG4gICAgICAgIHRoaXMuaWQgPSAnZ3NwbGF0JztcblxuICAgICAgICB0aGlzLkNvbXBvbmVudFR5cGUgPSBHU3BsYXRDb21wb25lbnQ7XG4gICAgICAgIHRoaXMuRGF0YVR5cGUgPSBHU3BsYXRDb21wb25lbnREYXRhO1xuXG4gICAgICAgIHRoaXMuc2NoZW1hID0gX3NjaGVtYTtcblxuICAgICAgICB0aGlzLm9uKCdiZWZvcmVyZW1vdmUnLCB0aGlzLm9uUmVtb3ZlLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplQ29tcG9uZW50RGF0YShjb21wb25lbnQsIF9kYXRhLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIGR1cGxpY2F0ZSBsYXllciBsaXN0XG4gICAgICAgIGlmIChfZGF0YS5sYXllcnMgJiYgX2RhdGEubGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgX2RhdGEubGF5ZXJzID0gX2RhdGEubGF5ZXJzLnNsaWNlKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfcHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKF9kYXRhLmhhc093blByb3BlcnR5KF9wcm9wZXJ0aWVzW2ldKSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudFtfcHJvcGVydGllc1tpXV0gPSBfZGF0YVtfcHJvcGVydGllc1tpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX2RhdGEuYWFiYkNlbnRlciAmJiBfZGF0YS5hYWJiSGFsZkV4dGVudHMpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5jdXN0b21BYWJiID0gbmV3IEJvdW5kaW5nQm94KG5ldyBWZWMzKF9kYXRhLmFhYmJDZW50ZXIpLCBuZXcgVmVjMyhfZGF0YS5hYWJiSGFsZkV4dGVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmluaXRpYWxpemVDb21wb25lbnREYXRhKGNvbXBvbmVudCwgX2RhdGEsIF9zY2hlbWEpO1xuICAgIH1cblxuICAgIGNsb25lQ29tcG9uZW50KGVudGl0eSwgY2xvbmUpIHtcblxuICAgICAgICBjb25zdCBnU3BsYXRDb21wb25lbnQgPSBlbnRpdHkuZ3NwbGF0O1xuXG4gICAgICAgIC8vIGNvcHkgcHJvcGVydGllc1xuICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3Byb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbX3Byb3BlcnRpZXNbaV1dID0gZ1NwbGF0Q29tcG9uZW50W19wcm9wZXJ0aWVzW2ldXTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmVuYWJsZWQgPSBnU3BsYXRDb21wb25lbnQuZW5hYmxlZDtcblxuICAgICAgICAvLyBnc3BsYXQgaW5zdGFuY2UgY2Fubm90IGJlIHVzZWQgdGhpcyB3YXksIHJlbW92ZSBpdCBhbmQgbWFudWFsbHkgY2xvbmUgaXQgbGF0ZXJcbiAgICAgICAgZGVsZXRlIGRhdGEuaW5zdGFuY2U7XG5cbiAgICAgICAgLy8gY2xvbmUgY29tcG9uZW50XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuYWRkQ29tcG9uZW50KGNsb25lLCBkYXRhKTtcblxuICAgICAgICAvLyBjbG9uZSBnc3BsYXQgaW5zdGFuY2VcbiAgICAgICAgY29tcG9uZW50Lmluc3RhbmNlID0gZ1NwbGF0Q29tcG9uZW50Lmluc3RhbmNlLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKGdTcGxhdENvbXBvbmVudC5jdXN0b21BYWJiKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuY3VzdG9tQWFiYiA9IGdTcGxhdENvbXBvbmVudC5jdXN0b21BYWJiLmNsb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKGVudGl0eSwgY29tcG9uZW50KSB7XG4gICAgICAgIGNvbXBvbmVudC5vblJlbW92ZSgpO1xuICAgIH1cbn1cblxuQ29tcG9uZW50Ll9idWlsZEFjY2Vzc29ycyhHU3BsYXRDb21wb25lbnQucHJvdG90eXBlLCBfc2NoZW1hKTtcblxuZXhwb3J0IHsgR1NwbGF0Q29tcG9uZW50U3lzdGVtIH07XG4iXSwibmFtZXMiOlsiX3NjaGVtYSIsIl9wcm9wZXJ0aWVzIiwiR1NwbGF0Q29tcG9uZW50U3lzdGVtIiwiQ29tcG9uZW50U3lzdGVtIiwiY29uc3RydWN0b3IiLCJhcHAiLCJpZCIsIkNvbXBvbmVudFR5cGUiLCJHU3BsYXRDb21wb25lbnQiLCJEYXRhVHlwZSIsIkdTcGxhdENvbXBvbmVudERhdGEiLCJzY2hlbWEiLCJvbiIsIm9uUmVtb3ZlIiwiaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEiLCJjb21wb25lbnQiLCJfZGF0YSIsInByb3BlcnRpZXMiLCJsYXllcnMiLCJsZW5ndGgiLCJzbGljZSIsImkiLCJoYXNPd25Qcm9wZXJ0eSIsImFhYmJDZW50ZXIiLCJhYWJiSGFsZkV4dGVudHMiLCJjdXN0b21BYWJiIiwiQm91bmRpbmdCb3giLCJWZWMzIiwiY2xvbmVDb21wb25lbnQiLCJlbnRpdHkiLCJjbG9uZSIsImdTcGxhdENvbXBvbmVudCIsImdzcGxhdCIsImRhdGEiLCJlbmFibGVkIiwiaW5zdGFuY2UiLCJhZGRDb21wb25lbnQiLCJDb21wb25lbnQiLCJfYnVpbGRBY2Nlc3NvcnMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFTQSxNQUFNQSxPQUFPLEdBQUcsQ0FDWixTQUFTLENBQ1osQ0FBQTs7QUFFRDtBQUNBLE1BQU1DLFdBQVcsR0FBRyxDQUNoQixVQUFVLEVBQ1YsT0FBTyxFQUNQLFFBQVEsQ0FDWCxDQUFBOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLHFCQUFxQixTQUFTQyxlQUFlLENBQUM7QUFDaEQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lD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
