import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { ButtonComponent } from './component.js';
import { ButtonComponentData } from './data.js';

const _schema = ['enabled', 'active', {
  name: 'imageEntity',
  type: 'entity'
}, {
  name: 'hitPadding',
  type: 'vec4'
}, 'transitionMode', {
  name: 'hoverTint',
  type: 'rgba'
}, {
  name: 'pressedTint',
  type: 'rgba'
}, {
  name: 'inactiveTint',
  type: 'rgba'
}, 'fadeDuration', 'hoverSpriteAsset', 'hoverSpriteFrame', 'pressedSpriteAsset', 'pressedSpriteFrame', 'inactiveSpriteAsset', 'inactiveSpriteFrame'];

/**
 * Manages creation of {@link ButtonComponent}s.
 *
 * @augments ComponentSystem
 * @category User Interface
 */
class ButtonComponentSystem extends ComponentSystem {
  /**
   * Create a new ButtonComponentSystem.
   *
   * @param {import('../../app-base.js').AppBase} app - The application.
   * @hideconstructor
   */
  constructor(app) {
    super(app);
    this.id = 'button';
    this.ComponentType = ButtonComponent;
    this.DataType = ButtonComponentData;
    this.schema = _schema;
    this.on('beforeremove', this._onRemoveComponent, this);
    this.app.systems.on('update', this.onUpdate, this);
  }
  initializeComponentData(component, data, properties) {
    super.initializeComponentData(component, data, _schema);
  }
  onUpdate(dt) {
    const components = this.store;
    for (const id in components) {
      const entity = components[id].entity;
      const component = entity.button;
      if (component.enabled && entity.enabled) {
        component.onUpdate();
      }
    }
  }
  _onRemoveComponent(entity, component) {
    component.onRemove();
  }
  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }
}
Component._buildAccessors(ButtonComponent.prototype, _schema);

export { ButtonComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvYnV0dG9uL3N5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgQ29tcG9uZW50U3lzdGVtIH0gZnJvbSAnLi4vc3lzdGVtLmpzJztcblxuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50RGF0YSB9IGZyb20gJy4vZGF0YS5qcyc7XG5cbmNvbnN0IF9zY2hlbWEgPSBbXG4gICAgJ2VuYWJsZWQnLFxuICAgICdhY3RpdmUnLFxuICAgIHsgbmFtZTogJ2ltYWdlRW50aXR5JywgdHlwZTogJ2VudGl0eScgfSxcbiAgICB7IG5hbWU6ICdoaXRQYWRkaW5nJywgdHlwZTogJ3ZlYzQnIH0sXG4gICAgJ3RyYW5zaXRpb25Nb2RlJyxcbiAgICB7IG5hbWU6ICdob3ZlclRpbnQnLCB0eXBlOiAncmdiYScgfSxcbiAgICB7IG5hbWU6ICdwcmVzc2VkVGludCcsIHR5cGU6ICdyZ2JhJyB9LFxuICAgIHsgbmFtZTogJ2luYWN0aXZlVGludCcsIHR5cGU6ICdyZ2JhJyB9LFxuICAgICdmYWRlRHVyYXRpb24nLFxuICAgICdob3ZlclNwcml0ZUFzc2V0JyxcbiAgICAnaG92ZXJTcHJpdGVGcmFtZScsXG4gICAgJ3ByZXNzZWRTcHJpdGVBc3NldCcsXG4gICAgJ3ByZXNzZWRTcHJpdGVGcmFtZScsXG4gICAgJ2luYWN0aXZlU3ByaXRlQXNzZXQnLFxuICAgICdpbmFjdGl2ZVNwcml0ZUZyYW1lJ1xuXTtcblxuLyoqXG4gKiBNYW5hZ2VzIGNyZWF0aW9uIG9mIHtAbGluayBCdXR0b25Db21wb25lbnR9cy5cbiAqXG4gKiBAYXVnbWVudHMgQ29tcG9uZW50U3lzdGVtXG4gKiBAY2F0ZWdvcnkgVXNlciBJbnRlcmZhY2VcbiAqL1xuY2xhc3MgQnV0dG9uQ29tcG9uZW50U3lzdGVtIGV4dGVuZHMgQ29tcG9uZW50U3lzdGVtIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQnV0dG9uQ29tcG9uZW50U3lzdGVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL2FwcC1iYXNlLmpzJykuQXBwQmFzZX0gYXBwIC0gVGhlIGFwcGxpY2F0aW9uLlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcblxuICAgICAgICB0aGlzLmlkID0gJ2J1dHRvbic7XG5cbiAgICAgICAgdGhpcy5Db21wb25lbnRUeXBlID0gQnV0dG9uQ29tcG9uZW50O1xuICAgICAgICB0aGlzLkRhdGFUeXBlID0gQnV0dG9uQ29tcG9uZW50RGF0YTtcblxuICAgICAgICB0aGlzLnNjaGVtYSA9IF9zY2hlbWE7XG5cbiAgICAgICAgdGhpcy5vbignYmVmb3JlcmVtb3ZlJywgdGhpcy5fb25SZW1vdmVDb21wb25lbnQsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYXBwLnN5c3RlbXMub24oJ3VwZGF0ZScsIHRoaXMub25VcGRhdGUsIHRoaXMpO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVDb21wb25lbnREYXRhKGNvbXBvbmVudCwgZGF0YSwgcHJvcGVydGllcykge1xuICAgICAgICBzdXBlci5pbml0aWFsaXplQ29tcG9uZW50RGF0YShjb21wb25lbnQsIGRhdGEsIF9zY2hlbWEpO1xuICAgIH1cblxuICAgIG9uVXBkYXRlKGR0KSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0aGlzLnN0b3JlO1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gY29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgZW50aXR5ID0gY29tcG9uZW50c1tpZF0uZW50aXR5O1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZW50aXR5LmJ1dHRvbjtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQuZW5hYmxlZCAmJiBlbnRpdHkuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5vblVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uUmVtb3ZlQ29tcG9uZW50KGVudGl0eSwgY29tcG9uZW50KSB7XG4gICAgICAgIGNvbXBvbmVudC5vblJlbW92ZSgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLmFwcC5zeXN0ZW1zLm9mZigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSwgdGhpcyk7XG4gICAgfVxufVxuXG5Db21wb25lbnQuX2J1aWxkQWNjZXNzb3JzKEJ1dHRvbkNvbXBvbmVudC5wcm90b3R5cGUsIF9zY2hlbWEpO1xuXG5leHBvcnQgeyBCdXR0b25Db21wb25lbnRTeXN0ZW0gfTtcbiJdLCJuYW1lcyI6WyJfc2NoZW1hIiwibmFtZSIsInR5cGUiLCJCdXR0b25Db21wb25lbnRTeXN0ZW0iLCJDb21wb25lbnRTeXN0ZW0iLCJjb25zdHJ1Y3RvciIsImFwcCIsImlkIiwiQ29tcG9uZW50VHlwZSIsIkJ1dHRvbkNvbXBvbmVudCIsIkRhdGFUeXBlIiwiQnV0dG9uQ29tcG9uZW50RGF0YSIsInNjaGVtYSIsIm9uIiwiX29uUmVtb3ZlQ29tcG9uZW50Iiwic3lzdGVtcyIsIm9uVXBkYXRlIiwiaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEiLCJjb21wb25lbnQiLCJkYXRhIiwicHJvcGVydGllcyIsImR0IiwiY29tcG9uZW50cyIsInN0b3JlIiwiZW50aXR5IiwiYnV0dG9uIiwiZW5hYmxlZCIsIm9uUmVtb3ZlIiwiZGVzdHJveSIsIm9mZiIsIkNvbXBvbmVudCIsIl9idWlsZEFjY2Vzc29ycyIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFNQSxN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
