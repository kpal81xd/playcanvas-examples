import { sortPriority } from '../../../core/sort.js';
import { Color } from '../../../core/math/color.js';
import { Vec4 } from '../../../core/math/vec4.js';
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { CameraComponent } from './component.js';
import { CameraComponentData } from './data.js';

const _schema = ['enabled'];

/**
 * Used to add and remove {@link CameraComponent}s from Entities. It also holds an array of all
 * active cameras.
 *
 * @augments ComponentSystem
 * @category Graphics
 */
class CameraComponentSystem extends ComponentSystem {
  /**
   * Create a new CameraComponentSystem instance.
   *
   * @param {import('../../app-base.js').AppBase} app - The Application.
   * @hideconstructor
   */
  constructor(app) {
    super(app);
    /**
     * Holds all the active camera components.
     *
     * @type {CameraComponent[]}
     */
    this.cameras = [];
    this.id = 'camera';
    this.ComponentType = CameraComponent;
    this.DataType = CameraComponentData;
    this.schema = _schema;
    this.on('beforeremove', this.onBeforeRemove, this);
    this.app.on('prerender', this.onAppPrerender, this);
    this.app.systems.on('update', this.onUpdate, this);
  }
  initializeComponentData(component, data, properties) {
    properties = ['aspectRatio', 'aspectRatioMode', 'calculateProjection', 'calculateTransform', 'clearColor', 'clearColorBuffer', 'clearDepthBuffer', 'clearStencilBuffer', 'renderSceneColorMap', 'renderSceneDepthMap', 'cullFaces', 'farClip', 'flipFaces', 'fov', 'frustumCulling', 'horizontalFov', 'layers', 'renderTarget', 'nearClip', 'orthoHeight', 'projection', 'priority', 'rect', 'scissorRect', 'aperture', 'shutter', 'sensitivity'];
    for (let i = 0; i < properties.length; i++) {
      const property = properties[i];
      if (data.hasOwnProperty(property)) {
        const value = data[property];
        switch (property) {
          case 'rect':
          case 'scissorRect':
            if (Array.isArray(value)) {
              component[property] = new Vec4(value[0], value[1], value[2], value[3]);
            } else {
              component[property] = value;
            }
            break;
          case 'clearColor':
            if (Array.isArray(value)) {
              component[property] = new Color(value[0], value[1], value[2], value[3]);
            } else {
              component[property] = value;
            }
            break;
          default:
            component[property] = value;
            break;
        }
      }
    }
    super.initializeComponentData(component, data, ['enabled']);
  }
  cloneComponent(entity, clone) {
    const c = entity.camera;
    return this.addComponent(clone, {
      aspectRatio: c.aspectRatio,
      aspectRatioMode: c.aspectRatioMode,
      calculateProjection: c.calculateProjection,
      calculateTransform: c.calculateTransform,
      clearColor: c.clearColor,
      clearColorBuffer: c.clearColorBuffer,
      clearDepthBuffer: c.clearDepthBuffer,
      clearStencilBuffer: c.clearStencilBuffer,
      renderSceneDepthMap: c.renderSceneDepthMap,
      renderSceneColorMap: c.renderSceneColorMap,
      cullFaces: c.cullFaces,
      enabled: c.enabled,
      farClip: c.farClip,
      flipFaces: c.flipFaces,
      fov: c.fov,
      frustumCulling: c.frustumCulling,
      horizontalFov: c.horizontalFov,
      layers: c.layers,
      renderTarget: c.renderTarget,
      nearClip: c.nearClip,
      orthoHeight: c.orthoHeight,
      projection: c.projection,
      priority: c.priority,
      rect: c.rect,
      scissorRect: c.scissorRect,
      aperture: c.aperture,
      sensitivity: c.sensitivity,
      shutter: c.shutter
    });
  }
  onBeforeRemove(entity, component) {
    this.removeCamera(component);
    component.onRemove();
  }
  onUpdate(dt) {}
  onAppPrerender() {
    for (let i = 0, len = this.cameras.length; i < len; i++) {
      this.cameras[i].onAppPrerender();
    }
  }
  addCamera(camera) {
    this.cameras.push(camera);
    sortPriority(this.cameras);
  }
  removeCamera(camera) {
    const index = this.cameras.indexOf(camera);
    if (index >= 0) {
      this.cameras.splice(index, 1);
      sortPriority(this.cameras);
    }
  }
  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }
}
Component._buildAccessors(CameraComponent.prototype, _schema);

export { CameraComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvY2FtZXJhL3N5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzb3J0UHJpb3JpdHkgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3NvcnQuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL21hdGgvY29sb3IuanMnO1xuaW1wb3J0IHsgVmVjNCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvbWF0aC92ZWM0LmpzJztcblxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCB7IENvbXBvbmVudFN5c3RlbSB9IGZyb20gJy4uL3N5c3RlbS5qcyc7XG5cbmltcG9ydCB7IENhbWVyYUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50LmpzJztcbmltcG9ydCB7IENhbWVyYUNvbXBvbmVudERhdGEgfSBmcm9tICcuL2RhdGEuanMnO1xuXG5jb25zdCBfc2NoZW1hID0gWydlbmFibGVkJ107XG5cbi8qKlxuICogVXNlZCB0byBhZGQgYW5kIHJlbW92ZSB7QGxpbmsgQ2FtZXJhQ29tcG9uZW50fXMgZnJvbSBFbnRpdGllcy4gSXQgYWxzbyBob2xkcyBhbiBhcnJheSBvZiBhbGxcbiAqIGFjdGl2ZSBjYW1lcmFzLlxuICpcbiAqIEBhdWdtZW50cyBDb21wb25lbnRTeXN0ZW1cbiAqIEBjYXRlZ29yeSBHcmFwaGljc1xuICovXG5jbGFzcyBDYW1lcmFDb21wb25lbnRTeXN0ZW0gZXh0ZW5kcyBDb21wb25lbnRTeXN0ZW0ge1xuICAgIC8qKlxuICAgICAqIEhvbGRzIGFsbCB0aGUgYWN0aXZlIGNhbWVyYSBjb21wb25lbnRzLlxuICAgICAqXG4gICAgICogQHR5cGUge0NhbWVyYUNvbXBvbmVudFtdfVxuICAgICAqL1xuICAgIGNhbWVyYXMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBDYW1lcmFDb21wb25lbnRTeXN0ZW0gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vYXBwLWJhc2UuanMnKS5BcHBCYXNlfSBhcHAgLSBUaGUgQXBwbGljYXRpb24uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuXG4gICAgICAgIHRoaXMuaWQgPSAnY2FtZXJhJztcblxuICAgICAgICB0aGlzLkNvbXBvbmVudFR5cGUgPSBDYW1lcmFDb21wb25lbnQ7XG4gICAgICAgIHRoaXMuRGF0YVR5cGUgPSBDYW1lcmFDb21wb25lbnREYXRhO1xuXG4gICAgICAgIHRoaXMuc2NoZW1hID0gX3NjaGVtYTtcblxuICAgICAgICB0aGlzLm9uKCdiZWZvcmVyZW1vdmUnLCB0aGlzLm9uQmVmb3JlUmVtb3ZlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5hcHAub24oJ3ByZXJlbmRlcicsIHRoaXMub25BcHBQcmVyZW5kZXIsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYXBwLnN5c3RlbXMub24oJ3VwZGF0ZScsIHRoaXMub25VcGRhdGUsIHRoaXMpO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVDb21wb25lbnREYXRhKGNvbXBvbmVudCwgZGF0YSwgcHJvcGVydGllcykge1xuICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgJ2FzcGVjdFJhdGlvJyxcbiAgICAgICAgICAgICdhc3BlY3RSYXRpb01vZGUnLFxuICAgICAgICAgICAgJ2NhbGN1bGF0ZVByb2plY3Rpb24nLFxuICAgICAgICAgICAgJ2NhbGN1bGF0ZVRyYW5zZm9ybScsXG4gICAgICAgICAgICAnY2xlYXJDb2xvcicsXG4gICAgICAgICAgICAnY2xlYXJDb2xvckJ1ZmZlcicsXG4gICAgICAgICAgICAnY2xlYXJEZXB0aEJ1ZmZlcicsXG4gICAgICAgICAgICAnY2xlYXJTdGVuY2lsQnVmZmVyJyxcbiAgICAgICAgICAgICdyZW5kZXJTY2VuZUNvbG9yTWFwJyxcbiAgICAgICAgICAgICdyZW5kZXJTY2VuZURlcHRoTWFwJyxcbiAgICAgICAgICAgICdjdWxsRmFjZXMnLFxuICAgICAgICAgICAgJ2ZhckNsaXAnLFxuICAgICAgICAgICAgJ2ZsaXBGYWNlcycsXG4gICAgICAgICAgICAnZm92JyxcbiAgICAgICAgICAgICdmcnVzdHVtQ3VsbGluZycsXG4gICAgICAgICAgICAnaG9yaXpvbnRhbEZvdicsXG4gICAgICAgICAgICAnbGF5ZXJzJyxcbiAgICAgICAgICAgICdyZW5kZXJUYXJnZXQnLFxuICAgICAgICAgICAgJ25lYXJDbGlwJyxcbiAgICAgICAgICAgICdvcnRob0hlaWdodCcsXG4gICAgICAgICAgICAncHJvamVjdGlvbicsXG4gICAgICAgICAgICAncHJpb3JpdHknLFxuICAgICAgICAgICAgJ3JlY3QnLFxuICAgICAgICAgICAgJ3NjaXNzb3JSZWN0JyxcbiAgICAgICAgICAgICdhcGVydHVyZScsXG4gICAgICAgICAgICAnc2h1dHRlcicsXG4gICAgICAgICAgICAnc2Vuc2l0aXZpdHknXG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVjdCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NjaXNzb3JSZWN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFtwcm9wZXJ0eV0gPSBuZXcgVmVjNCh2YWx1ZVswXSwgdmFsdWVbMV0sIHZhbHVlWzJdLCB2YWx1ZVszXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjbGVhckNvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFtwcm9wZXJ0eV0gPSBuZXcgQ29sb3IodmFsdWVbMF0sIHZhbHVlWzFdLCB2YWx1ZVsyXSwgdmFsdWVbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmluaXRpYWxpemVDb21wb25lbnREYXRhKGNvbXBvbmVudCwgZGF0YSwgWydlbmFibGVkJ10pO1xuICAgIH1cblxuICAgIGNsb25lQ29tcG9uZW50KGVudGl0eSwgY2xvbmUpIHtcbiAgICAgICAgY29uc3QgYyA9IGVudGl0eS5jYW1lcmE7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZENvbXBvbmVudChjbG9uZSwge1xuICAgICAgICAgICAgYXNwZWN0UmF0aW86IGMuYXNwZWN0UmF0aW8sXG4gICAgICAgICAgICBhc3BlY3RSYXRpb01vZGU6IGMuYXNwZWN0UmF0aW9Nb2RlLFxuICAgICAgICAgICAgY2FsY3VsYXRlUHJvamVjdGlvbjogYy5jYWxjdWxhdGVQcm9qZWN0aW9uLFxuICAgICAgICAgICAgY2FsY3VsYXRlVHJhbnNmb3JtOiBjLmNhbGN1bGF0ZVRyYW5zZm9ybSxcbiAgICAgICAgICAgIGNsZWFyQ29sb3I6IGMuY2xlYXJDb2xvcixcbiAgICAgICAgICAgIGNsZWFyQ29sb3JCdWZmZXI6IGMuY2xlYXJDb2xvckJ1ZmZlcixcbiAgICAgICAgICAgIGNsZWFyRGVwdGhCdWZmZXI6IGMuY2xlYXJEZXB0aEJ1ZmZlcixcbiAgICAgICAgICAgIGNsZWFyU3RlbmNpbEJ1ZmZlcjogYy5jbGVhclN0ZW5jaWxCdWZmZXIsXG4gICAgICAgICAgICByZW5kZXJTY2VuZURlcHRoTWFwOiBjLnJlbmRlclNjZW5lRGVwdGhNYXAsXG4gICAgICAgICAgICByZW5kZXJTY2VuZUNvbG9yTWFwOiBjLnJlbmRlclNjZW5lQ29sb3JNYXAsXG4gICAgICAgICAgICBjdWxsRmFjZXM6IGMuY3VsbEZhY2VzLFxuICAgICAgICAgICAgZW5hYmxlZDogYy5lbmFibGVkLFxuICAgICAgICAgICAgZmFyQ2xpcDogYy5mYXJDbGlwLFxuICAgICAgICAgICAgZmxpcEZhY2VzOiBjLmZsaXBGYWNlcyxcbiAgICAgICAgICAgIGZvdjogYy5mb3YsXG4gICAgICAgICAgICBmcnVzdHVtQ3VsbGluZzogYy5mcnVzdHVtQ3VsbGluZyxcbiAgICAgICAgICAgIGhvcml6b250YWxGb3Y6IGMuaG9yaXpvbnRhbEZvdixcbiAgICAgICAgICAgIGxheWVyczogYy5sYXllcnMsXG4gICAgICAgICAgICByZW5kZXJUYXJnZXQ6IGMucmVuZGVyVGFyZ2V0LFxuICAgICAgICAgICAgbmVhckNsaXA6IGMubmVhckNsaXAsXG4gICAgICAgICAgICBvcnRob0hlaWdodDogYy5vcnRob0hlaWdodCxcbiAgICAgICAgICAgIHByb2plY3Rpb246IGMucHJvamVjdGlvbixcbiAgICAgICAgICAgIHByaW9yaXR5OiBjLnByaW9yaXR5LFxuICAgICAgICAgICAgcmVjdDogYy5yZWN0LFxuICAgICAgICAgICAgc2Npc3NvclJlY3Q6IGMuc2Npc3NvclJlY3QsXG4gICAgICAgICAgICBhcGVydHVyZTogYy5hcGVydHVyZSxcbiAgICAgICAgICAgIHNlbnNpdGl2aXR5OiBjLnNlbnNpdGl2aXR5LFxuICAgICAgICAgICAgc2h1dHRlcjogYy5zaHV0dGVyXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQmVmb3JlUmVtb3ZlKGVudGl0eSwgY29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2FtZXJhKGNvbXBvbmVudCk7XG5cbiAgICAgICAgY29tcG9uZW50Lm9uUmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgb25VcGRhdGUoZHQpIHtcbiAgICB9XG5cbiAgICBvbkFwcFByZXJlbmRlcigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuY2FtZXJhcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmFzW2ldLm9uQXBwUHJlcmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRDYW1lcmEoY2FtZXJhKSB7XG4gICAgICAgIHRoaXMuY2FtZXJhcy5wdXNoKGNhbWVyYSk7XG4gICAgICAgIHNvcnRQcmlvcml0eSh0aGlzLmNhbWVyYXMpO1xuICAgIH1cblxuICAgIHJlbW92ZUNhbWVyYShjYW1lcmEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNhbWVyYXMuaW5kZXhPZihjYW1lcmEpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmFzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBzb3J0UHJpb3JpdHkodGhpcy5jYW1lcmFzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLmFwcC5zeXN0ZW1zLm9mZigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSwgdGhpcyk7XG4gICAgfVxufVxuXG5Db21wb25lbnQuX2J1aWxkQWNjZXNzb3JzKENhbWVyYUNvbXBvbmVudC5wcm90b3R5cGUsIF9zY2hlbWEpO1xuXG5leHBvcnQgeyBDYW1lcmFDb21wb25lbnRTeXN0ZW0gfTtcbiJdLCJuYW1lcyI6WyJfc2NoZW1hIiwiQ2FtZXJhQ29tcG9uZW50U3lzdGVtIiwiQ29tcG9uZW50U3lzdGVtIiwiY29uc3RydWN0b3IiLCJhcHAiLCJjYW1lcmFzIiwiaWQiLCJDb21wb25lbnRUeXBlIiwiQ2FtZXJhQ29tcG9uZW50IiwiRGF0YVR5cGUiLCJDYW1lcmFDb21wb25lbnREYXRhIiwic2NoZW1hIiwib24iLCJvbkJlZm9yZVJlbW92ZSIsIm9uQXBwUHJlcmVuZGVyIiwic3lzdGVtcyIsIm9uVXBkYXRlIiwiaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEiLCJjb21wb25lbnQiLCJkYXRhIiwicHJvcGVydGllcyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJWZWM0IiwiQ29sb3IiLCJjbG9uZUNvbXBvbmVudCIsImVudGl0eSIsImNsb25lIiwiYyIsImNhbWVyYSIsImFkZENvbXBvbmVudCIsImFzcGVjdFJhdGlvIiwiYXNwZWN0UmF0aW9Nb2RlIiwiY2FsY3VsYXRlUHJvamVjdGlvbiIsImNhbGN1bGF0ZVRyYW5zZm9ybSIsImNsZWFyQ29sb3IiLCJjbGVhckNvbG9yQnVmZmVyIiwiY2xlYXJEZXB0aEJ1ZmZlciIsImNsZWFyU3RlbmNpbEJ1ZmZlciIsInJlbmRlclNjZW5lRGVwdGhNYXAiLCJyZW5kZXJTY2VuZUNvbG9yTWFwIiwiY3VsbEZhY2VzIiwiZW5hYmxlZCIsImZhckNsaXAiLCJmbGlwRmFjZXMiLCJmb3YiLCJmcnVzdHVtQ3VsbGluZyIsImhvcml6b250YWxGb3YiLCJsYXllcnMiLCJyZW5kZXJUYXJnZXQiLCJuZWFyQ2xpcCIsIm9ydGhvSGVpZ2h0IiwicHJvamVjdGlvbiIsInByaW9yaXR5IiwicmVjdCIsInNjaXNzb3JSZWN0IiwiYXBlcnR1cmUiLCJzZW5zaXRpdml0eSIsInNodXR0ZXIiLCJyZW1vdmVDYW1lcmEiLCJvblJlbW92ZSIsImR0IiwibGVuIiwiYWRkQ2FtZXJhIiwicHVzaCIsInNvcnRQcmlvcml0eSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRlc3Ryb3kiLCJvZmYiLCJDb21wb25lbnQiLCJfYnVpbGRBY2Nlc3NvcnMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBVUEsTUFBTUEsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMscUJBQXFCLFNBQVNDLGVBQWUsQ0FBQztBQVFoRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ2IsS0FBSyxDQUFDQSxHQUFHLENBQUMsQ0FBQTtBQWRkO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7SUFKSSxJQUtBQyxDQUFBQSxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBV1IsSUFBSSxDQUFDQyxFQUFFLEdBQUcsUUFBUSxDQUFBO0lBRWxCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQyxlQUFlLENBQUE7SUFDcEMsSUFBSSxDQUFDQyxRQUFRLEdBQUdDLG1CQUFtQixDQUFBO0lBRW5DLElBQUksQ0FBQ0MsTUFBTSxHQUFHWCxPQUFPLENBQUE7SUFFckIsSUFBSSxDQUFDWSxFQUFFLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQ0MsY0FBYyxFQUFFLElBQUksQ0FBQyxD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
