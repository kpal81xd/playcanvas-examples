import { Debug } from '../../../core/debug.js';
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { AudioListenerComponent } from './component.js';
import { AudioListenerComponentData } from './data.js';

const _schema = ['enabled'];

/**
 * Component System for adding and removing {@link AudioListenerComponent} objects to Entities.
 *
 * @augments ComponentSystem
 * @category Sound
 */
class AudioListenerComponentSystem extends ComponentSystem {
  /**
   * Create a new AudioListenerComponentSystem instance.
   *
   * @param {import('../../app-base.js').AppBase} app - The application managing this system.
   * @hideconstructor
   */
  constructor(app) {
    super(app);
    this.id = 'audiolistener';
    this.ComponentType = AudioListenerComponent;
    this.DataType = AudioListenerComponentData;
    this.schema = _schema;
    this.manager = app.soundManager;
    Debug.assert(this.manager, "AudioSourceComponentSystem cannot be created witout sound manager");
    this.current = null;
    this.app.systems.on('update', this.onUpdate, this);
  }
  initializeComponentData(component, data, properties) {
    properties = ['enabled'];
    super.initializeComponentData(component, data, properties);
  }
  onUpdate(dt) {
    if (this.current) {
      const position = this.current.getPosition();
      this.manager.listener.setPosition(position);
      const wtm = this.current.getWorldTransform();
      this.manager.listener.setOrientation(wtm);
    }
  }
  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }
}
Component._buildAccessors(AudioListenerComponent.prototype, _schema);

export { AudioListenerComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvYXVkaW8tbGlzdGVuZXIvc3lzdGVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBDb21wb25lbnRTeXN0ZW0gfSBmcm9tICcuLi9zeXN0ZW0uanMnO1xuXG5pbXBvcnQgeyBBdWRpb0xpc3RlbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgQXVkaW9MaXN0ZW5lckNvbXBvbmVudERhdGEgfSBmcm9tICcuL2RhdGEuanMnO1xuXG5jb25zdCBfc2NoZW1hID0gWydlbmFibGVkJ107XG5cbi8qKlxuICogQ29tcG9uZW50IFN5c3RlbSBmb3IgYWRkaW5nIGFuZCByZW1vdmluZyB7QGxpbmsgQXVkaW9MaXN0ZW5lckNvbXBvbmVudH0gb2JqZWN0cyB0byBFbnRpdGllcy5cbiAqXG4gKiBAYXVnbWVudHMgQ29tcG9uZW50U3lzdGVtXG4gKiBAY2F0ZWdvcnkgU291bmRcbiAqL1xuY2xhc3MgQXVkaW9MaXN0ZW5lckNvbXBvbmVudFN5c3RlbSBleHRlbmRzIENvbXBvbmVudFN5c3RlbSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEF1ZGlvTGlzdGVuZXJDb21wb25lbnRTeXN0ZW0gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vYXBwLWJhc2UuanMnKS5BcHBCYXNlfSBhcHAgLSBUaGUgYXBwbGljYXRpb24gbWFuYWdpbmcgdGhpcyBzeXN0ZW0uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuXG4gICAgICAgIHRoaXMuaWQgPSAnYXVkaW9saXN0ZW5lcic7XG5cbiAgICAgICAgdGhpcy5Db21wb25lbnRUeXBlID0gQXVkaW9MaXN0ZW5lckNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5EYXRhVHlwZSA9IEF1ZGlvTGlzdGVuZXJDb21wb25lbnREYXRhO1xuXG4gICAgICAgIHRoaXMuc2NoZW1hID0gX3NjaGVtYTtcblxuICAgICAgICB0aGlzLm1hbmFnZXIgPSBhcHAuc291bmRNYW5hZ2VyO1xuICAgICAgICBEZWJ1Zy5hc3NlcnQodGhpcy5tYW5hZ2VyLCBcIkF1ZGlvU291cmNlQ29tcG9uZW50U3lzdGVtIGNhbm5vdCBiZSBjcmVhdGVkIHdpdG91dCBzb3VuZCBtYW5hZ2VyXCIpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5hcHAuc3lzdGVtcy5vbigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEoY29tcG9uZW50LCBkYXRhLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHByb3BlcnRpZXMgPSBbJ2VuYWJsZWQnXTtcblxuICAgICAgICBzdXBlci5pbml0aWFsaXplQ29tcG9uZW50RGF0YShjb21wb25lbnQsIGRhdGEsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIG9uVXBkYXRlKGR0KSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5jdXJyZW50LmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIubGlzdGVuZXIuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuXG4gICAgICAgICAgICBjb25zdCB3dG0gPSB0aGlzLmN1cnJlbnQuZ2V0V29ybGRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5saXN0ZW5lci5zZXRPcmllbnRhdGlvbih3dG0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuXG4gICAgICAgIHRoaXMuYXBwLnN5c3RlbXMub2ZmKCd1cGRhdGUnLCB0aGlzLm9uVXBkYXRlLCB0aGlzKTtcbiAgICB9XG59XG5cbkNvbXBvbmVudC5fYnVpbGRBY2Nlc3NvcnMoQXVkaW9MaXN0ZW5lckNvbXBvbmVudC5wcm90b3R5cGUsIF9zY2hlbWEpO1xuXG5leHBvcnQgeyBBdWRpb0xpc3RlbmVyQ29tcG9uZW50U3lzdGVtIH07XG4iXSwibmFtZXMiOlsiX3NjaGVtYSIsIkF1ZGlvTGlzdGVuZXJDb21wb25lbnRTeXN0ZW0iLCJDb21wb25lbnRTeXN0ZW0iLCJjb25zdHJ1Y3RvciIsImFwcCIsImlkIiwiQ29tcG9uZW50VHlwZSIsIkF1ZGlvTGlzdGVuZXJDb21wb25lbnQiLCJEYXRhVHlwZSIsIkF1ZGlvTGlzdGVuZXJDb21wb25lbnREYXRhIiwic2NoZW1hIiwibWFuYWdlciIsInNvdW5kTWFuYWdlciIsIkRlYnVnIiwiYXNzZXJ0IiwiY3VycmVudCIsInN5c3RlbXMiLCJvbiIsIm9uVXBkYXRlIiwiaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEiLCJjb21wb25lbnQiLCJkYXRhIiwicHJvcGVydGllcyIsImR0IiwicG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsImxpc3RlbmVyIiwic2V0UG9zaXRpb24iLCJ3dG0iLCJnZXRXb3JsZFRyYW5zZm9ybSIsInNldE9yaWVudGF0aW9uIiwiZGVzdHJveSIsIm9mZiIsIkNvbXBvbmVudCIsIl9idWlsZEFjY2Vzc29ycyIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBUUEsTUFBTUEsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLDRCQUE0QixTQUFTQyxlQUFlLENBQUM7QUFDdkQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtJQUNiLEtBQUssQ0FBQ0EsR0FBRyxDQUFDLENBQUE7SUFFVixJQUFJLENBQUNDLEVBQUUsR0FBRyxlQUFlLENBQUE7SUFFekIsSUFBSSxDQUFDQyxhQUFhLEdBQUdDLHNCQUFzQixDQUFBO0lBQzNDLElBQUksQ0FBQ0MsUUFBUSxHQUFHQywwQkFBMEIsQ0FBQTtJQUUxQyxJQUFJLENBQUNDLE1BQU0sR0FBR1YsT0FBTyxDQUFBO0FBRXJCLElBQUEsSUFBSSxDQUFDVyxPQUFPLEdBQUdQLEdBQUcsQ0FBQ1EsWUFBWSxDQUFBO0lBQy9CQyxLQUFLLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUNILE9BQU8sRUFBRSxtRUFBbUUsQ0FBQyxDQUFBO0lBRS9GLElBQUksQ0FBQ0ksT0FBTyxHQUFHLElBQUksQ0FBQTtBQUVuQixJQUFBLElBQUksQ0FBQ1gsR0FBRyxDQUFDWSxPQUFPLENBQUNDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDdEQsR0FBQTtBQUVBQyxFQUFBQSx1QkFBdUJBLENBQUNDLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUU7SUFDakRBLFVBQVUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRXhCLEtBQUssQ0FBQ0gsdUJBQXVCLENBQUNDLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxVQUFVLENBQUMsQ0FBQTtBQUM5RCxHQUFBO0VBRUFKLFFBQVFBLENBQUNLLEVBQUUsRUFBRTtJQUNULElBQUksSUFBSSxDQUFDUixPQUFPLEVBQUU7TUFDZCxNQUFNUyxRQUFRLEdBQUcsSUFBSSxDQUFDVCxPQUFPLENBQUNVLFdBQVcsRUFBRSxDQUFBO01BQzNDLElBQUksQ0FBQ2QsT0FBTyxDQUFDZSxRQUFRLENBQUNDLFdBQVcsQ0FBQ0gsUUFBUSxDQUFDLENBQUE7TUFFM0MsTUFBTUksR0FBRyxHQUFHLElBQUksQ0FBQ2IsT0FBTyxDQUFDYyxpQkFBaUIsRUFBRSxDQUFBO01BQzVDLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ2UsUUFBUSxDQUFDSSxjQUFjLENBQUNGLEdBQUcsQ0FBQyxDQUFBO0FBQzdDLEtBQUE7QUFDSixHQUFBO0FBRUFHLEVBQUFBLE9BQU9BLEdBQUc7SUFDTixLQUFLLENBQUNBLE9BQU8sRUFBRSxDQUFBO0FBRWYsSUFBQSxJQUFJLENBQUMzQixHQUFHLENBQUNZLE9BQU8sQ0FBQ2dCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDZCxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDdkQsR0FBQTtBQUNKLENBQUE7QUFFQWUsU0FBUyxDQUFDQyxlQUFlLENBQUMzQixzQkFBc0IsQ0FBQzRCLFNBQVMsRUFBRW5DLE9BQU8sQ0FBQzs7OzsifQ==
